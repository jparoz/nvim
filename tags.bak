!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/Users/jlp/.config/nvim/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	/113da1e/
#	plugged/vim-slash/plugin/slash.vim	/^map  <expr> #    <sid>wrap(<sid>immobile('#'))$/;"	m
#	plugged/vim-slash/plugin/slash.vim	/^xmap <expr> #    <sid>wrap(<sid>immobile("y?\\<c-r>=<sid>escape(1)\\<plug>(slash-cr)\\<plug>(sla/;"	m
$PERL6_EXCEPTIONS_HANDLER	plugged/ale/ale_linters/perl6/perl6.vim	/^let $PERL6_EXCEPTIONS_HANDLER = 'JSON'$/;"	v
$RAKUDO_ERROR_COLOR	plugged/ale/ale_linters/perl6/perl6.vim	/^let $RAKUDO_ERROR_COLOR = 0$/;"	v
%.tar.gz	plugged/delimitMate/Makefile	/^%.tar.gz: $(SOURCES)$/;"	t
%.vmb	plugged/delimitMate/Makefile	/^%.vmb: $(SOURCES)$/;"	t
%.vmb.gz	plugged/delimitMate/Makefile	/^%.vmb.gz: vimball$/;"	t
%.vmb.zip	plugged/delimitMate/Makefile	/^%.vmb.zip: vimball$/;"	t
%.zip	plugged/delimitMate/Makefile	/^%.zip: $(SOURCES)$/;"	t
*	plugged/vim-slash/plugin/slash.vim	/^map  <expr> *    <sid>wrap(<sid>immobile('*'))$/;"	m
*	plugged/vim-slash/plugin/slash.vim	/^xmap <expr> *    <sid>wrap(<sid>immobile("y\/\\<c-r>=<sid>escape(0)\\<plug>(slash-cr)\\<plug>(sl/;"	m
*Backward incompatible changes*	plugged/fzf/CHANGELOG.md	/^### *Backward incompatible changes*$/;"	S	section:CHANGELOG""0.9.4
,	plugged/vim-sneak/plugin/sneak.vim	/^    nmap , <Plug>Sneak_,$/;"	m
,	plugged/vim-sneak/plugin/sneak.vim	/^    omap , <Plug>Sneak_,$/;"	m
,	plugged/vim-sneak/plugin/sneak.vim	/^    xmap , <Plug>Sneak_,$/;"	m
-	init.vim	/^nnoremap - :Files<CR>$/;"	m
-	plugged/vim-dirvish/plugin/dirvish.vim	/^  nmap - <Plug>(dirvish_up)$/;"	m
.	plugged/vim-repeat/autoload/repeat.vim	/^    nmap . <Plug>(RepeatDot)$/;"	m
/	plugged/vim-dirvish/ftplugin/dirvish.vim	/^  nnoremap <buffer> \/ \/\\ze[^\/]*[\/]\\=$<Home>$/;"	m
/	plugged/vim-dirvish/ftplugin/dirvish.vim	/^  nnoremap <buffer> \/ \/\\ze[^\\\/]*[\\\/]\\=$<Home>$/;"	m
0.10.0	plugged/fzf/CHANGELOG.md	/^0.10.0$/;"	s	chapter:CHANGELOG
0.10.1	plugged/fzf/CHANGELOG.md	/^0.10.1$/;"	s	chapter:CHANGELOG
0.10.2	plugged/fzf/CHANGELOG.md	/^0.10.2$/;"	s	chapter:CHANGELOG
0.10.3	plugged/fzf/CHANGELOG.md	/^0.10.3$/;"	s	chapter:CHANGELOG
0.10.4	plugged/fzf/CHANGELOG.md	/^0.10.4$/;"	s	chapter:CHANGELOG
0.10.5	plugged/fzf/CHANGELOG.md	/^0.10.5$/;"	s	chapter:CHANGELOG
0.10.6	plugged/fzf/CHANGELOG.md	/^0.10.6$/;"	s	chapter:CHANGELOG
0.10.7	plugged/fzf/CHANGELOG.md	/^0.10.7$/;"	s	chapter:CHANGELOG
0.10.8	plugged/fzf/CHANGELOG.md	/^0.10.8$/;"	s	chapter:CHANGELOG
0.10.9	plugged/fzf/CHANGELOG.md	/^0.10.9$/;"	s	chapter:CHANGELOG
0.11.0	plugged/fzf/CHANGELOG.md	/^0.11.0$/;"	s	chapter:CHANGELOG
0.11.1	plugged/fzf/CHANGELOG.md	/^0.11.1$/;"	s	chapter:CHANGELOG
0.11.2	plugged/fzf/CHANGELOG.md	/^0.11.2$/;"	s	chapter:CHANGELOG
0.11.3	plugged/fzf/CHANGELOG.md	/^0.11.3$/;"	s	chapter:CHANGELOG
0.11.4	plugged/fzf/CHANGELOG.md	/^0.11.4$/;"	s	chapter:CHANGELOG
0.12.0	plugged/fzf/CHANGELOG.md	/^0.12.0$/;"	s	chapter:CHANGELOG
0.12.1	plugged/fzf/CHANGELOG.md	/^0.12.1$/;"	s	chapter:CHANGELOG
0.12.2	plugged/fzf/CHANGELOG.md	/^0.12.2$/;"	s	chapter:CHANGELOG
0.13.0	plugged/fzf/CHANGELOG.md	/^0.13.0$/;"	s	chapter:CHANGELOG
0.13.1	plugged/fzf/CHANGELOG.md	/^0.13.1$/;"	s	chapter:CHANGELOG
0.13.2	plugged/fzf/CHANGELOG.md	/^0.13.2$/;"	s	chapter:CHANGELOG
0.13.3	plugged/fzf/CHANGELOG.md	/^0.13.3$/;"	s	chapter:CHANGELOG
0.13.4	plugged/fzf/CHANGELOG.md	/^0.13.4$/;"	s	chapter:CHANGELOG
0.13.5	plugged/fzf/CHANGELOG.md	/^0.13.5$/;"	s	chapter:CHANGELOG
0.15.0	plugged/fzf/CHANGELOG.md	/^0.15.0$/;"	s	chapter:CHANGELOG
0.15.1	plugged/fzf/CHANGELOG.md	/^0.15.1$/;"	s	chapter:CHANGELOG
0.15.2	plugged/fzf/CHANGELOG.md	/^0.15.2$/;"	s	chapter:CHANGELOG
0.15.3	plugged/fzf/CHANGELOG.md	/^0.15.3$/;"	s	chapter:CHANGELOG
0.15.4	plugged/fzf/CHANGELOG.md	/^0.15.4$/;"	s	chapter:CHANGELOG
0.15.5	plugged/fzf/CHANGELOG.md	/^0.15.5$/;"	s	chapter:CHANGELOG
0.15.6	plugged/fzf/CHANGELOG.md	/^0.15.6$/;"	s	chapter:CHANGELOG
0.15.7	plugged/fzf/CHANGELOG.md	/^0.15.7$/;"	s	chapter:CHANGELOG
0.15.8	plugged/fzf/CHANGELOG.md	/^0.15.8$/;"	s	chapter:CHANGELOG
0.15.9	plugged/fzf/CHANGELOG.md	/^0.15.9$/;"	s	chapter:CHANGELOG
0.16.0	plugged/fzf/CHANGELOG.md	/^0.16.0$/;"	s	chapter:CHANGELOG
0.16.1	plugged/fzf/CHANGELOG.md	/^0.16.1$/;"	s	chapter:CHANGELOG
0.16.10	plugged/fzf/CHANGELOG.md	/^0.16.10$/;"	s	chapter:CHANGELOG
0.16.11	plugged/fzf/CHANGELOG.md	/^0.16.11$/;"	s	chapter:CHANGELOG
0.16.2	plugged/fzf/CHANGELOG.md	/^0.16.2$/;"	s	chapter:CHANGELOG
0.16.3	plugged/fzf/CHANGELOG.md	/^0.16.3$/;"	s	chapter:CHANGELOG
0.16.4	plugged/fzf/CHANGELOG.md	/^0.16.4$/;"	s	chapter:CHANGELOG
0.16.5	plugged/fzf/CHANGELOG.md	/^0.16.5$/;"	s	chapter:CHANGELOG
0.16.6	plugged/fzf/CHANGELOG.md	/^0.16.6$/;"	s	chapter:CHANGELOG
0.16.7	plugged/fzf/CHANGELOG.md	/^0.16.7$/;"	s	chapter:CHANGELOG
0.16.8	plugged/fzf/CHANGELOG.md	/^0.16.8$/;"	s	chapter:CHANGELOG
0.16.9	plugged/fzf/CHANGELOG.md	/^0.16.9$/;"	s	chapter:CHANGELOG
0.17.0	plugged/fzf/CHANGELOG.md	/^0.17.0$/;"	s	chapter:CHANGELOG
0.17.0-2	plugged/fzf/CHANGELOG.md	/^0.17.0-2$/;"	s	chapter:CHANGELOG
0.17.1	plugged/fzf/CHANGELOG.md	/^0.17.1$/;"	s	chapter:CHANGELOG
0.17.3	plugged/fzf/CHANGELOG.md	/^0.17.3$/;"	s	chapter:CHANGELOG
0.17.4	plugged/fzf/CHANGELOG.md	/^0.17.4$/;"	s	chapter:CHANGELOG
0.17.5	plugged/fzf/CHANGELOG.md	/^0.17.5$/;"	s	chapter:CHANGELOG
0.18.0	plugged/fzf/CHANGELOG.md	/^0.18.0$/;"	s	chapter:CHANGELOG
0.19.0	plugged/fzf/CHANGELOG.md	/^0.19.0$/;"	s	chapter:CHANGELOG
0.20.0	plugged/fzf/CHANGELOG.md	/^0.20.0$/;"	s	chapter:CHANGELOG
0.21.1	plugged/fzf/CHANGELOG.md	/^0.21.1$/;"	s	chapter:CHANGELOG
0.22.0	plugged/fzf/CHANGELOG.md	/^0.22.0$/;"	s	chapter:CHANGELOG
0.23.0	plugged/fzf/CHANGELOG.md	/^0.23.0$/;"	s	chapter:CHANGELOG
0.23.1	plugged/fzf/CHANGELOG.md	/^0.23.1$/;"	s	chapter:CHANGELOG
0.24.0	plugged/fzf/CHANGELOG.md	/^0.24.0$/;"	s	chapter:CHANGELOG
0.24.1	plugged/fzf/CHANGELOG.md	/^0.24.1$/;"	s	chapter:CHANGELOG
0.24.2	plugged/fzf/CHANGELOG.md	/^0.24.2$/;"	s	chapter:CHANGELOG
0.24.3	plugged/fzf/CHANGELOG.md	/^0.24.3$/;"	s	chapter:CHANGELOG
0.24.4	plugged/fzf/CHANGELOG.md	/^0.24.4$/;"	s	chapter:CHANGELOG
0.25.0	plugged/fzf/CHANGELOG.md	/^0.25.0$/;"	s	chapter:CHANGELOG
0.25.1	plugged/fzf/CHANGELOG.md	/^0.25.1$/;"	s	chapter:CHANGELOG
0.26.0	plugged/fzf/CHANGELOG.md	/^0.26.0$/;"	s	chapter:CHANGELOG
0.27.0	plugged/fzf/CHANGELOG.md	/^0.27.0$/;"	s	chapter:CHANGELOG
0.27.1	plugged/fzf/CHANGELOG.md	/^0.27.1$/;"	s	chapter:CHANGELOG
0.27.2	plugged/fzf/CHANGELOG.md	/^0.27.2$/;"	s	chapter:CHANGELOG
0.27.3	plugged/fzf/CHANGELOG.md	/^0.27.3$/;"	s	chapter:CHANGELOG
0.9.10	plugged/fzf/CHANGELOG.md	/^0.9.10$/;"	s	chapter:CHANGELOG
0.9.11	plugged/fzf/CHANGELOG.md	/^0.9.11$/;"	s	chapter:CHANGELOG
0.9.12	plugged/fzf/CHANGELOG.md	/^0.9.12$/;"	s	chapter:CHANGELOG
0.9.13	plugged/fzf/CHANGELOG.md	/^0.9.13$/;"	s	chapter:CHANGELOG
0.9.3	plugged/fzf/CHANGELOG.md	/^0.9.3$/;"	s	chapter:CHANGELOG
0.9.4	plugged/fzf/CHANGELOG.md	/^0.9.4$/;"	s	chapter:CHANGELOG
0.9.5	plugged/fzf/CHANGELOG.md	/^0.9.5$/;"	s	chapter:CHANGELOG
0.9.6	plugged/fzf/CHANGELOG.md	/^0.9.6$/;"	s	chapter:CHANGELOG
0.9.7	plugged/fzf/CHANGELOG.md	/^0.9.7$/;"	s	chapter:CHANGELOG
0.9.8	plugged/fzf/CHANGELOG.md	/^0.9.8$/;"	s	chapter:CHANGELOG
0.9.9	plugged/fzf/CHANGELOG.md	/^0.9.9$/;"	s	chapter:CHANGELOG
1. Supported Languages and Tools	plugged/ale/README.md	/^## 1. Supported Languages and Tools$/;"	s	chapter:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
1. Update the list of processes by pressing CTRL-R	plugged/fzf/README.md	/^#### 1. Update the list of processes by pressing CTRL-R$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
16color (`background=dark`)	plugged/lightline.vim/colorscheme.md	/^### 16color (`background=dark`)$/;"	S	chapter:Available Colorschemes
16color (`background=light`)	plugged/lightline.vim/colorscheme.md	/^### 16color (`background=light`)$/;"	S	chapter:Available Colorschemes
2. Switch between sources by pressing CTRL-D or CTRL-F	plugged/fzf/README.md	/^#### 2. Switch between sources by pressing CTRL-D or CTRL-F$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
2. Usage	plugged/ale/README.md	/^## 2. Usage$/;"	s	chapter:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
2.i Linting	plugged/ale/README.md	/^### 2.i Linting$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.ii Fixing	plugged/ale/README.md	/^### 2.ii Fixing$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.iii Completion	plugged/ale/README.md	/^### 2.iii Completion$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.iv Go To Definition	plugged/ale/README.md	/^### 2.iv Go To Definition$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.v Find References	plugged/ale/README.md	/^### 2.v Find References$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.vi Hovering	plugged/ale/README.md	/^### 2.vi Hovering$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.vii Symbol Search	plugged/ale/README.md	/^### 2.vii Symbol Search$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
2.viii Refactoring: Rename, Actions	plugged/ale/README.md	/^### 2.viii Refactoring: Rename, Actions$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""2. Usage
3. Installation	plugged/ale/README.md	/^## 3. Installation$/;"	s	chapter:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
3. Interactive ripgrep integration	plugged/fzf/README.md	/^#### 3. Interactive ripgrep integration$/;"	t	subsection:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics""Reloading the candidate list
3.i. Installation with Vim package management	plugged/ale/README.md	/^### 3.i. Installation with Vim package management$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation
3.ii. Installation with Pathogen	plugged/ale/README.md	/^### 3.ii. Installation with Pathogen$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation
3.iii. Installation with Vundle	plugged/ale/README.md	/^### 3.iii. Installation with Vundle$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation
3.iiii. Installation with Vim-Plug	plugged/ale/README.md	/^### 3.iiii. Installation with Vim-Plug$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation
4. Contributing	plugged/ale/README.md	/^## 4. Contributing$/;"	s	chapter:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
5. FAQ	plugged/ale/README.md	/^## 5. FAQ$/;"	s	chapter:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
5.i. How do I disable particular linters?	plugged/ale/README.md	/^### 5.i. How do I disable particular linters?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.ii. How can I see what ALE has configured for the current file?	plugged/ale/README.md	/^### 5.ii. How can I see what ALE has configured for the current file?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.iii. How can I use ALE and coc.nvim together?	plugged/ale/README.md	/^### 5.iii. How can I use ALE and coc.nvim together?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.iv. How can I keep the sign gutter open?	plugged/ale/README.md	/^### 5.iv. How can I keep the sign gutter open?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.ix. How can I change the format for echo messages?	plugged/ale/README.md	/^### 5.ix. How can I change the format for echo messages?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.v. How can I change the signs ALE uses?	plugged/ale/README.md	/^### 5.v. How can I change the signs ALE uses?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.vi. How can I change or disable the highlights ALE uses?	plugged/ale/README.md	/^### 5.vi. How can I change or disable the highlights ALE uses?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.vii. How can I show errors or warnings in my statusline?	plugged/ale/README.md	/^### 5.vii. How can I show errors or warnings in my statusline?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.viii. How can I show errors or warnings in my lightline?	plugged/ale/README.md	/^### 5.viii. How can I show errors or warnings in my lightline?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.x. How can I execute some code when ALE starts or stops linting?	plugged/ale/README.md	/^### 5.x. How can I execute some code when ALE starts or stops linting?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xi. How can I navigate between errors quickly?	plugged/ale/README.md	/^### 5.xi. How can I navigate between errors quickly?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xii. How can I run linters only when I save files?	plugged/ale/README.md	/^### 5.xii. How can I run linters only when I save files?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xiii. How can I use the quickfix list instead of the loclist?	plugged/ale/README.md	/^### 5.xiii. How can I use the quickfix list instead of the loclist?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xiv. How can I check JSX files with both stylelint and eslint?	plugged/ale/README.md	/^### 5.xiv. How can I check JSX files with both stylelint and eslint?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xix. How can I configure the height of the list in which ALE displays errors?	plugged/ale/README.md	/^### 5.xix. How can I configure the height of the list in which ALE displays errors?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xv. How can I check Vue files with ESLint?	plugged/ale/README.md	/^### 5.xv. How can I check Vue files with ESLint?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xvi. Will this plugin eat all of my laptop battery power?	plugged/ale/README.md	/^### 5.xvi. Will this plugin eat all of my laptop battery power?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xvii. How can I configure my C or C++ project?	plugged/ale/README.md	/^### 5.xvii. How can I configure my C or C++ project?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xviii. How can I configure ALE differently for different buffers?	plugged/ale/README.md	/^### 5.xviii. How can I configure ALE differently for different buffers?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xx. How can I run linters or fixers via Docker or a VM?	plugged/ale/README.md	/^### 5.xx. How can I run linters or fixers via Docker or a VM?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xxi. How can I change the borders for floating preview windows?	plugged/ale/README.md	/^### 5.xxi. How can I change the borders for floating preview windows?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
5.xxii. How can I use ALE and vim-lsp together?	plugged/ale/README.md	/^### 5.xxii. How can I use ALE and vim-lsp together?$/;"	S	section:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""5. FAQ
:	init.vim	/^nnoremap : ;$/;"	m
:	init.vim	/^xnoremap : ;$/;"	m
:ALEInfo	plugged/ale/.github/ISSUE_TEMPLATE/report-a-bug.md	/^### :ALEInfo$/;"	S	section:Reproducing the bug
;	init.vim	/^nnoremap ; :$/;"	m
;	init.vim	/^xnoremap ; :$/;"	m
;	plugged/vim-sneak/plugin/sneak.vim	/^  nmap ; <Plug>Sneak_;$/;"	m
;	plugged/vim-sneak/plugin/sneak.vim	/^  omap ; <Plug>Sneak_;$/;"	m
;	plugged/vim-sneak/plugin/sneak.vim	/^  xmap ; <Plug>Sneak_;$/;"	m
<BSlash>	init.vim	/^nmap <BSlash> <Plug>Commentary$/;"	m
<BSlash>	init.vim	/^omap <BSlash> <Plug>Commentary$/;"	m
<BSlash>	init.vim	/^xmap <BSlash> <Plug>Commentary$/;"	m
<BSlash><BSlash>	init.vim	/^nmap <BSlash><BSlash> <Plug>CommentaryLine$/;"	m
<BSlash>u	init.vim	/^nmap <BSlash>u <Plug>CommentaryUndo$/;"	m
<C-A>	plugged/vim-speeddating/plugin/speeddating.vim	/^  nmap  <C-A>     <Plug>SpeedDatingUp$/;"	m
<C-A>	plugged/vim-speeddating/plugin/speeddating.vim	/^  xmap  <C-A>     <Plug>SpeedDatingUp$/;"	m
<C-G>S	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>g	plugged/delimitMate/plugin/delimitMate.vim	/^    imap <silent> <buffer> <C-G>g <Plug>delimitMateJumpMany$/;"	m
<C-G>s	plugged/vim-surround/plugin/surround.vim	/^    imap      <C-G>s <Plug>Isurround$/;"	m
<C-N>	plugged/vim-fugitive/autoload/fugitive.vim	/^        nnoremap <buffer> <silent> <C-N> :<C-U>execute <SID>NextItem(v:count1)<CR>$/;"	m
<C-P>	plugged/vim-fugitive/autoload/fugitive.vim	/^          nnoremap <buffer> <silent> <C-P> :<C-U>execute <SID>PreviousItem(v:count1)<CR>$/;"	m
<C-P>	plugged/vim-fugitive/autoload/fugitive.vim	/^          nnoremap <buffer> <silent> <C-P> :<C-U>execute line('.') == 1 ? 'CtrlP ' . fnameescape/;"	m
<C-R>	plugged/vim-repeat/autoload/repeat.vim	/^    nmap <C-R> <Plug>(RepeatRedo)$/;"	m
<C-S-Tab>	init.vim	/^nnoremap <C-S-Tab> gT$/;"	m
<C-S>	plugged/vim-surround/plugin/surround.vim	/^      imap    <C-S> <Plug>Isurround$/;"	m
<C-Tab>	init.vim	/^nnoremap <C-Tab> gt$/;"	m
<C-X>	plugged/vim-speeddating/plugin/speeddating.vim	/^  nmap  <C-X>     <Plug>SpeedDatingDown$/;"	m
<C-X>	plugged/vim-speeddating/plugin/speeddating.vim	/^  xmap  <C-X>     <Plug>SpeedDatingDown$/;"	m
<C-]>	init.vim	/^            nmap <buffer> <silent> <C-]> <Plug>(lcn-definition)$/;"	m
<C-h>	init.vim	/^nnoremap <C-h> <C-w>h$/;"	m
<C-j>	init.vim	/^nnoremap <C-j> <C-w>j$/;"	m
<C-k>	init.vim	/^nnoremap <C-k> <C-w>k$/;"	m
<C-l>	init.vim	/^nnoremap <C-l> <C-w>l$/;"	m
<C-q>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-q> <NOP>$/;"	m
<C-v>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <C-v> <NOP>$/;"	m
<CR>	ftplugin/lua.vim	/^nnoremap <buffer> <CR> :!lua %<CR>$/;"	m
<CR>	ftplugin/todo.vim	/^nnoremap <buffer> <CR> :silent! call CheckUncheck()<CR>0$/;"	m
<CR>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <CR> :call ale#preview#OpenSelection()<CR>$/;"	m
<F2>	init.vim	/^            nmap <buffer> <silent> <F2> <Plug>(lcn-rename)$/;"	m
<Leader>;	ftplugin/vim.vim	/^nnoremap <Leader>; :exe getline('.')<CR>$/;"	m
<Leader><CR>	ftplugin/arduino.vim	/^nnoremap <buffer> <Leader><CR> :silent !open %<CR>$/;"	m
<Leader><CR>	ftplugin/lua.vim	/^nnoremap <buffer> <Leader><CR> :w<CR>:call deletebufline(bufadd("LOVE output"), 1, "$")<CR>$/;"	m
<Leader><CR>	ftplugin/markdown.vim	/^nnoremap <Leader><CR> :VimRToggleTools<CR>$/;"	m
<Leader>m	init.vim	/^nnoremap <Leader>m :let $VIM_CURRENT_DIR=expand('%:p:h')<CR>$/;"	m
<Leader>t	init.vim	/^nnoremap <Leader>t :tab sp<CR>$/;"	m
<Plug>(-fzf-complete-finish)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-finish) <c-o>l$/;"	m
<Plug>(-fzf-complete-finish)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <silent> <Plug>(-fzf-complete-finish) a$/;"	m
<Plug>(-fzf-complete-trigger)	plugged/fzf.vim/autoload/fzf/vim.vim	/^inoremap <silent> <Plug>(-fzf-complete-trigger) <c-o>:call <sid>complete_trigger()<cr>$/;"	m
<Plug>(RepeatDot)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatDot)      :<C-U>if !repeat#run(v:count)<Bar>echoerr repeat#errmsg/;"	m
<Plug>(RepeatRedo)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatRedo)     :<C-U>call repeat#wrap("\\<Lt>C-R>",v:count)<CR>$/;"	m
<Plug>(RepeatUndo)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndo)     :<C-U>call repeat#wrap('u',v:count)<CR>$/;"	m
<Plug>(RepeatUndoLine)	plugged/vim-repeat/autoload/repeat.vim	/^nnoremap <silent> <Plug>(RepeatUndoLine) :<C-U>call repeat#wrap('U',v:count)<CR>$/;"	m
<Plug>(SneakStreak)	plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>(SneakStreak)         <Plug>SneakLabel_s$/;"	m
<Plug>(SneakStreak)	plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>(SneakStreak)         <Plug>SneakLabel_s$/;"	m
<Plug>(SneakStreak)	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>(SneakStreak)         <Plug>SneakLabel_s$/;"	m
<Plug>(SneakStreakBackward)	plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>(SneakStreakBackward) <Plug>SneakLabel_S$/;"	m
<Plug>(SneakStreakBackward)	plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>(SneakStreakBackward) <Plug>SneakLabel_S$/;"	m
<Plug>(SneakStreakBackward)	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>(SneakStreakBackward) <Plug>SneakLabel_S$/;"	m
<Plug>(abolish-coerce)	plugged/vim-abolish/plugin/abolish.vim	/^nnoremap <expr> <Plug>(abolish-coerce) <SID>coerce(nr2char(getchar()))$/;"	m
<Plug>(abolish-coerce)	plugged/vim-abolish/plugin/abolish.vim	/^vnoremap <expr> <Plug>(abolish-coerce) <SID>coerce(nr2char(getchar()))$/;"	m
<Plug>(ale_code_action)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_code_action) :ALECodeAction<Return>$/;"	m
<Plug>(ale_complete)	plugged/ale/plugin/ale.vim	/^inoremap <silent> <Plug>(ale_complete) <C-\\><C-O>:ALEComplete<Return>$/;"	m
<Plug>(ale_detail)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_detail) :ALEDetail<Return>$/;"	m
<Plug>(ale_disable)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable) :ALEDisable<Return>$/;"	m
<Plug>(ale_disable_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_disable_buffer) :ALEDisableBuffer<Return>$/;"	m
<Plug>(ale_documentation)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_documentation) :ALEDocumentation<Return>$/;"	m
<Plug>(ale_enable)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable) :ALEEnable<Return>$/;"	m
<Plug>(ale_enable_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_enable_buffer) :ALEEnableBuffer<Return>$/;"	m
<Plug>(ale_find_references)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_find_references) :ALEFindReferences<Return>$/;"	m
<Plug>(ale_first)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_first) :ALEFirst<Return>$/;"	m
<Plug>(ale_fix)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_fix) :ALEFix<Return>$/;"	m
<Plug>(ale_go_to_definition)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition) :ALEGoToDefinition<Return>$/;"	m
<Plug>(ale_go_to_definition_in_split)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_split) :ALEGoToDefinition -split<Return>$/;"	m
<Plug>(ale_go_to_definition_in_tab)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_tab) :ALEGoToDefinition -tab<Return>$/;"	m
<Plug>(ale_go_to_definition_in_vsplit)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_definition_in_vsplit) :ALEGoToDefinition -vsplit<Return>$/;"	m
<Plug>(ale_go_to_type_definition)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition) :ALEGoToTypeDefinition<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_split)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_split) :ALEGoToTypeDefinition -split<Retur/;"	m
<Plug>(ale_go_to_type_definition_in_tab)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_tab) :ALEGoToTypeDefinition -tab<Return>$/;"	m
<Plug>(ale_go_to_type_definition_in_vsplit)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_go_to_type_definition_in_vsplit) :ALEGoToTypeDefinitionIn -vsplit<R/;"	m
<Plug>(ale_hover)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_hover) :ALEHover<Return>$/;"	m
<Plug>(ale_import)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_import) :ALEImport<Return>$/;"	m
<Plug>(ale_last)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_last) :ALELast<Return>$/;"	m
<Plug>(ale_lint)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_lint) :ALELint<Return>$/;"	m
<Plug>(ale_next)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next) :ALENext<Return>$/;"	m
<Plug>(ale_next_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_error) :ALENext -error<Return>$/;"	m
<Plug>(ale_next_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_warning) :ALENext -warning<Return>$/;"	m
<Plug>(ale_next_wrap)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap) :ALENextWrap<Return>$/;"	m
<Plug>(ale_next_wrap_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_error) :ALENext -wrap -error<Return>$/;"	m
<Plug>(ale_next_wrap_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_next_wrap_warning) :ALENext -wrap -warning<Return>$/;"	m
<Plug>(ale_previous)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous) :ALEPrevious<Return>$/;"	m
<Plug>(ale_previous_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_error) :ALEPrevious -error<Return>$/;"	m
<Plug>(ale_previous_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_warning) :ALEPrevious -warning<Return>$/;"	m
<Plug>(ale_previous_wrap)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap) :ALEPreviousWrap<Return>$/;"	m
<Plug>(ale_previous_wrap_error)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_error) :ALEPrevious -wrap -error<Return>$/;"	m
<Plug>(ale_previous_wrap_warning)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_previous_wrap_warning) :ALEPrevious -wrap -warning<Return>$/;"	m
<Plug>(ale_rename)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_rename) :ALERename<Return>$/;"	m
<Plug>(ale_repeat_selection)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_repeat_selection) :ALERepeatSelection<Return>$/;"	m
<Plug>(ale_reset)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset) :ALEReset<Return>$/;"	m
<Plug>(ale_reset_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_reset_buffer) :ALEResetBuffer<Return>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^cnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o><C-p>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^nnoremap <silent> <Plug>(ale_show_completion_menu) :call ale#completion#RestoreCompletionOptions/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^onoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_show_completion_menu)	plugged/ale/autoload/ale/completion.vim	/^vnoremap <silent> <Plug>(ale_show_completion_menu) <Nop>$/;"	m
<Plug>(ale_toggle)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle) :ALEToggle<Return>$/;"	m
<Plug>(ale_toggle_buffer)	plugged/ale/plugin/ale.vim	/^nnoremap <silent> <Plug>(ale_toggle_buffer) :ALEToggleBuffer<Return>$/;"	m
<Plug>(completion_confirm_completion)	plugged/completion-nvim/plugin/completion.vim	/^inoremap <silent> <Plug>(completion_confirm_completion)$/;"	m
<Plug>(completion_next_source)	plugged/completion-nvim/plugin/completion.vim	/^inoremap <silent> <Plug>(completion_next_source)$/;"	m
<Plug>(completion_prev_source)	plugged/completion-nvim/plugin/completion.vim	/^inoremap <silent> <Plug>(completion_prev_source)$/;"	m
<Plug>(completion_smart_s_tab)	plugged/completion-nvim/plugin/completion.vim	/^inoremap <silent> <Plug>(completion_smart_s_tab)$/;"	m
<Plug>(completion_smart_tab)	plugged/completion-nvim/plugin/completion.vim	/^inoremap <silent> <Plug>(completion_smart_tab)$/;"	m
<Plug>(completion_trigger)	plugged/completion-nvim/plugin/completion.vim	/^inoremap <silent> <Plug>(completion_trigger)$/;"	m
<Plug>(dirvish_K)	plugged/vim-dirvish/autoload/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info([getline('.')],!!v:count)<CR>$/;"	m
<Plug>(dirvish_K)	plugged/vim-dirvish/autoload/dirvish.vim	/^xnoremap <silent> <Plug>(dirvish_K) :<C-U>call <SID>info(getline("'<", "'>"),!!v:count)<CR>$/;"	m
<Plug>(dirvish_arg)	plugged/vim-dirvish/autoload/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args([getline('.')])<CR>$/;"	m
<Plug>(dirvish_arg)	plugged/vim-dirvish/autoload/dirvish.vim	/^xnoremap <silent> <Plug>(dirvish_arg) :<C-U>call <SID>set_args(getline("'<", "'>"))<CR>$/;"	m
<Plug>(dirvish_quit)	plugged/vim-dirvish/autoload/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_quit) :<C-U>call <SID>buf_close()<CR>$/;"	m
<Plug>(dirvish_split_up)	plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> <Plug>(dirvish_split_up) :<C-U>exe 'split +Dirvish\\ %:h'.repeat(':h',/;"	m
<Plug>(dirvish_split_up)	plugged/vim-dirvish/plugin/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_split_up) :<C-U>exe 'split +Dirvish\\ %:p'.repeat(':h',v:count1/;"	m
<Plug>(dirvish_up)	plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> <Plug>(dirvish_up) :<C-U>exe "Dirvish %:h".repeat(":h",v:count1)<CR>$/;"	m
<Plug>(dirvish_up)	plugged/vim-dirvish/plugin/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_up) :<C-U>exe 'Dirvish %:p'.repeat(':h',v:count1)<CR>$/;"	m
<Plug>(dirvish_vsplit_up)	plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> <Plug>(dirvish_vsplit_up) :<C-U>exe 'vsplit +Dirvish\\ %:h'.repeat(':h/;"	m
<Plug>(dirvish_vsplit_up)	plugged/vim-dirvish/plugin/dirvish.vim	/^nnoremap <silent> <Plug>(dirvish_vsplit_up) :<C-U>exe 'vsplit +Dirvish\\ %:p'.repeat(':h',v:coun/;"	m
<Plug>(fzf-insert)	plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-insert) i$/;"	m
<Plug>(fzf-normal)	plugged/fzf/plugin/fzf.vim	/^nnoremap <silent> <Plug>(fzf-normal) <Nop>$/;"	m
<Plug>CSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>CSurround  :<C-U>call <SID>changesurround(1)<CR>$/;"	m
<Plug>ChangeCommentary	plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <silent> <Plug>ChangeCommentary c:<C-U>call <SID>textobject(1)<CR>$/;"	m
<Plug>Commentary	plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>Commentary	plugged/vim-commentary/plugin/commentary.vim	/^onoremap <silent> <Plug>Commentary        :<C-U>call <SID>textobject(get(v:, 'operator', '') ==#/;"	m
<Plug>Commentary	plugged/vim-commentary/plugin/commentary.vim	/^xnoremap <expr>   <Plug>Commentary     <SID>go()$/;"	m
<Plug>CommentaryLine	plugged/vim-commentary/plugin/commentary.vim	/^nnoremap <expr>   <Plug>CommentaryLine <SID>go() . '_'$/;"	m
<Plug>CommentaryUndo	plugged/vim-commentary/plugin/commentary.vim	/^nmap <silent> <Plug>CommentaryUndo :echoerr "Change your <Plug>CommentaryUndo map to <Plug>Comme/;"	m
<Plug>Csurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>ISurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugged/vim-surround/plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>SneakBackward	plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakBackward  <Plug>Sneak_S$/;"	m
<Plug>SneakForward	plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakForward   <Plug>Sneak_s$/;"	m
<Plug>SneakLabel_S	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>SneakLabel_S :<c-u>call sneak#wrap('', 2, 1, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_S	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>SneakLabel_S :<c-u>call sneak#wrap(v:operator, 2, 1, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_S	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>SneakLabel_S :<c-u>call sneak#wrap(visualmode(), 2, 1, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_s	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>SneakLabel_s :<c-u>call sneak#wrap('', 2, 0, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_s	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>SneakLabel_s :<c-u>call sneak#wrap(v:operator, 2, 0, 2, 2)<cr>$/;"	m
<Plug>SneakLabel_s	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>SneakLabel_s :<c-u>call sneak#wrap(visualmode(), 2, 0, 2, 2)<cr>$/;"	m
<Plug>SneakNext	plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakNext     <Plug>Sneak_;$/;"	m
<Plug>SneakNext	plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>SneakNext     <Plug>Sneak_;$/;"	m
<Plug>SneakNext	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>SneakNext     <Plug>Sneak_;$/;"	m
<Plug>SneakPrevious	plugged/vim-sneak/plugin/sneak.vim	/^nmap <Plug>SneakPrevious <Plug>Sneak_,$/;"	m
<Plug>SneakPrevious	plugged/vim-sneak/plugin/sneak.vim	/^omap <Plug>SneakPrevious <Plug>Sneak_,$/;"	m
<Plug>SneakPrevious	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>SneakPrevious <Plug>Sneak_,$/;"	m
<Plug>SneakRepeat	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>SneakRepeat :<c-u>call sneak#wrap(v:operator, sneak#util#getc(), sneak#u/;"	m
<Plug>Sneak_,	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_, :<c-u>call <SID>rpt('', 1)<cr>$/;"	m
<Plug>Sneak_,	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_, :<c-u>call <SID>rpt(v:operator, 1)<cr>$/;"	m
<Plug>Sneak_,	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_, :<c-u>call <SID>rpt(visualmode(), 1)<cr>$/;"	m
<Plug>Sneak_;	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_; :<c-u>call <SID>rpt('', 0)<cr>$/;"	m
<Plug>Sneak_;	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_; :<c-u>call <SID>rpt(v:operator, 0)<cr>$/;"	m
<Plug>Sneak_;	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_; :<c-u>call <SID>rpt(visualmode(), 0)<cr>$/;"	m
<Plug>Sneak_F	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_F :<c-u>call sneak#wrap('', 1, 1, 1, 0)<cr>$/;"	m
<Plug>Sneak_F	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_F :<c-u>call sneak#wrap(v:operator, 1, 1, 1, 0)<cr>$/;"	m
<Plug>Sneak_F	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_F :<c-u>call sneak#wrap(visualmode(), 1, 1, 1, 0)<cr>$/;"	m
<Plug>Sneak_S	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_S :<c-u>call sneak#wrap('', 2, 1, 2, 1)<cr>$/;"	m
<Plug>Sneak_S	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_S :<c-u>call sneak#wrap(v:operator, 2, 1, 2, 1)<cr>$/;"	m
<Plug>Sneak_S	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_S :<c-u>call sneak#wrap(visualmode(), 2, 1, 2, 1)<cr>$/;"	m
<Plug>Sneak_T	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_T :<c-u>call sneak#wrap('', 1, 1, 0, 0)<cr>$/;"	m
<Plug>Sneak_T	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_T :<c-u>call sneak#wrap(v:operator, 1, 1, 0, 0)<cr>$/;"	m
<Plug>Sneak_T	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_T :<c-u>call sneak#wrap(visualmode(), 1, 1, 0, 0)<cr>$/;"	m
<Plug>Sneak_f	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_f :<c-u>call sneak#wrap('', 1, 0, 1, 0)<cr>$/;"	m
<Plug>Sneak_f	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_f :<c-u>call sneak#wrap(v:operator, 1, 0, 1, 0)<cr>$/;"	m
<Plug>Sneak_f	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_f :<c-u>call sneak#wrap(visualmode(), 1, 0, 1, 0)<cr>$/;"	m
<Plug>Sneak_s	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_s :<c-u>call sneak#wrap('', 2, 0, 2, 1)<cr>$/;"	m
<Plug>Sneak_s	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_s :<c-u>call sneak#wrap(v:operator, 2, 0, 2, 1)<cr>$/;"	m
<Plug>Sneak_s	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_s :<c-u>call sneak#wrap(visualmode(), 2, 0, 2, 1)<cr>$/;"	m
<Plug>Sneak_t	plugged/vim-sneak/plugin/sneak.vim	/^nnoremap <silent> <Plug>Sneak_t :<c-u>call sneak#wrap('', 1, 0, 0, 0)<cr>$/;"	m
<Plug>Sneak_t	plugged/vim-sneak/plugin/sneak.vim	/^onoremap <silent> <Plug>Sneak_t :<c-u>call sneak#wrap(v:operator, 1, 0, 0, 0)<cr>$/;"	m
<Plug>Sneak_t	plugged/vim-sneak/plugin/sneak.vim	/^xnoremap <silent> <Plug>Sneak_t :<c-u>call sneak#wrap(visualmode(), 1, 0, 0, 0)<cr>$/;"	m
<Plug>SpeedDatingDown	plugged/vim-speeddating/plugin/speeddating.vim	/^nnoremap <silent> <Plug>SpeedDatingDown :<C-U>call speeddating#increment(-v:count1)<CR>$/;"	m
<Plug>SpeedDatingDown	plugged/vim-speeddating/plugin/speeddating.vim	/^xnoremap <silent> <Plug>SpeedDatingDown :<C-U>call speeddating#incrementvisual(-v:count1)<CR>$/;"	m
<Plug>SpeedDatingNowLocal	plugged/vim-speeddating/plugin/speeddating.vim	/^nnoremap <silent> <Plug>SpeedDatingNowLocal :<C-U>call speeddating#timestamp(0,v:count)<CR>$/;"	m
<Plug>SpeedDatingNowUTC	plugged/vim-speeddating/plugin/speeddating.vim	/^nnoremap <silent> <Plug>SpeedDatingNowUTC   :<C-U>call speeddating#timestamp(1,v:count)<CR>$/;"	m
<Plug>SpeedDatingUp	plugged/vim-speeddating/plugin/speeddating.vim	/^nnoremap <silent> <Plug>SpeedDatingUp   :<C-U>call speeddating#increment(v:count1)<CR>$/;"	m
<Plug>SpeedDatingUp	plugged/vim-speeddating/plugin/speeddating.vim	/^xnoremap <silent> <Plug>SpeedDatingUp   :<C-U>call speeddating#incrementvisual(v:count1)<CR>$/;"	m
<Plug>SuperTabBackward	plugged/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabBackward <c-r>=SuperTab('p')<cr>$/;"	m
<Plug>SuperTabForward	plugged/supertab/plugin/supertab.vim	/^  imap <script> <Plug>SuperTabForward <c-r>=SuperTab('n')<cr>$/;"	m
<Plug>SurroundRepeat	plugged/vim-surround/plugin/surround.vim	/^nnoremap <silent> <Plug>SurroundRepeat .$/;"	m
<Plug>VSneakBackward	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakBackward <Plug>Sneak_S$/;"	m
<Plug>VSneakForward	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakForward  <Plug>Sneak_s$/;"	m
<Plug>VSneakNext	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakNext     <Plug>Sneak_;$/;"	m
<Plug>VSneakPrevious	plugged/vim-sneak/plugin/sneak.vim	/^xmap <Plug>VSneakPrevious <Plug>Sneak_,$/;"	m
<Plug>VSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 /;"	m
<Plug>VgSurround	plugged/vim-surround/plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 /;"	m
<Plug>YSsurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSsurround <SID>opfunc2('setup').'_'$/;"	m
<Plug>YSurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>YSurround  <SID>opfunc2('setup')$/;"	m
<Plug>Yssurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Yssurround '^'.v:count1.<SID>opfunc('setup').'g_'$/;"	m
<Plug>Ysurround	plugged/vim-surround/plugin/surround.vim	/^nnoremap <expr>   <Plug>Ysurround  <SID>opfunc('setup')$/;"	m
<Plug>delimitMateBS	plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <silent> <Plug>delimitMateBS <C-R>=delimitMate#BS()<CR>$/;"	m
<Plug>delimitMateCR	plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><silent> <Plug>delimitMateCR <SID>TriggerAbb()."\\<C-R>=delimitMate#ExpandRetur/;"	m
<Plug>delimitMateJumpMany	plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><buffer> <Plug>delimitMateJumpMany <SID>TriggerAbb()."\\<C-R>=delimitMate#JumpM/;"	m
<Plug>delimitMateS-BS	plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <silent> <expr> <Plug>delimitMateS-BS delimitMate#WithinEmptyPair() ? "\\<Del>" : "\\/;"	m
<Plug>delimitMateS-Tab	plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><silent> <Plug>delimitMateS-Tab <SID>TriggerAbb()."\\<C-R>=delimitMate#JumpAny(/;"	m
<Plug>delimitMateSpace	plugged/delimitMate/plugin/delimitMate.vim	/^  inoremap <expr><silent> <Plug>delimitMateSpace <SID>TriggerAbb()."\\<C-R>=delimitMate#ExpandSp/;"	m
<S-v>	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> <S-v> <NOP>$/;"	m
<SID>:	plugged/vim-fugitive/autoload/fugitive.vim	/^nnoremap <SID>: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<bs>	plugged/supertab/plugin/supertab.vim	/^    imap <buffer> <bs> <c-r>=<SID>CompletionReset("\\<lt>bs>")<cr>$/;"	m
<c-]>	plugged/supertab/plugin/supertab.vim	/^    nmap <silent> <buffer> <c-]> :call <SID>SetCompletionType()<cr>$/;"	m
<c-h>	plugged/supertab/plugin/supertab.vim	/^    imap <buffer> <c-h> <c-r>=<SID>CompletionReset("\\<lt>c-h>")<cr>$/;"	m
<c-x>	plugged/supertab/plugin/supertab.vim	/^  inoremap <silent> <c-x> <c-r>=<SID>ManualCompletionEnter()<cr>$/;"	m
<cr>	plugged/supertab/plugin/supertab.vim	/^      inoremap <silent> <cr> <c-r>=<SID>SelectCompletion(1)<cr>$/;"	m
<cr>	plugged/supertab/plugin/supertab.vim	/^    nmap <silent> <buffer> <cr> :call <SID>SetCompletionType()<cr>$/;"	m
<cr>	plugged/vim-slash/plugin/slash.vim	/^cmap <expr> <cr> <sid>wrap("\\<cr>")$/;"	m
<esc>	plugged/vim-sneak/plugin/sneak.vim	/^    nmap <expr> <silent> <esc> sneak#cancel() . "\\<esc>"$/;"	m
<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)	plugged/fzf/README.md	/^<img src="https:\/\/raw.githubusercontent.com\/junegunn\/i\/master\/fzf.png" height="170" alt="f/;"	c
<plug>(-fzf-/)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-\/) \/$/;"	m
<plug>(-fzf-:)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-:) :$/;"	m
<plug>(-fzf-vim-do)	plugged/fzf.vim/autoload/fzf/vim.vim	/^nnoremap <plug>(-fzf-vim-do) :execute g:__fzf_command<cr>$/;"	m
<plug>(abolish-coerce-word)	plugged/vim-abolish/plugin/abolish.vim	/^nnoremap <expr> <plug>(abolish-coerce-word) <SID>coerce(nr2char(getchar())).'iw'$/;"	m
<plug>(fzf-complete-buffer-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-buffer-line) fzf#vim#complete#buffer_line()$/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-file)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-file)      fzf#vim#complete#path('dir \/s\/b\/a:-d')$/;"	m
<plug>(fzf-complete-file-ag)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-file-ag)     fzf#vim#complete#path('ag -l -g ""')$/;"	m
<plug>(fzf-complete-line)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-line)        fzf#vim#complete#line()$/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path("find . -path '*\/\\.*' -/;"	m
<plug>(fzf-complete-path)	plugged/fzf.vim/plugin/fzf.vim	/^  inoremap <expr> <plug>(fzf-complete-path)      fzf#vim#complete#path('dir \/s\/b')$/;"	m
<plug>(fzf-complete-word)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <expr> <plug>(fzf-complete-word)        fzf#vim#complete#word()$/;"	m
<plug>(fzf-maps-i)	plugged/fzf.vim/plugin/fzf.vim	/^inoremap <silent> <plug>(fzf-maps-i) <c-o>:call fzf#vim#maps('i', 0)<cr>$/;"	m
<plug>(fzf-maps-n)	plugged/fzf.vim/plugin/fzf.vim	/^nnoremap <silent> <plug>(fzf-maps-n) :<c-u>call fzf#vim#maps('n', 0)<cr>$/;"	m
<plug>(fzf-maps-o)	plugged/fzf.vim/plugin/fzf.vim	/^onoremap <silent> <plug>(fzf-maps-o) <c-c>:<c-u>call fzf#vim#maps('o', 0)<cr>$/;"	m
<plug>(fzf-maps-x)	plugged/fzf.vim/plugin/fzf.vim	/^xnoremap <silent> <plug>(fzf-maps-x) :<c-u>call fzf#vim#maps('x', 0)<cr>$/;"	m
<plug>(slash-cr)	plugged/vim-slash/plugin/slash.vim	/^cnoremap        <plug>(slash-cr)      <cr>$/;"	m
<plug>(slash-nop)	plugged/vim-slash/plugin/slash.vim	/^noremap!        <plug>(slash-nop)     <nop>$/;"	m
<plug>(slash-prev)	plugged/vim-slash/plugin/slash.vim	/^inoremap        <plug>(slash-prev)    <nop>$/;"	m
<plug>(slash-prev)	plugged/vim-slash/plugin/slash.vim	/^noremap  <expr> <plug>(slash-prev)    <sid>prev()$/;"	m
<plug>(slash-trailer)	plugged/vim-slash/plugin/slash.vim	/^imap     <expr> <plug>(slash-trailer) <sid>trailer_on_leave()$/;"	m
<plug>(slash-trailer)	plugged/vim-slash/plugin/slash.vim	/^map      <expr> <plug>(slash-trailer) <sid>trailer()$/;"	m
?	plugged/vim-dirvish/ftplugin/dirvish.vim	/^  nnoremap <buffer> ? ?\\ze[^\/]*[\/]\\=$<Home>$/;"	m
?	plugged/vim-dirvish/ftplugin/dirvish.vim	/^  nnoremap <buffer> ? ?\\ze[^\\\/]*[\\\/]\\=$<Home>$/;"	m
A	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> A <NOP>$/;"	m
ALE Supported Languages and Tools	plugged/ale/supported-tools.md	/^# ALE Supported Languages and Tools$/;"	c
ALEBufferFixGroup	plugged/ale/autoload/ale/fix.vim	/^augroup ALEBufferFixGroup$/;"	a
ALECleanupGroup	plugged/ale/plugin/ale.vim	/^augroup ALECleanupGroup$/;"	a
ALECodeAction	plugged/ale/plugin/ale.vim	/^command! -bar -range ALECodeAction :call ale#codefix#Execute(<range>)$/;"	c
ALECodeActionsGroup	plugged/ale/autoload/ale/code_action.vim	/^    augroup ALECodeActionsGroup$/;"	a
ALEComplete	plugged/ale/plugin/ale.vim	/^command! -bar ALEComplete :call ale#completion#GetCompletions('ale-manual')$/;"	c
ALECompletionActions	plugged/ale/autoload/ale/completion.vim	/^augroup ALECompletionActions$/;"	a
ALECompletionGroup	plugged/ale/autoload/ale/completion.vim	/^    augroup ALECompletionGroup$/;"	a
ALEDetail	plugged/ale/plugin/ale.vim	/^command! -bar ALEDetail :call ale#cursor#ShowCursorDetail()$/;"	c
ALEDisable	plugged/ale/plugin/ale.vim	/^command! -bar ALEDisable :call ale#toggle#Disable()$/;"	c
ALEDisableBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEDisableBuffer :call ale#toggle#DisableBuffer(bufnr(''))$/;"	c
ALEDocumentation	plugged/ale/plugin/ale.vim	/^command! -bar ALEDocumentation :call ale#hover#ShowDocumentationAtCursor()$/;"	c
ALEEnable	plugged/ale/plugin/ale.vim	/^command! -bar ALEEnable :call ale#toggle#Enable()$/;"	c
ALEEnableBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEEnableBuffer :call ale#toggle#EnableBuffer(bufnr(''))$/;"	c
ALEEvents	plugged/ale/autoload/ale/events.vim	/^    augroup ALEEvents$/;"	a
ALEFindReferences	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEFindReferences :call ale#references#Find(<f-args>)$/;"	c
ALEFirst	plugged/ale/plugin/ale.vim	/^command! -bar ALEFirst :call ale#loclist_jumping#JumpToIndex(0)$/;"	c
ALEFix	plugged/ale/plugin/ale.vim	/^command! -bar -bang -nargs=* -complete=customlist,ale#fix#registry#CompleteFixers ALEFix :call a/;"	c
ALEFixSuggest	plugged/ale/plugin/ale.vim	/^command! -bar ALEFixSuggest :call ale#fix#registry#Suggest(&filetype)$/;"	c
ALEGoToDefinition	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEGoToDefinition :call ale#definition#GoToCommandHandler('', <f-args>)$/;"	c
ALEGoToTypeDefinition	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEGoToTypeDefinition :call ale#definition#GoToCommandHandler('type', <f-/;"	c
ALEHighlightBufferGroup	plugged/ale/autoload/ale/highlight.vim	/^augroup ALEHighlightBufferGroup$/;"	a
ALEHover	plugged/ale/plugin/ale.vim	/^command! -bar ALEHover :call ale#hover#ShowAtCursor()$/;"	c
ALEImport	plugged/ale/plugin/ale.vim	/^command! -bar ALEImport :call ale#completion#Import()$/;"	c
ALEInfo	plugged/ale/plugin/ale.vim	/^command! -bar ALEInfo :call ale#debugging#Info()$/;"	c
ALEInfoToClipboard	plugged/ale/plugin/ale.vim	/^command! -bar ALEInfoToClipboard :call ale#debugging#InfoToClipboard()$/;"	c
ALEInfoToFile	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=1 ALEInfoToFile :call ale#debugging#InfoToFile(<f-args>)$/;"	c
ALELast	plugged/ale/plugin/ale.vim	/^command! -bar ALELast :call ale#loclist_jumping#JumpToIndex(-1)$/;"	c
ALELint	plugged/ale/plugin/ale.vim	/^command! -bar ALELint :call ale#Queue(0, 'lint_file')$/;"	c
ALELintStop	plugged/ale/plugin/ale.vim	/^command! -bar ALELintStop :call ale#engine#Stop(bufnr(''))$/;"	c
ALENext	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALENext$/;"	c
ALENextWrap	plugged/ale/plugin/ale.vim	/^command! -bar ALENextWrap :call ale#loclist_jumping#Jump('after', 1)$/;"	c
ALEOrganizeImports	plugged/ale/plugin/ale.vim	/^command! -bar ALEOrganizeImports :call ale#organize_imports#Execute()$/;"	c
ALEPrevious	plugged/ale/plugin/ale.vim	/^command! -bar -nargs=* ALEPrevious$/;"	c
ALEPreviousWrap	plugged/ale/plugin/ale.vim	/^command! -bar ALEPreviousWrap :call ale#loclist_jumping#Jump('before', 1)$/;"	c
ALERename	plugged/ale/plugin/ale.vim	/^command! -bar -bang ALERename :call ale#rename#Execute()$/;"	c
ALERepeatSelection	plugged/ale/plugin/ale.vim	/^command! -bar ALERepeatSelection :call ale#preview#RepeatSelection()$/;"	c
ALEReset	plugged/ale/plugin/ale.vim	/^command! -bar ALEReset :call ale#toggle#Reset()$/;"	c
ALEResetBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEResetBuffer :call ale#toggle#ResetBuffer(bufnr(''))$/;"	c
ALEStopAllLSPs	plugged/ale/plugin/ale.vim	/^command! -bar ALEStopAllLSPs :call ale#lsp#reset#StopAllLSPs()$/;"	c
ALESymbolSearch	plugged/ale/plugin/ale.vim	/^command! -nargs=1 ALESymbolSearch :call ale#symbol#Search(<q-args>)$/;"	c
ALEToggle	plugged/ale/plugin/ale.vim	/^command! -bar ALEToggle :call ale#toggle#Toggle()$/;"	c
ALEToggleBuffer	plugged/ale/plugin/ale.vim	/^command! -bar ALEToggleBuffer :call ale#toggle#ToggleBuffer(bufnr(''))$/;"	c
AUTHOR	plugged/fzf/man/man1/fzf.1	/^.SH AUTHOR$/;"	s	title:fzf
Abbreviation	plugged/vim-abolish/README.markdown	/^## Abbreviation$/;"	s	chapter:abolish.vim
Abolish	plugged/vim-abolish/plugin/abolish.vim	/^  let Abolish = {}$/;"	v
Abolish	plugged/vim-abolish/plugin/abolish.vim	/^command! -nargs=+ -bang -bar -range=0 -complete=custom,s:Complete Abolish$/;"	c
Abolished	plugged/vim-abolish/plugin/abolish.vim	/^function! Abolished()$/;"	f
Actual behaviour	plugged/nvim-lspconfig/.github/ISSUE_TEMPLATE/bug_report.md	/^### Actual behaviour$/;"	S
Add	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Add(chunk *Chunk, key string, list []Result) {$/;"	f	struct:fzf.ChunkCache
Added `--ansi` option (#150)	plugged/fzf/CHANGELOG.md	/^#### Added `--ansi` option (#150)$/;"	t	subsection:CHANGELOG""0.9.5""New features
Added `--expect` option (#163)	plugged/fzf/CHANGELOG.md	/^#### Added `--expect` option (#163)$/;"	t	subsection:CHANGELOG""0.9.6""New features
Added `--tac` option to reverse the order of the input.	plugged/fzf/CHANGELOG.md	/^#### Added `--tac` option to reverse the order of the input.$/;"	t	subsection:CHANGELOG""0.9.4""New features
Advanced configuration	plugged/lightline.vim/README.md	/^## Advanced configuration$/;"	s	chapter:lightline.vim
Advanced customization	plugged/fzf.vim/README.md	/^### Advanced customization$/;"	S	section:fzf :heart: vim""Customization
Advanced fzf examples	plugged/fzf/ADVANCED.md	/^Advanced fzf examples$/;"	c
Advanced topics	plugged/fzf/README.md	/^Advanced topics$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Advanced usage	plugged/nvim-lspconfig/ADVANCED_README.md	/^## Advanced usage$/;"	s
Algo	plugged/fzf/src/algo/algo.go	/^type Algo func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []ru/;"	t	package:algo	typeref:typename:func(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern []rune, withPos bool, slab *util.Slab) (Result, *[]int)
Alt	plugged/fzf/src/tui/tui.go	/^	Alt$/;"	c	package:tui
AltBS	plugged/fzf/src/tui/tui.go	/^	AltBS$/;"	c	package:tui
AltDown	plugged/fzf/src/tui/tui.go	/^	AltDown$/;"	c	package:tui
AltKey	plugged/fzf/src/tui/tui.go	/^func AltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
AltLeft	plugged/fzf/src/tui/tui.go	/^	AltLeft$/;"	c	package:tui
AltRight	plugged/fzf/src/tui/tui.go	/^	AltRight$/;"	c	package:tui
AltSDown	plugged/fzf/src/tui/tui.go	/^	AltSDown$/;"	c	package:tui
AltSLeft	plugged/fzf/src/tui/tui.go	/^	AltSLeft$/;"	c	package:tui
AltSRight	plugged/fzf/src/tui/tui.go	/^	AltSRight$/;"	c	package:tui
AltSUp	plugged/fzf/src/tui/tui.go	/^	AltSUp$/;"	c	package:tui
AltUp	plugged/fzf/src/tui/tui.go	/^	AltUp$/;"	c	package:tui
Ansi	plugged/fzf/src/options.go	/^	Ansi        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
As Vim plugin	plugged/fzf/README.md	/^### As Vim plugin$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
AsEvent	plugged/fzf/src/tui/tui.go	/^func (t EventType) AsEvent() Event {$/;"	f	type:tui.EventType	typeref:typename:Event
AsString	plugged/fzf/src/item.go	/^func (item *Item) AsString(stripAnsi bool) string {$/;"	f	struct:fzf.Item	typeref:typename:string
AsString	plugged/fzf/src/pattern.go	/^func (p *Pattern) AsString() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
AsUint16	plugged/fzf/src/util/util.go	/^func AsUint16(val int) uint16 {$/;"	f	package:util	typeref:typename:uint16
AssertFixer	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertFixer :call ale#assert#Fixer(<args>)$/;"	c
AssertFixerCwd	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertFixerCwd :call ale#assert#FixerCwd(<args>)$/;"	c
AssertFixerNotExecuted	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=0 AssertFixerNotExecuted :call ale#assert#FixerNotExecuted()$/;"	c
AssertLSPAddress	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLSPAddress :call ale#assert#LSPAddress(<args>)$/;"	c
AssertLSPConfig	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLSPConfig :call ale#assert#LSPConfig(<args>)$/;"	c
AssertLSPLanguage	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLSPLanguage :call ale#assert#LSPLanguage(<args>)$/;"	c
AssertLSPOptions	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLSPOptions :call ale#assert#LSPOptions(<args>)$/;"	c
AssertLSPProject	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLSPProject :call ale#assert#LSPProject(<args>)$/;"	c
AssertLinter	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLinter :call ale#assert#Linter(<args>)$/;"	c
AssertLinterCwd	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ AssertLinterCwd :call ale#assert#LinterCwd(<args>)$/;"	c
AssertLinterNotExecuted	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=0 AssertLinterNotExecuted :call ale#assert#LinterNotExecuted()$/;"	c
Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)	plugged/ale/README.md	/^# Asynchronous Lint Engine [![GitHub Build Status](https:\/\/github.com\/dense-analysis\/ale\/wo/;"	c
AtomicBool	plugged/fzf/src/util/atomicbool.go	/^type AtomicBool struct {$/;"	s	package:util
Attr	plugged/fzf/src/tui/dummy.go	/^type Attr int32$/;"	t	package:tui	typeref:typename:int32
Attr	plugged/fzf/src/tui/tcell.go	/^type Attr tcell.Style$/;"	t	package:tui	typeref:typename:tcell.Style
Attr	plugged/fzf/src/tui/tui.go	/^	Attr  Attr$/;"	m	struct:tui.ColorAttr	typeref:typename:Attr
Attr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Attr() Attr {$/;"	f	struct:tui.ColorPair	typeref:typename:Attr
AttrClear	plugged/fzf/src/tui/dummy.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrClear	plugged/fzf/src/tui/tcell.go	/^	AttrClear     = Attr(1 << 8)$/;"	c	package:tui
AttrRegular	plugged/fzf/src/tui/dummy.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrRegular	plugged/fzf/src/tui/tcell.go	/^	AttrRegular   = Attr(1 << 7)$/;"	c	package:tui
AttrUndefined	plugged/fzf/src/tui/dummy.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
AttrUndefined	plugged/fzf/src/tui/tcell.go	/^	AttrUndefined = Attr(0)$/;"	c	package:tui
Author	plugged/lightline.vim/README.md	/^## Author$/;"	s	chapter:lightline.vim
Automatic test setup	plugged/delimitMate/test/README.md	/^# Automatic test setup$/;"	c
Automatically launching language servers	plugged/nvim-lspconfig/README.md	/^## Automatically launching language servers$/;"	s	chapter:LSP overview
Available Colorschemes	plugged/lightline.vim/colorscheme.md	/^# Available Colorschemes$/;"	c
BASE	plugged/fzf/test/test_go.rb	/^BASE = File.expand_path('..', __dir__)$/;"	C
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARY32)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARY64)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM5)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM6)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM7)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYARM8)$/;"	m
BINARY	plugged/fzf/Makefile	/^	BINARY := $(BINARYPPC64LE)$/;"	m
BINARY32	plugged/fzf/Makefile	/^BINARY32       := fzf-$(GOOS)_386$/;"	m
BINARY64	plugged/fzf/Makefile	/^BINARY64       := fzf-$(GOOS)_amd64$/;"	m
BINARYARM5	plugged/fzf/Makefile	/^BINARYARM5     := fzf-$(GOOS)_arm5$/;"	m
BINARYARM6	plugged/fzf/Makefile	/^BINARYARM6     := fzf-$(GOOS)_arm6$/;"	m
BINARYARM7	plugged/fzf/Makefile	/^BINARYARM7     := fzf-$(GOOS)_arm7$/;"	m
BINARYARM8	plugged/fzf/Makefile	/^BINARYARM8     := fzf-$(GOOS)_arm8$/;"	m
BINARYPPC64LE	plugged/fzf/Makefile	/^BINARYPPC64LE  := fzf-$(GOOS)_ppc64le$/;"	m
BSpace	plugged/fzf/src/tui/tui.go	/^	BSpace$/;"	c	package:tui
BTab	plugged/fzf/src/tui/tui.go	/^	BTab$/;"	c	package:tui
BUILD_FLAGS	plugged/fzf/Makefile	/^BUILD_FLAGS    := -a -ldflags "-s -w -X main.version=$(VERSION) -X main.revision=$(REVISION)" -t/;"	m
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set BUILD_INVERTED_INDEX=1$/;"	v
BUILD_INVERTED_INDEX	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set BUILD_INVERTED_INDEX=0$/;"	v
BackwardEOF	plugged/fzf/src/tui/tui.go	/^	BackwardEOF$/;"	c	package:tui
Base	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    class Base(object):$/;"	c
Before submitting	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Before submitting$/;"	c
BenchmarkExtractColor	plugged/fzf/src/ansi_test.go	/^func BenchmarkExtractColor(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence	plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence(b *testing.B) {$/;"	f	package:fzf
BenchmarkNextAnsiEscapeSequence_Regex	plugged/fzf/src/ansi_test.go	/^func BenchmarkNextAnsiEscapeSequence_Regex(b *testing.B) {$/;"	f	package:fzf
Bg	plugged/fzf/src/tui/tui.go	/^	Bg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Bg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Bg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
Black	plugged/fzf/src/options.go	/^	Black       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Blink	plugged/fzf/src/tui/dummy.go	/^	Blink     = Attr(1 << 4)$/;"	c	package:tui
Blink	plugged/fzf/src/tui/tcell.go	/^	Blink          = Attr(tcell.AttrBlink)$/;"	c	package:tui
Blink2	plugged/fzf/src/tui/dummy.go	/^	Blink2    = Attr(1 << 5)$/;"	c	package:tui
Blinking cursor after search using Vim 8 timer	plugged/vim-slash/README.md	/^#### Blinking cursor after search using Vim 8 timer$/;"	t	section:vim-slash""Customization
Bold	plugged/fzf/src/options.go	/^	Bold        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Bold	plugged/fzf/src/tui/dummy.go	/^	Bold      = Attr(1)$/;"	c	package:tui
Bold	plugged/fzf/src/tui/tcell.go	/^	Bold      Attr = Attr(tcell.AttrBold)$/;"	c	package:tui	typeref:type:Attr
Border	plugged/fzf/src/tui/tui.go	/^	Border       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
BorderBottom	plugged/fzf/src/tui/tui.go	/^	BorderBottom$/;"	c	package:tui
BorderCharacter	plugged/fzf/src/tui/tui.go	/^type BorderCharacter int$/;"	t	package:tui	typeref:typename:int
BorderHorizontal	plugged/fzf/src/tui/tui.go	/^	BorderHorizontal$/;"	c	package:tui
BorderLeft	plugged/fzf/src/tui/tui.go	/^	BorderLeft$/;"	c	package:tui
BorderNone	plugged/fzf/src/tui/tui.go	/^	BorderNone BorderShape = iota$/;"	c	package:tui	typeref:type:BorderShape
BorderRight	plugged/fzf/src/tui/tui.go	/^	BorderRight$/;"	c	package:tui
BorderRounded	plugged/fzf/src/tui/tui.go	/^	BorderRounded$/;"	c	package:tui
BorderShape	plugged/fzf/src/options.go	/^	BorderShape tui.BorderShape$/;"	m	struct:fzf.Options	typeref:typename:tui.BorderShape
BorderShape	plugged/fzf/src/tui/tui.go	/^type BorderShape int$/;"	t	package:tui	typeref:typename:int
BorderSharp	plugged/fzf/src/tui/tui.go	/^	BorderSharp$/;"	c	package:tui
BorderStyle	plugged/fzf/src/tui/tui.go	/^type BorderStyle struct {$/;"	s	package:tui
BorderTop	plugged/fzf/src/tui/tui.go	/^	BorderTop$/;"	c	package:tui
BorderVertical	plugged/fzf/src/tui/tui.go	/^	BorderVertical$/;"	c	package:tui
Branches	plugged/fzf/ADVANCED.md	/^### Branches$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Buffer name is the directory name	plugged/vim-dirvish/README.md	/^### Buffer name is the directory name$/;"	S	section:dirvish.vim :zap:""Concepts
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.11
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.12
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.13
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.5
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.6
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.7
Bug fixes	plugged/fzf/CHANGELOG.md	/^### Bug fixes$/;"	S	section:CHANGELOG""0.9.8
Build instructions	plugged/fzf/BUILD.md	/^Build instructions$/;"	s	chapter:Building fzf
BuildPattern	plugged/fzf/src/pattern.go	/^func BuildPattern(fuzzy bool, fuzzyAlgo algo.Algo, extended bool, caseMode Case, normalize bool,/;"	f	package:fzf	typeref:typename:*Pattern
Building fzf	plugged/fzf/BUILD.md	/^Building fzf$/;"	c
Building fzf	plugged/fzf/README.md	/^Building fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Built-in commands	plugged/nvim-lspconfig/README.md	/^## Built-in commands$/;"	s	chapter:LSP overview
ByOrder	plugged/fzf/src/result.go	/^type ByOrder []Offset$/;"	t	package:fzf	typeref:typename:[]Offset
ByRelevance	plugged/fzf/src/result.go	/^type ByRelevance []Result$/;"	t	package:fzf	typeref:typename:[]Result
ByRelevanceTac	plugged/fzf/src/result.go	/^type ByRelevanceTac []Result$/;"	t	package:fzf	typeref:typename:[]Result
Byte	plugged/fzf/src/tui/tui.go	/^func (t EventType) Byte() byte {$/;"	f	type:tui.EventType	typeref:typename:byte
Bytes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Bytes() []byte {$/;"	f	struct:util.Chars	typeref:typename:[]byte
CFill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CFill(fg Color, bg Color, attr Attr, text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
CFill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CFill(fg Color, bg Color, a Attr, str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
CFill	plugged/fzf/src/tui/tui.go	/^	CFill(fg Color, bg Color, attr Attr, text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
CHANGELOG	plugged/fzf/CHANGELOG.md	/^CHANGELOG$/;"	c
COMMAND_RE	plugged/ale/test/script/block-padding-checker	/^COMMAND_RE = re.compile(r'^ *([a-zA-Z\\\\]+)')$/;"	v
COMMENT_LINE_RE	plugged/ale/test/script/block-padding-checker	/^COMMENT_LINE_RE = re.compile(r'^ *"')$/;"	v
COMPREPLY=	plugged/fzf/shell/completion.bash	/^    COMPREPLY=()$/;"	f
COMPREPLY=	plugged/fzf/shell/completion.bash	/^  COMPREPLY=()$/;"	f
CPrint	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.LightWindow
CPrint	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) CPrint(pair ColorPair, text string) {$/;"	f	struct:tui.TcellWindow
CPrint	plugged/fzf/src/tui/tui.go	/^	CPrint(color ColorPair, text string)$/;"	n	interface:tui.Window
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_ARGS=%CSCOPE_ARGS% -q$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=$/;"	v
CSCOPE_ARGS	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_ARGS=%CSCOPE_ARGS% -i %DB_FILE%.files$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set CSCOPE_EXE=%~2$/;"	v
CSCOPE_EXE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set CSCOPE_EXE=cscope$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% "%PROJECT_ROOT%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% --append "%UPDATED_SOURCE%"$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set CTAGS_ARGS=%CTAGS_ARGS% -L %TAGS_FILE%.files$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% %~2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --exclude=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_ARGS=%CTAGS_ARGS% --options=%2$/;"	v
CTAGS_ARGS	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_ARGS=$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set CTAGS_EXE=%~2$/;"	v
CTAGS_EXE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set CTAGS_EXE=ctags$/;"	v
CacheKey	plugged/fzf/src/pattern.go	/^func (p *Pattern) CacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
Can I display the plugin information at the filename component?	plugged/lightline.vim/README.md	/^### Can I display the plugin information at the filename component?$/;"	S	section:lightline.vim""Advanced configuration
Can I display the plugin name at the mode component?	plugged/lightline.vim/README.md	/^### Can I display the plugin name at the mode component?$/;"	S	section:lightline.vim""Advanced configuration
Can I hide the readonly component in other plugins buffer?	plugged/lightline.vim/README.md	/^### Can I hide the readonly component in other plugins buffer?$/;"	S	section:lightline.vim""Advanced configuration
Can I hide the readonly component in the help buffer?	plugged/lightline.vim/README.md	/^### Can I hide the readonly component in the help buffer?$/;"	S	section:lightline.vim""Advanced configuration
Can I trim the bar between the filename and modified sign?	plugged/lightline.vim/README.md	/^### Can I trim the bar between the filename and modified sign?$/;"	S	section:lightline.vim""Advanced configuration
Can I trim the file format and encoding information on narrow windows?	plugged/lightline.vim/README.md	/^### Can I trim the file format and encoding information on narrow windows?$/;"	S	section:lightline.vim""Advanced configuration
Cargo	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=+ Cargo call cargo#cmd(<q-args>)$/;"	c
Case	plugged/fzf/src/options.go	/^	Case        Case$/;"	m	struct:fzf.Options	typeref:typename:Case
Case	plugged/fzf/src/options.go	/^type Case int$/;"	t	package:fzf	typeref:typename:int
CaseIgnore	plugged/fzf/src/options.go	/^	CaseIgnore$/;"	c	package:fzf
CaseRespect	plugged/fzf/src/options.go	/^	CaseRespect$/;"	c	package:fzf
CaseSmart	plugged/fzf/src/options.go	/^	CaseSmart Case = iota$/;"	c	package:fzf	typeref:type:Case
Cbench	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cbench call cargo#bench(<q-args>)$/;"	c
Cbuild	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cbuild call cargo#build(<q-args>)$/;"	c
Ccheck	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Ccheck call cargo#check(<q-args>)$/;"	c
Cclean	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cclean call cargo#clean(<q-args>)$/;"	c
Cdoc	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cdoc call cargo#doc(<q-args>)$/;"	c
Chain Completion Support	plugged/completion-nvim/README.md	/^### Chain Completion Support$/;"	S	section:completion-nvim""Configuration
Change	plugged/fzf/src/tui/tui.go	/^	Change$/;"	c	package:tui
Changed behavior on `--no-sort`	plugged/fzf/CHANGELOG.md	/^#### Changed behavior on `--no-sort`$/;"	t	subsection:CHANGELOG""0.9.4""*Backward incompatible changes*
Changing Completion Confirm key	plugged/completion-nvim/README.md	/^### Changing Completion Confirm key$/;"	S	section:completion-nvim""Configuration
Char	plugged/fzf/src/tui/tui.go	/^	Char       rune$/;"	m	struct:tui.Event	typeref:typename:rune
Chars	plugged/fzf/src/util/chars.go	/^type Chars struct {$/;"	s	package:util
CheckUncheck	ftplugin/todo.vim	/^function! CheckUncheck()$/;"	f
Chunk	plugged/fzf/src/chunklist.go	/^type Chunk struct {$/;"	s	package:fzf
ChunkCache	plugged/fzf/src/cache.go	/^type ChunkCache struct {$/;"	s	package:fzf
ChunkList	plugged/fzf/src/chunklist.go	/^type ChunkList struct {$/;"	s	package:fzf
Cinit	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cinit call cargo#init(<q-args>)$/;"	c
Cinstall	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cinstall call cargo#install(<q-args>)$/;"	c
CleanUp	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^CleanUp() {$/;"	f
Clear	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Clear() {$/;"	f	struct:fzf.ChunkList
Clear	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Clear()            {}$/;"	f	unknown:tui.FullscreenRenderer
Clear	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Clear() {$/;"	f	struct:tui.LightRenderer
Clear	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Clear() {$/;"	f	unknown:tui.FullscreenRenderer
Clear	plugged/fzf/src/tui/tui.go	/^	Clear()$/;"	n	interface:tui.Renderer
Clear	plugged/fzf/src/util/eventbox.go	/^func (events *Events) Clear() {$/;"	f	type:util.Events
ClearOnExit	plugged/fzf/src/options.go	/^	ClearOnExit bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Close	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Close()            {}$/;"	f	unknown:tui.FullscreenRenderer
Close	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Close() {$/;"	f	struct:tui.LightRenderer
Close	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Close() {$/;"	f	struct:tui.LightWindow
Close	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Close() {$/;"	f	unknown:tui.FullscreenRenderer
Close	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Close() {$/;"	f	struct:tui.TcellWindow
Close	plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Renderer
Close	plugged/fzf/src/tui/tui.go	/^	Close()$/;"	n	interface:tui.Window
Cnew	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=+ Cnew call cargo#new(<q-args>)$/;"	c
Coercion	plugged/vim-abolish/README.markdown	/^## Coercion$/;"	s	chapter:abolish.vim
ColBorder	plugged/fzf/src/tui/tui.go	/^	ColBorder               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrent	plugged/fzf/src/tui/tui.go	/^	ColCurrent              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursor	plugged/fzf/src/tui/tui.go	/^	ColCurrentCursor        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentCursorEmpty	plugged/fzf/src/tui/tui.go	/^	ColCurrentCursorEmpty   ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentMatch	plugged/fzf/src/tui/tui.go	/^	ColCurrentMatch         ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelected	plugged/fzf/src/tui/tui.go	/^	ColCurrentSelected      ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCurrentSelectedEmpty	plugged/fzf/src/tui/tui.go	/^	ColCurrentSelectedEmpty ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursor	plugged/fzf/src/tui/tui.go	/^	ColCursor               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColCursorEmpty	plugged/fzf/src/tui/tui.go	/^	ColCursorEmpty          ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColDisabled	plugged/fzf/src/tui/tui.go	/^	ColDisabled             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColHeader	plugged/fzf/src/tui/tui.go	/^	ColHeader               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInfo	plugged/fzf/src/tui/tui.go	/^	ColInfo                 ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColInput	plugged/fzf/src/tui/tui.go	/^	ColInput                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColMatch	plugged/fzf/src/tui/tui.go	/^	ColMatch                ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColNormal	plugged/fzf/src/tui/tui.go	/^	ColNormal               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreview	plugged/fzf/src/tui/tui.go	/^	ColPreview              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPreviewBorder	plugged/fzf/src/tui/tui.go	/^	ColPreviewBorder        ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColPrompt	plugged/fzf/src/tui/tui.go	/^	ColPrompt               ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSelected	plugged/fzf/src/tui/tui.go	/^	ColSelected             ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
ColSpinner	plugged/fzf/src/tui/tui.go	/^	ColSpinner              ColorPair$/;"	v	package:tui	typeref:struct:ColorPair
Color	plugged/fzf/src/tui/tui.go	/^	Color Color$/;"	m	struct:tui.ColorAttr	typeref:typename:Color
Color	plugged/fzf/src/tui/tui.go	/^type Color int32$/;"	t	package:tui	typeref:typename:int32
Color themes	plugged/fzf/ADVANCED.md	/^Color themes$/;"	s	chapter:Advanced fzf examples
ColorAttr	plugged/fzf/src/tui/tui.go	/^type ColorAttr struct {$/;"	s	package:tui
ColorPair	plugged/fzf/src/tui/tui.go	/^type ColorPair struct {$/;"	s	package:tui
ColorTheme	plugged/fzf/src/tui/tui.go	/^type ColorTheme struct {$/;"	s	package:tui
Colored	plugged/fzf/src/tui/tui.go	/^	Colored      bool$/;"	m	struct:tui.ColorTheme	typeref:typename:bool
Colors	plugged/fzf/src/item.go	/^func (item *Item) Colors() []ansiOffset {$/;"	f	struct:fzf.Item	typeref:typename:[]ansiOffset
Colorscheme configuration	plugged/lightline.vim/README.md	/^## Colorscheme configuration$/;"	s	chapter:lightline.vim
Command-local options	plugged/fzf.vim/README.md	/^### Command-local options$/;"	S	section:fzf :heart: vim""Customization
Commands	plugged/fzf.vim/README.md	/^Commands$/;"	s	chapter:fzf :heart: vim
Commentary	plugged/vim-commentary/plugin/commentary.vim	/^command! -range -bar Commentary call s:go(<line1>,<line2>)$/;"	c
Commit hashes	plugged/fzf/ADVANCED.md	/^### Commit hashes$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Comparable	plugged/fzf/src/tui/tui.go	/^func (e Event) Comparable() Event {$/;"	f	unknown:tui.Event	typeref:typename:Event
Comparison with vim-oblique	plugged/vim-slash/README.md	/^Comparison with vim-oblique$/;"	s	chapter:vim-slash
CompilerSet	plugged/rust.vim/compiler/cargo.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	plugged/rust.vim/compiler/rustc.vim	/^    command -nargs=* CompilerSet setlocal <args>$/;"	c
Completion functions	plugged/fzf.vim/README.md	/^Completion functions$/;"	s	chapter:fzf :heart: vim
CompletionTest	plugged/fzf/test/test_go.rb	/^module CompletionTest$/;"	m
CompletionToggle	plugged/completion-nvim/plugin/completion.vim	/^command! -nargs=0 CompletionToggle  lua require'completion'.completionToggle()$/;"	c
Concepts	plugged/vim-dirvish/README.md	/^Concepts$/;"	s	chapter:dirvish.vim :zap:
Configs	plugged/nvim-lspconfig/CONTRIBUTING.md	/^## Configs$/;"	s
Configuration	plugged/completion-nvim/README.md	/^## Configuration$/;"	s	chapter:completion-nvim
Configuration	plugged/fzf/README-VIM.md	/^### Configuration$/;"	S	section:FZF Vim integration""`:FZF[!]`
Configurations	plugged/nvim-lspconfig/CONFIG.md	/^# Configurations$/;"	c
Configurations	plugged/nvim-lspconfig/scripts/README_template.md	/^# Configurations$/;"	c
Constrain	plugged/fzf/src/util/util.go	/^func Constrain(val int, min int, max int) int {$/;"	f	package:util	typeref:typename:int
Constrain32	plugged/fzf/src/util/util.go	/^func Constrain32(val int32, min int32, max int32) int32 {$/;"	f	package:util	typeref:typename:int32
Contributing	plugged/vim-gutentags/CONTRIBUTING.md	/^# Contributing$/;"	c
Contributing	plugged/vim-repeat/README.markdown	/^## Contributing$/;"	s	chapter:repeat.vim
Contributing	plugged/vim-speeddating/README.markdown	/^## Contributing$/;"	s	chapter:speeddating.vim
Contributing	plugged/vim-surround/README.markdown	/^## Contributing$/;"	s	chapter:surround.vim
Contributions	plugged/nvim-lspconfig/README.md	/^## Contributions$/;"	s	chapter:LSP overview
CopyRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) CopyRunes(dest []rune) {$/;"	f	struct:util.Chars
CountItems	plugged/fzf/src/chunklist.go	/^func CountItems(cs []*Chunk) int {$/;"	f	package:fzf	typeref:typename:int
Cpublish	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cpublish call cargo#publish(<q-args>)$/;"	c
Creating Issues	plugged/ale/.github/CONTRIBUTING.md	/^## Creating Issues$/;"	s
Credits	plugged/vim-dirvish/README.md	/^Credits$/;"	s	chapter:dirvish.vim :zap:
Criteria	plugged/fzf/src/options.go	/^	Criteria    []criterion$/;"	m	struct:fzf.Options	typeref:typename:[]criterion
Crun	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Crun call cargo#run(<q-args>)$/;"	c
Cruntarget	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cruntarget call cargo#runtarget(<q-args>)$/;"	c
Csearch	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Csearch  call cargo#search(<q-args>)$/;"	c
Ctest	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Ctest call cargo#test(<q-args>)$/;"	c
CtrlA	plugged/fzf/src/tui/tui.go	/^	CtrlA$/;"	c	package:tui
CtrlAlt	plugged/fzf/src/tui/tui.go	/^	CtrlAlt$/;"	c	package:tui
CtrlAltKey	plugged/fzf/src/tui/tui.go	/^func CtrlAltKey(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
CtrlB	plugged/fzf/src/tui/tui.go	/^	CtrlB$/;"	c	package:tui
CtrlBackSlash	plugged/fzf/src/tui/tui.go	/^	CtrlBackSlash$/;"	c	package:tui
CtrlC	plugged/fzf/src/tui/tui.go	/^	CtrlC$/;"	c	package:tui
CtrlCaret	plugged/fzf/src/tui/tui.go	/^	CtrlCaret$/;"	c	package:tui
CtrlD	plugged/fzf/src/tui/tui.go	/^	CtrlD$/;"	c	package:tui
CtrlE	plugged/fzf/src/tui/tui.go	/^	CtrlE$/;"	c	package:tui
CtrlF	plugged/fzf/src/tui/tui.go	/^	CtrlF$/;"	c	package:tui
CtrlG	plugged/fzf/src/tui/tui.go	/^	CtrlG$/;"	c	package:tui
CtrlH	plugged/fzf/src/tui/tui.go	/^	CtrlH$/;"	c	package:tui
CtrlJ	plugged/fzf/src/tui/tui.go	/^	CtrlJ$/;"	c	package:tui
CtrlK	plugged/fzf/src/tui/tui.go	/^	CtrlK$/;"	c	package:tui
CtrlL	plugged/fzf/src/tui/tui.go	/^	CtrlL$/;"	c	package:tui
CtrlM	plugged/fzf/src/tui/tui.go	/^	CtrlM$/;"	c	package:tui
CtrlN	plugged/fzf/src/tui/tui.go	/^	CtrlN$/;"	c	package:tui
CtrlO	plugged/fzf/src/tui/tui.go	/^	CtrlO$/;"	c	package:tui
CtrlP	plugged/fzf/src/tui/tui.go	/^	CtrlP$/;"	c	package:tui
CtrlQ	plugged/fzf/src/tui/tui.go	/^	CtrlQ$/;"	c	package:tui
CtrlR	plugged/fzf/src/tui/tui.go	/^	CtrlR$/;"	c	package:tui
CtrlRightBracket	plugged/fzf/src/tui/tui.go	/^	CtrlRightBracket$/;"	c	package:tui
CtrlS	plugged/fzf/src/tui/tui.go	/^	CtrlS$/;"	c	package:tui
CtrlSlash	plugged/fzf/src/tui/tui.go	/^	CtrlSlash$/;"	c	package:tui
CtrlSpace	plugged/fzf/src/tui/tui.go	/^	CtrlSpace$/;"	c	package:tui
CtrlT	plugged/fzf/src/tui/tui.go	/^	CtrlT$/;"	c	package:tui
CtrlU	plugged/fzf/src/tui/tui.go	/^	CtrlU$/;"	c	package:tui
CtrlV	plugged/fzf/src/tui/tui.go	/^	CtrlV$/;"	c	package:tui
CtrlW	plugged/fzf/src/tui/tui.go	/^	CtrlW$/;"	c	package:tui
CtrlX	plugged/fzf/src/tui/tui.go	/^	CtrlX$/;"	c	package:tui
CtrlY	plugged/fzf/src/tui/tui.go	/^	CtrlY$/;"	c	package:tui
CtrlZ	plugged/fzf/src/tui/tui.go	/^	CtrlZ$/;"	c	package:tui
Cupdate	plugged/rust.vim/plugin/cargo.vim	/^command! -nargs=* Cupdate call cargo#update(<q-args>)$/;"	c
Current	plugged/fzf/src/tui/tui.go	/^	Current      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
CurrentMatch	plugged/fzf/src/tui/tui.go	/^	CurrentMatch ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Cursor	plugged/fzf/src/tui/tui.go	/^	Cursor       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Custom	plugged/lightline.vim/test/expand.vim	/^  function! Custom()$/;"	f
Custom	plugged/lightline.vim/test/onetab.vim	/^  function! Custom(n)$/;"	f
Custom completion	plugged/fzf.vim/README.md	/^Custom completion$/;"	s	chapter:fzf :heart: vim
Custom fuzzy completion	plugged/fzf/README.md	/^#### Custom fuzzy completion$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Custom statusline	plugged/fzf.vim/README.md	/^### Custom statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Custom1	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom1()$/;"	f
Custom2	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom2()$/;"	f
Custom3	plugged/lightline.vim/test/subseparator.vim	/^  function! Custom3()$/;"	f
Customization	plugged/fzf.vim/README.md	/^Customization$/;"	s	chapter:fzf :heart: vim
Customization	plugged/vim-slash/README.md	/^Customization$/;"	s	chapter:vim-slash
Cycle	plugged/fzf/src/options.go	/^	Cycle       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set DB_FILE=%~2$/;"	v
DB_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set DB_FILE=cscope.out$/;"	v
DEBUG	plugged/fzf/src/algo/algo.go	/^var DEBUG bool$/;"	v	package:algo	typeref:typename:bool
DEFAULT_TIMEOUT	plugged/fzf/test/test_go.rb	/^DEFAULT_TIMEOUT = 10$/;"	C
DESCRIPTION	plugged/fzf/man/man1/fzf-tmux.1	/^.SH DESCRIPTION$/;"	s	title:fzf-tmux
DESCRIPTION	plugged/fzf/man/man1/fzf.1	/^.SH DESCRIPTION$/;"	s	title:fzf
DESTDIR	plugged/delimitMate/Makefile	/^DESTDIR  =  $(HOME)\/.vim$/;"	m
DJANGO_SETTINGS_MODULE	plugged/ale/test/test-files/python/namespace_package_pytest/pytest.ini	/^DJANGO_SETTINGS_MODULE=foo.settings$/;"	k	section:pytest
DOC	plugged/delimitMate/Makefile	/^DOC      =  $(wildcard doc\/*.txt)$/;"	m
Dark256	plugged/fzf/src/tui/tui.go	/^	Dark256   *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
DarkBg	plugged/fzf/src/tui/tui.go	/^	DarkBg       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Debugging	plugged/nvim-lspconfig/README.md	/^## Debugging$/;"	s	chapter:LSP overview
Default16	plugged/fzf/src/tui/tui.go	/^	Default16 *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
Del	plugged/fzf/src/tui/tui.go	/^	Del$/;"	c	package:tui
DelimitMateOff	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOff call s:setup(0)$/;"	c
DelimitMateOn	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateOn call s:setup(1)$/;"	c
DelimitMateReload	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateReload call s:setup(1)$/;"	c
DelimitMateSwitch	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateSwitch call s:setup(2)$/;"	c
DelimitMateTest	plugged/delimitMate/plugin/delimitMate.vim	/^command! -bar DelimitMateTest call s:test()$/;"	c
Delimiter	plugged/fzf/src/options.go	/^	Delimiter   Delimiter$/;"	m	struct:fzf.Options	typeref:typename:Delimiter
Delimiter	plugged/fzf/src/tokenizer.go	/^type Delimiter struct {$/;"	s	package:fzf
Demo	plugged/completion-nvim/README.md	/^## Demo$/;"	s	chapter:completion-nvim
Demo	plugged/fzf/README.md	/^#### Demo$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
DeopleteSourceTest	plugged/ale/test/python/test_deoplete_source.py	/^class DeopleteSourceTest(unittest.TestCase):$/;"	c
Dependencies	plugged/fzf.vim/README.md	/^### Dependencies$/;"	S	section:fzf :heart: vim""Installation
Description	plugged/rust.vim/README.md	/^## Description$/;"	s	chapter:rust.vim
Dim	plugged/fzf/src/tui/dummy.go	/^	Dim       = Attr(1 << 1)$/;"	c	package:tui
Dim	plugged/fzf/src/tui/tcell.go	/^	Dim            = Attr(tcell.AttrDim)$/;"	c	package:tui
Dirvish	plugged/vim-dirvish/plugin/dirvish.vim	/^command! -bar -nargs=? -complete=dir Dirvish call dirvish#open(<q-args>)$/;"	c
Disabled	plugged/fzf/src/tui/tui.go	/^	Disabled     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Documentation	plugged/supertab/README.rst	/^Documentation$/;"	s	chapter:Overview
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:DoneParseArgs$/;"	l
DoneParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:DoneParseArgs$/;"	l
Double	plugged/fzf/src/tui/tui.go	/^	Double bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
DoubleClick	plugged/fzf/src/tui/tui.go	/^	DoubleClick$/;"	c	package:tui
Down	plugged/fzf/src/tui/tui.go	/^	Down   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Down	plugged/fzf/src/tui/tui.go	/^	Down$/;"	c	package:tui
DurWithin	plugged/fzf/src/util/util.go	/^func DurWithin($/;"	f	package:util	typeref:typename:time.Duration
Dynamic reloading of the list	plugged/fzf/ADVANCED.md	/^Dynamic reloading of the list$/;"	s	chapter:Advanced fzf examples
END_BLOCKS	plugged/ale/test/script/block-padding-checker	/^END_BLOCKS = set(['endif', 'endfor', 'endwhile', 'endtry', 'endfunction'])$/;"	v
ENVIRONMENT	plugged/fzf/man/man1/fzf.1	/^.SH ENVIRONMENT VARIABLES$/;"	s	title:fzf
EOF	plugged/fzf/install	/^  cat << EOF$/;"	h
EOF	plugged/fzf/install	/^  cat > "$src" << EOF$/;"	h
EOF	plugged/fzf/install	/^  fish << EOF$/;"	h
EOF	plugged/fzf/uninstall	/^  cat << EOF$/;"	h
ESC	plugged/fzf/src/tui/tui.go	/^	ESC$/;"	c	package:tui
EXIT	plugged/fzf/man/man1/fzf.1	/^.SH EXIT STATUS$/;"	s	title:fzf
EXTENDED	plugged/fzf/man/man1/fzf.1	/^.SH EXTENDED SEARCH MODE$/;"	s	title:fzf
Edit Dirvish buffers	plugged/vim-dirvish/README.md	/^### Edit Dirvish buffers$/;"	S	section:dirvish.vim :zap:""Concepts
EmptyMerger	plugged/fzf/src/merger.go	/^var EmptyMerger = NewMerger(nil, [][]Result{}, false, false)$/;"	v	package:fzf
EmptyTheme	plugged/fzf/src/tui/tui.go	/^func EmptyTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Enable Snippets Support	plugged/completion-nvim/README.md	/^### Enable Snippets Support$/;"	S	section:completion-nvim""Configuration
Enable/Disable auto hover	plugged/completion-nvim/README.md	/^### Enable\/Disable auto hover$/;"	S	section:completion-nvim""Configuration
Enable/Disable auto popup	plugged/completion-nvim/README.md	/^### Enable\/Disable auto popup$/;"	S	section:completion-nvim""Configuration
Enable/Disable auto signature	plugged/completion-nvim/README.md	/^### Enable\/Disable auto signature$/;"	S	section:completion-nvim""Configuration
Enabling additional language servers	plugged/nvim-lspconfig/README.md	/^## Enabling additional language servers$/;"	s	chapter:LSP overview
Enclose	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
Enclose	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Enclose(y int, x int) bool {$/;"	f	struct:tui.TcellWindow	typeref:typename:bool
Enclose	plugged/fzf/src/tui/tui.go	/^	Enclose(y int, x int) bool$/;"	n	interface:tui.Window	typeref:typename:bool
End	plugged/fzf/src/algo/algo.go	/^	End   int$/;"	m	struct:algo.Result	typeref:typename:int
End	plugged/fzf/src/tui/tui.go	/^	End$/;"	c	package:tui
Environment variables	plugged/fzf/README.md	/^#### Environment variables$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Environment variables / Aliases	plugged/fzf/README.md	/^#### Environment variables \/ Aliases$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
EqualMatch	plugged/fzf/src/algo/algo.go	/^func EqualMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []ru/;"	f	package:algo	typeref:typename:(Result, *[]int)
Erase	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Erase() {$/;"	f	struct:tui.LightWindow
Erase	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Erase() {$/;"	f	struct:tui.TcellWindow
Erase	plugged/fzf/src/tui/tui.go	/^	Erase()$/;"	n	interface:tui.Window
Error	plugged/rust.vim/test/run-tests	/^class Error(Exception):$/;"	c
Error checking with [Syntastic][syn]	plugged/rust.vim/README.md	/^### Error checking with [Syntastic][syn]$/;"	S	section:rust.vim""Features
Event	plugged/fzf/src/tui/tui.go	/^type Event struct {$/;"	s	package:tui
EventBox	plugged/fzf/src/util/eventbox.go	/^type EventBox struct {$/;"	s	package:util
EventType	plugged/fzf/src/tui/tui.go	/^type EventType int$/;"	t	package:tui	typeref:typename:int
EventType	plugged/fzf/src/util/eventbox.go	/^type EventType int$/;"	t	package:util	typeref:typename:int
Events	plugged/fzf/src/util/eventbox.go	/^type Events map[EventType]interface{}$/;"	t	package:util	typeref:typename:map[EventType]interface{}
EvtClose	plugged/fzf/src/util/eventbox_test.go	/^	EvtClose$/;"	c	package:util
EvtHeader	plugged/fzf/src/constants.go	/^	EvtHeader$/;"	c	package:fzf
EvtQuit	plugged/fzf/src/constants.go	/^	EvtQuit$/;"	c	package:fzf
EvtReadFin	plugged/fzf/src/constants.go	/^	EvtReadFin$/;"	c	package:fzf
EvtReadFin	plugged/fzf/src/util/eventbox_test.go	/^	EvtReadFin$/;"	c	package:util
EvtReadNew	plugged/fzf/src/constants.go	/^	EvtReadNew util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
EvtReadNew	plugged/fzf/src/util/eventbox_test.go	/^	EvtReadNew EventType = iota$/;"	c	package:util	typeref:typename:EventType
EvtReady	plugged/fzf/src/constants.go	/^	EvtReady$/;"	c	package:fzf
EvtSearchFin	plugged/fzf/src/constants.go	/^	EvtSearchFin$/;"	c	package:fzf
EvtSearchFin	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchFin$/;"	c	package:util
EvtSearchNew	plugged/fzf/src/constants.go	/^	EvtSearchNew$/;"	c	package:fzf
EvtSearchNew	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchNew$/;"	c	package:util
EvtSearchProgress	plugged/fzf/src/constants.go	/^	EvtSearchProgress$/;"	c	package:fzf
EvtSearchProgress	plugged/fzf/src/util/eventbox_test.go	/^	EvtSearchProgress$/;"	c	package:util
ExactMatchNaive	plugged/fzf/src/algo/algo.go	/^func ExactMatchNaive(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern/;"	f	package:algo	typeref:typename:(Result, *[]int)
Example: Advanced ripgrep integration	plugged/fzf.vim/README.md	/^#### Example: Advanced ripgrep integration$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: Customizing `Files` command	plugged/fzf.vim/README.md	/^#### Example: Customizing `Files` command$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `Rg` command with preview window	plugged/fzf.vim/README.md	/^#### Example: `Rg` command with preview window$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: `git grep` wrapper	plugged/fzf.vim/README.md	/^#### Example: `git grep` wrapper$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Example: custom config	plugged/nvim-lspconfig/ADVANCED_README.md	/^### Example: custom config$/;"	S	section:Advanced usage
Example: override default config for all servers	plugged/nvim-lspconfig/ADVANCED_README.md	/^### Example: override default config for all servers$/;"	S	section:Advanced usage
Example: override some defaults	plugged/nvim-lspconfig/ADVANCED_README.md	/^### Example: override some defaults$/;"	S	section:Advanced usage
Example: using the defaults	plugged/nvim-lspconfig/ADVANCED_README.md	/^### Example: using the defaults$/;"	S	section:Advanced usage
Examples	plugged/fzf/README-VIM.md	/^#### Examples$/;"	t	subsection:FZF Vim integration""`:FZF[!]`""Configuration
Examples	plugged/fzf/README.md	/^Examples$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
ExecCommand	plugged/fzf/src/util/util_unix.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommand	plugged/fzf/src/util/util_windows.go	/^func ExecCommand(command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	plugged/fzf/src/util/util_unix.go	/^func ExecCommandWith(shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
ExecCommandWith	plugged/fzf/src/util/util_windows.go	/^func ExecCommandWith(_shell string, command string, setpgid bool) *exec.Cmd {$/;"	f	package:util	typeref:typename:*exec.Cmd
Executing external programs	plugged/fzf/README.md	/^### Executing external programs$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Exit0	plugged/fzf/src/options.go	/^	Exit0       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Expect	plugged/fzf/src/options.go	/^	Expect      map[tui.Event]string$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event]string
Expected behaviour	plugged/nvim-lspconfig/.github/ISSUE_TEMPLATE/bug_report.md	/^### Expected behaviour$/;"	S
Explanation of `g:fzf_colors`	plugged/fzf/README-VIM.md	/^##### Explanation of `g:fzf_colors`$/;"	T	subsubsection:FZF Vim integration""`:FZF[!]`""Configuration""Examples
Extended	plugged/fzf/src/options.go	/^	Extended    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Extensions	plugged/vim-dirvish/README.md	/^Extensions$/;"	s	chapter:dirvish.vim :zap:
F1	plugged/fzf/src/tui/tui.go	/^	F1$/;"	c	package:tui
F10	plugged/fzf/src/tui/tui.go	/^	F10$/;"	c	package:tui
F11	plugged/fzf/src/tui/tui.go	/^	F11$/;"	c	package:tui
F12	plugged/fzf/src/tui/tui.go	/^	F12$/;"	c	package:tui
F2	plugged/fzf/src/tui/tui.go	/^	F2$/;"	c	package:tui
F3	plugged/fzf/src/tui/tui.go	/^	F3$/;"	c	package:tui
F4	plugged/fzf/src/tui/tui.go	/^	F4$/;"	c	package:tui
F5	plugged/fzf/src/tui/tui.go	/^	F5$/;"	c	package:tui
F6	plugged/fzf/src/tui/tui.go	/^	F6$/;"	c	package:tui
F7	plugged/fzf/src/tui/tui.go	/^	F7$/;"	c	package:tui
F8	plugged/fzf/src/tui/tui.go	/^	F8$/;"	c	package:tui
F9	plugged/fzf/src/tui/tui.go	/^	F9$/;"	c	package:tui
FAQ	plugged/vim-commentary/README.markdown	/^## FAQ$/;"	s	chapter:commentary.vim
FAQ	plugged/vim-fugitive/README.markdown	/^## FAQ$/;"	s	chapter:fugitive.vim
FAQ	plugged/vim-sneak/README.md	/^FAQ$/;"	s	chapter:sneak.vim :shoe:
FIELD	plugged/fzf/man/man1/fzf.1	/^.SH FIELD INDEX EXPRESSION$/;"	s	title:fzf
FILE	plugged/fzf/test/test_go.rb	/^FILE = File.expand_path(__FILE__)$/;"	C
FILENAME	plugged/delimitMate/Makefile	/^FILENAME =  $(NAME)-$(VERSION)$/;"	m
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^for \/F %%F in ("%DB_FILE%.files") do set FILESIZE=%%~zF$/;"	v
FILESIZE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILESIZE=0$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD=%~2$/;"	v
FILE_LIST_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD=$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set FILE_LIST_CMD_IS_ABSOLUTE=1$/;"	v
FILE_LIST_CMD_IS_ABSOLUTE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set FILE_LIST_CMD_IS_ABSOLUTE=0$/;"	v
FZF	plugged/fzf/plugin/fzf.vim	/^command! -nargs=* -complete=dir -bang FZF call s:cmd(<bang>0, <f-args>)$/;"	c
FZF	plugged/fzf/test/test_go.rb	/^FZF = "FZF_DEFAULT_OPTS= FZF_DEFAULT_COMMAND= #{BASE}\/bin\/fzf"$/;"	C
FZF Vim integration	plugged/fzf/README-VIM.md	/^FZF Vim integration$/;"	c
Features	plugged/completion-nvim/README.md	/^## Features$/;"	s	chapter:completion-nvim
Features	plugged/rust.vim/README.md	/^## Features$/;"	s	chapter:rust.vim
Features	plugged/supertab/README.rst	/^Features$/;"	s	chapter:Overview
Features	plugged/vim-dirvish/README.md	/^Features$/;"	s	chapter:dirvish.vim :zap:
Fg	plugged/fzf/src/tui/tui.go	/^	Fg           ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Fg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Fg() Color {$/;"	f	struct:tui.ColorPair	typeref:typename:Color
FileWord	plugged/fzf/src/options.go	/^	FileWord    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Files and directories	plugged/fzf/README.md	/^#### Files and directories$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Files listed in `git status`	plugged/fzf/ADVANCED.md	/^### Files listed in `git status`$/;"	S	section:Advanced fzf examples""Key bindings for git objects
Fill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Fill(text string) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
Fill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Fill(str string) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
Fill	plugged/fzf/src/tui/tui.go	/^	Fill(text string) FillReturn$/;"	n	interface:tui.Window	typeref:typename:FillReturn
FillContinue	plugged/fzf/src/tui/tui.go	/^	FillContinue FillReturn = iota$/;"	c	package:tui	typeref:type:FillReturn
FillNextLine	plugged/fzf/src/tui/tui.go	/^	FillNextLine$/;"	c	package:tui
FillReturn	plugged/fzf/src/tui/tui.go	/^type FillReturn int$/;"	t	package:tui	typeref:typename:int
FillSuspend	plugged/fzf/src/tui/tui.go	/^	FillSuspend$/;"	c	package:tui
Filter	plugged/fzf/src/options.go	/^	Filter      *string$/;"	m	struct:fzf.Options	typeref:typename:*string
FinishFill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) FinishFill() {$/;"	f	struct:tui.LightWindow
FinishFill	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) FinishFill() {$/;"	f	struct:tui.TcellWindow
FinishFill	plugged/fzf/src/tui/tui.go	/^	FinishFill()$/;"	n	interface:tui.Window
Fish shell	plugged/fzf/README.md	/^#### Fish shell$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Fixes and improvements	plugged/fzf/CHANGELOG.md	/^### Fixes and improvements$/;"	S	section:CHANGELOG""0.10.2
Formatting with [rustfmt][rfmt]	plugged/rust.vim/README.md	/^### Formatting with [rustfmt][rfmt]$/;"	S	section:rust.vim""Features
Frequently Asked Questions	plugged/supertab/README.rst	/^Frequently Asked Questions$/;"	s	chapter:Overview
FugitiveCommonDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveCommonDir(...) abort$/;"	f
FugitiveConfig	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfig(...) abort$/;"	f
FugitiveConfigGet	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGet(name, ...) abort$/;"	f
FugitiveConfigGetAll	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetAll(name, ...) abort$/;"	f
FugitiveConfigGetRegexp	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveConfigGetRegexp(pattern, ...) abort$/;"	f
FugitiveDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveDetect(path) abort$/;"	f
FugitiveExtractGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveExtractGitDir(path) abort$/;"	f
FugitiveFind	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveFind(...) abort$/;"	f
FugitiveGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitDir(...) abort$/;"	f
FugitiveGitPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveGitPath(path) abort$/;"	f
FugitiveHead	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveHead(...) abort$/;"	f
FugitiveIsGitDir	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveIsGitDir(path) abort$/;"	f
FugitiveParse	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveParse(...) abort$/;"	f
FugitivePath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePath(...) abort$/;"	f
FugitivePrepare	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitivePrepare(...) abort$/;"	f
FugitiveReal	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveReal(...) abort$/;"	f
FugitiveRemoteUrl	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveRemoteUrl(...) abort$/;"	f
FugitiveResult	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveResult(...) abort$/;"	f
FugitiveStatusline	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveStatusline(...) abort$/;"	f
FugitiveVimPath	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveVimPath(path) abort$/;"	f
FugitiveWorkTree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! FugitiveWorkTree(...) abort$/;"	f
FullscreenRenderer	plugged/fzf/src/tui/tui.go	/^type FullscreenRenderer struct {$/;"	s	package:tui
Fuzzy	plugged/fzf/src/options.go	/^	Fuzzy       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Fuzzy completion for bash and zsh	plugged/fzf/README.md	/^Fuzzy completion for bash and zsh$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
FuzzyAlgo	plugged/fzf/src/options.go	/^	FuzzyAlgo   algo.Algo$/;"	m	struct:fzf.Options	typeref:typename:algo.Algo
FuzzyMatchV1	plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV1(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []/;"	f	package:algo	typeref:typename:(Result, *[]int)
FuzzyMatchV2	plugged/fzf/src/algo/algo.go	/^func FuzzyMatchV2(caseSensitive bool, normalize bool, forward bool, input *util.Chars, pattern [/;"	f	package:algo	typeref:typename:(Result, *[]int)
G	plugged/vim-fugitive/plugin/fugitive.vim	/^  command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete G   exe fugitive#Comm/;"	c
GO	plugged/fzf/Makefile	/^GO             ?= go$/;"	m
GOOS	plugged/fzf/Makefile	/^GOOS           ?= $(word 1, $(subst \/, " ", $(word 4, $(shell go version))))$/;"	m
Generating Vim help files	plugged/ale/README.md	/^#### Generating Vim help files$/;"	t	subsection:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation""3.i. Installation with Vim package management
Generating docs	plugged/nvim-lspconfig/CONTRIBUTING.md	/^## Generating docs$/;"	s
Generating fzf color theme from Vim color schemes	plugged/fzf/ADVANCED.md	/^### Generating fzf color theme from Vim color schemes$/;"	S	section:Advanced fzf examples""Color themes
Get	plugged/fzf/src/merger.go	/^func (mg *Merger) Get(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
Get	plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Get() bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Get	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Get(i int) rune {$/;"	f	struct:util.Chars	typeref:typename:rune
GetChar	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) GetChar() Event { return Event{} }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) GetChar() Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) GetChar() Event {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Event
GetChar	plugged/fzf/src/tui/tui.go	/^	GetChar() Event$/;"	n	interface:tui.Renderer	typeref:typename:Event
GetRustIndent	plugged/rust.vim/indent/rust.vim	/^function GetRustIndent(lnum)$/;"	f
Git	plugged/vim-fugitive/plugin/fugitive.vim	/^command! -bang -nargs=? -range=-1 -complete=customlist,fugitive#Complete Git exe fugitive#Comman/;"	c
GivenCommandOutput	plugged/ale/autoload/ale/assert.vim	/^    command! -nargs=+ GivenCommandOutput :call ale#assert#GivenCommandOutput(<args>)$/;"	c
Global options	plugged/fzf.vim/README.md	/^### Global options$/;"	S	section:fzf :heart: vim""Customization
Global options supported by `fzf#wrap`	plugged/fzf/README-VIM.md	/^### Global options supported by `fzf#wrap`$/;"	S	section:FZF Vim integration""`fzf#wrap`
Guidelines	plugged/ale/.github/CONTRIBUTING.md	/^## Guidelines$/;"	s
Gutentags	plugged/vim-gutentags/README.md	/^# Gutentags$/;"	c
GutentagsToggleEnabled	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleEnabled :let g:gutentags_enabled=!g:gutentags_enabled$/;"	c
GutentagsToggleFake	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleFake    :call gutentags#fake()$/;"	c
GutentagsToggleTrace	plugged/vim-gutentags/plugin/gutentags.vim	/^    command! GutentagsToggleTrace   :call gutentags#toggletrace()$/;"	c
GutentagsUpdate	plugged/vim-gutentags/autoload/gutentags.vim	/^    command! -buffer -bang GutentagsUpdate :call s:manual_update_tags(<bang>0)$/;"	c
Gutter	plugged/fzf/src/tui/tui.go	/^	Gutter       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HasBg	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) HasBg() bool {$/;"	f	struct:tui.ColorPair	typeref:typename:bool
HasFullscreenRenderer	plugged/fzf/src/tui/dummy.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
HasFullscreenRenderer	plugged/fzf/src/tui/tcell.go	/^func HasFullscreenRenderer() bool {$/;"	f	package:tui	typeref:typename:bool
Header	plugged/fzf/src/options.go	/^	Header      []string$/;"	m	struct:fzf.Options	typeref:typename:[]string
Header	plugged/fzf/src/tui/tui.go	/^	Header       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
HeaderLines	plugged/fzf/src/options.go	/^	HeaderLines int$/;"	m	struct:fzf.Options	typeref:typename:int
Health check	plugged/nvim-lspconfig/.github/ISSUE_TEMPLATE/bug_report.md	/^### Health check$/;"	S
Height	plugged/fzf/src/options.go	/^	Height      sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:sizeSpec
Height	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Height() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Height	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Height() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Height	plugged/fzf/src/tui/tui.go	/^	Height() int$/;"	n	interface:tui.Window	typeref:typename:int
Help	plugged/rust.vim/README.md	/^## Help$/;"	s	chapter:rust.vim
HexToColor	plugged/fzf/src/tui/tui.go	/^func HexToColor(rrggbb string) Color {$/;"	f	package:tui	typeref:typename:Color
Hide statusline	plugged/fzf.vim/README.md	/^### Hide statusline$/;"	S	section:fzf :heart: vim""Status line of terminal buffer
Hide statusline	plugged/fzf/README-VIM.md	/^### Hide statusline$/;"	S	section:FZF Vim integration""Tips
History	plugged/fzf/src/history.go	/^type History struct {$/;"	s	package:fzf
History	plugged/fzf/src/options.go	/^	History     *History$/;"	m	struct:fzf.Options	typeref:typename:*History
Home	plugged/fzf/src/tui/tui.go	/^	Home$/;"	c	package:tui
Host names	plugged/fzf/README.md	/^#### Host names$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
How can I replace `f` and/or `t` with *one-character* Sneak?	plugged/vim-sneak/README.md	/^### How can I replace `f` and\/or `t` with *one-character* Sneak?$/;"	S	section:sneak.vim :shoe:""FAQ
How can I replace `f` with Sneak?	plugged/vim-sneak/README.md	/^### How can I replace `f` with Sneak?$/;"	S	section:sneak.vim :shoe:""FAQ
How can I truncate the components from the right in narrow windows?	plugged/lightline.vim/README.md	/^#### How can I truncate the components from the right in narrow windows?$/;"	t	subsection:lightline.vim""Advanced configuration""more tips
How dare you remap `s`?	plugged/vim-sneak/README.md	/^### How dare you remap `s`?$/;"	S	section:sneak.vim :shoe:""FAQ
How to reproduce the problem from neovim startup	plugged/nvim-lspconfig/.github/ISSUE_TEMPLATE/bug_report.md	/^### How to reproduce the problem from neovim startup$/;"	S
How?	plugged/vim-gutentags/README.md	/^## How?$/;"	s	chapter:Gutentags
Hscroll	plugged/fzf/src/options.go	/^	Hscroll     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
HscrollOff	plugged/fzf/src/options.go	/^	HscrollOff  int$/;"	m	struct:fzf.Options	typeref:typename:int
I	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> I <NOP>$/;"	m
I16	plugged/fzf/src/util/slab.go	/^	I16 []int16$/;"	m	struct:util.Slab	typeref:typename:[]int16
I32	plugged/fzf/src/util/slab.go	/^	I32 []int32$/;"	m	struct:util.Slab	typeref:typename:[]int32
IMAGE	plugged/rust.vim/test/run-tests	/^IMAGE = "%s:%s" % (REPO, TAG)$/;"	v
INDENTATION_RE	plugged/ale/test/script/block-padding-checker	/^INDENTATION_RE = re.compile(r'^ *')$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set INDEX_WHOLE_PROJECT=0$/;"	v
INDEX_WHOLE_PROJECT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set INDEX_WHOLE_PROJECT=1$/;"	v
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.10
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.3
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.4
Improvements	plugged/fzf/CHANGELOG.md	/^### Improvements$/;"	S	section:CHANGELOG""0.9.5
Index	plugged/fzf/src/item.go	/^func (item *Item) Index() int32 {$/;"	f	struct:fzf.Item	typeref:typename:int32
Index	plugged/fzf/src/result.go	/^func (result *Result) Index() int32 {$/;"	f	struct:fzf.Result	typeref:typename:int32
Index	plugged/fzf/src/util/chars.go	/^	Index int32$/;"	m	struct:util.Chars	typeref:typename:int32
Info	plugged/fzf/.github/ISSUE_TEMPLATE.md	/^## Info$/;"	s
Info	plugged/fzf/src/tui/tui.go	/^	Info         ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
InfoStyle	plugged/fzf/src/options.go	/^	InfoStyle   infoStyle$/;"	m	struct:fzf.Options	typeref:typename:infoStyle
Information	plugged/ale/.github/ISSUE_TEMPLATE/report-a-bug.md	/^## Information$/;"	s
Init	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Init()             {}$/;"	f	unknown:tui.FullscreenRenderer
Init	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Init() {$/;"	f	struct:tui.LightRenderer
Init	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Init() {$/;"	f	unknown:tui.FullscreenRenderer
Init	plugged/fzf/src/tui/tui.go	/^	Init()$/;"	n	interface:tui.Renderer
Input	plugged/fzf/src/terminal.go	/^func (t *Terminal) Input() (bool, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []rune)
Input	plugged/fzf/src/tui/tui.go	/^	Input        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Insert	plugged/fzf/src/tui/tui.go	/^	Insert$/;"	c	package:tui
Install	plugged/completion-nvim/README.md	/^## Install$/;"	s	chapter:completion-nvim
Install	plugged/nvim-lspconfig/README.md	/^## Install$/;"	s	chapter:LSP overview
Install	plugged/vim-sneak/README.md	/^Install$/;"	s	chapter:sneak.vim :shoe:
Installation	plugged/fzf.vim/README.md	/^Installation$/;"	s	chapter:fzf :heart: vim
Installation	plugged/fzf/README-VIM.md	/^Installation$/;"	s	chapter:FZF Vim integration
Installation	plugged/fzf/README.md	/^Installation$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Installation	plugged/lightline.vim/README.md	/^## Installation$/;"	s	chapter:lightline.vim
Installation	plugged/rust.vim/README.md	/^## Installation$/;"	s	chapter:rust.vim
Installation	plugged/supertab/README.rst	/^Installation$/;"	s	chapter:Overview
Installation	plugged/vim-abolish/README.markdown	/^## Installation$/;"	s	chapter:abolish.vim
Installation	plugged/vim-commentary/README.markdown	/^## Installation$/;"	s	chapter:commentary.vim
Installation	plugged/vim-fugitive/README.markdown	/^## Installation$/;"	s	chapter:fugitive.vim
Installation	plugged/vim-repeat/README.markdown	/^## Installation$/;"	s	chapter:repeat.vim
Installation	plugged/vim-slash/README.md	/^Installation$/;"	s	chapter:vim-slash
Installation	plugged/vim-speeddating/README.markdown	/^## Installation$/;"	s	chapter:speeddating.vim
Installation	plugged/vim-surround/README.markdown	/^## Installation$/;"	s	chapter:surround.vim
Int	plugged/fzf/src/tui/tui.go	/^func (t EventType) Int() int {$/;"	f	type:tui.EventType	typeref:typename:int
Introduction	plugged/fzf/ADVANCED.md	/^Introduction$/;"	s	chapter:Advanced fzf examples
Introduction	plugged/lightline.vim/README.md	/^## Introduction$/;"	s	chapter:lightline.vim
Invalid	plugged/fzf/src/tui/tui.go	/^	Invalid$/;"	c	package:tui
IsBytes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) IsBytes() bool {$/;"	f	struct:util.Chars	typeref:typename:bool
IsDefault	plugged/fzf/src/tui/tui.go	/^func (c Color) IsDefault() bool {$/;"	f	type:tui.Color	typeref:typename:bool
IsEmpty	plugged/fzf/src/pattern.go	/^func (p *Pattern) IsEmpty() bool {$/;"	f	struct:fzf.Pattern	typeref:typename:bool
IsFull	plugged/fzf/src/chunklist.go	/^func (c *Chunk) IsFull() bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
IsLightRendererSupported	plugged/fzf/src/tui/light_unix.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsLightRendererSupported	plugged/fzf/src/tui/light_windows.go	/^func IsLightRendererSupported() bool {$/;"	f	package:tui	typeref:typename:bool
IsTty	plugged/fzf/src/util/util.go	/^func IsTty() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	plugged/fzf/src/util/util_unix.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
IsWindows	plugged/fzf/src/util/util_windows.go	/^func IsWindows() bool {$/;"	f	package:util	typeref:typename:bool
Italic	plugged/fzf/src/tui/dummy.go	/^	Italic    = Attr(1 << 2)$/;"	c	package:tui
Italic	plugged/fzf/src/tui/tcell.go	/^	Italic         = Attr(tcell.AttrItalic)$/;"	c	package:tui
Item	plugged/fzf/src/item.go	/^type Item struct {$/;"	s	package:fzf
ItemBuilder	plugged/fzf/src/chunklist.go	/^type ItemBuilder func(*Item, []byte) bool$/;"	t	package:fzf	typeref:typename:func(*Item, []byte) bool
JumpLabels	plugged/fzf/src/options.go	/^	JumpLabels  string$/;"	m	struct:fzf.Options	typeref:typename:string
K	init.vim	/^            nmap <buffer> <silent> K <Plug>(lcn-hover)$/;"	m
KEY/EVENT	plugged/fzf/man/man1/fzf.1	/^.SH KEY\/EVENT BINDINGS$/;"	s	title:fzf
KeepRight	plugged/fzf/src/options.go	/^	KeepRight   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Key	plugged/fzf/src/tui/tui.go	/^func Key(r rune) Event {$/;"	f	package:tui	typeref:typename:Event
Key bindings for command-line	plugged/fzf/README.md	/^Key bindings for command-line$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Key bindings for git objects	plugged/fzf/ADVANCED.md	/^Key bindings for git objects$/;"	s	chapter:Advanced fzf examples
Keybindings and completion	plugged/nvim-lspconfig/README.md	/^## Keybindings and completion$/;"	s	chapter:LSP overview
Keymap	plugged/fzf/src/options.go	/^	Keymap      map[tui.Event][]action$/;"	m	struct:fzf.Options	typeref:typename:map[tui.Event][]action
KillCommand	plugged/fzf/src/util/util_unix.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
KillCommand	plugged/fzf/src/util/util_windows.go	/^func KillCommand(cmd *exec.Cmd) error {$/;"	f	package:util	typeref:typename:error
LAYOUT	plugged/fzf/man/man1/fzf-tmux.1	/^.SH LAYOUT OPTIONS$/;"	s	title:fzf-tmux
LC_maps	init.vim	/^    function LC_maps()$/;"	f
LIB	plugged/delimitMate/Makefile	/^LIB      =  $(wildcard autoload\/*.vim)$/;"	m
LICENSE	plugged/fzf/man/man1/fzf.1	/^.SH LICENSE$/;"	s	title:fzf
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^set LOG_FILE=$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set LOG_FILE=%~2$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^if [%LOG_FILE%]==[] set LOG_FILE=CON$/;"	v
LOG_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set LOG_FILE=$/;"	v
LOVEQuickFix	ftplugin/lua.vim	/^function! LOVEQuickFix(j, d, e)$/;"	f
LSP Based Snippet parsing	plugged/completion-nvim/README.md	/^### LSP Based Snippet parsing$/;"	S	section:completion-nvim""Configuration
LSP log	plugged/nvim-lspconfig/.github/ISSUE_TEMPLATE/bug_report.md	/^### LSP log$/;"	S
LSP overview	plugged/nvim-lspconfig/README.md	/^# LSP overview$/;"	c
Layout	plugged/fzf/README.md	/^#### Layout$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Layout	plugged/fzf/src/options.go	/^	Layout      layoutType$/;"	m	struct:fzf.Options	typeref:typename:layoutType
LeadingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) LeadingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Left	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Left() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Left	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Left() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Left	plugged/fzf/src/tui/tui.go	/^	Left   bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Left	plugged/fzf/src/tui/tui.go	/^	Left$/;"	c	package:tui
Left	plugged/fzf/src/tui/tui.go	/^	Left() int$/;"	n	interface:tui.Window	typeref:typename:int
LeftClick	plugged/fzf/src/tui/tui.go	/^	LeftClick$/;"	c	package:tui
Len	plugged/fzf/src/result.go	/^func (a ByOrder) Len() int {$/;"	f	type:fzf.ByOrder	typeref:typename:int
Len	plugged/fzf/src/result.go	/^func (a ByRelevance) Len() int {$/;"	f	type:fzf.ByRelevance	typeref:typename:int
Len	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Len() int {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:int
Len	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Len() int {$/;"	f	type:fzf.byTimeOrder	typeref:typename:int
Length	plugged/fzf/src/merger.go	/^func (mg *Merger) Length() int {$/;"	f	struct:fzf.Merger	typeref:typename:int
Length	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Length() int {$/;"	f	struct:util.Chars	typeref:typename:int
Less	plugged/fzf/src/result.go	/^func (a ByOrder) Less(i, j int) bool {$/;"	f	type:fzf.ByOrder	typeref:typename:bool
Less	plugged/fzf/src/result.go	/^func (a ByRelevance) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevance	typeref:typename:bool
Less	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Less(i, j int) bool {$/;"	f	type:fzf.ByRelevanceTac	typeref:typename:bool
Less	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Less(i, j int) bool {$/;"	f	type:fzf.byTimeOrder	typeref:typename:bool
License	plugged/fzf.vim/README.md	/^License$/;"	s	chapter:fzf :heart: vim
License	plugged/fzf/BUILD.md	/^License$/;"	s	chapter:Building fzf
License	plugged/lightline.vim/README.md	/^## License$/;"	s	chapter:lightline.vim
License	plugged/rust.vim/README.md	/^## License$/;"	s	chapter:rust.vim
License	plugged/vim-abolish/README.markdown	/^## License$/;"	s	chapter:abolish.vim
License	plugged/vim-commentary/README.markdown	/^## License$/;"	s	chapter:commentary.vim
License	plugged/vim-fugitive/README.markdown	/^## License$/;"	s	chapter:fugitive.vim
License	plugged/vim-repeat/README.markdown	/^## License$/;"	s	chapter:repeat.vim
License	plugged/vim-sneak/README.md	/^License$/;"	s	chapter:sneak.vim :shoe:
License	plugged/vim-speeddating/README.markdown	/^## License$/;"	s	chapter:speeddating.vim
License	plugged/vim-surround/README.markdown	/^## License$/;"	s	chapter:surround.vim
Light256	plugged/fzf/src/tui/tui.go	/^	Light256  *ColorTheme$/;"	v	package:tui	typeref:typename:*ColorTheme
LightRenderer	plugged/fzf/src/tui/light.go	/^type LightRenderer struct {$/;"	s	package:tui
LightWindow	plugged/fzf/src/tui/light.go	/^type LightWindow struct {$/;"	s	package:tui
Lines are filepaths	plugged/vim-dirvish/README.md	/^### Lines are filepaths$/;"	S	section:dirvish.vim :zap:""Concepts
Lint	plugged/nvim-lspconfig/CONTRIBUTING.md	/^## Lint$/;"	s
Log tailing	plugged/fzf/ADVANCED.md	/^Log tailing$/;"	s	chapter:Advanced fzf examples
Lookup	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Lookup(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Loop	plugged/fzf/src/matcher.go	/^func (m *Matcher) Loop() {$/;"	f	struct:fzf.Matcher
Loop	plugged/fzf/src/terminal.go	/^func (t *Terminal) Loop() {$/;"	f	struct:fzf.Terminal
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:LoopParseArgs$/;"	l
LoopParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:LoopParseArgs$/;"	l
M._root._setup	plugged/nvim-lspconfig/lua/lspconfig.lua	/^function M._root._setup()$/;"	f
M._setup_buffer	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^  function M._setup_buffer(client_id, bufnr)$/;"	f
M.addCompleteItems	plugged/completion-nvim/lua/completion/source.lua	/^function M.addCompleteItems(key, complete_item)$/;"	f
M.addCompletionItems	plugged/completion-nvim/lua/completion/util.lua	/^function M.addCompletionItems(item_table, item)$/;"	f
M.addCompletionSource	plugged/completion-nvim/lua/completion.lua	/^M.addCompletionSource = function(key, completed_item)$/;"	f
M.add_hook_after	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.add_hook_after(func, new_fn)$/;"	f
M.add_hook_before	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.add_hook_before(func, new_fn)$/;"	f
M.autoCompletion	plugged/completion-nvim/lua/completion/source.lua	/^function M.autoCompletion()$/;"	f
M.autoOpenHoverInPopup	plugged/completion-nvim/lua/completion/hover.lua	/^M.autoOpenHoverInPopup = function()$/;"	f
M.autoOpenSignatureHelp	plugged/completion-nvim/lua/completion/signature_help.lua	/^M.autoOpenSignatureHelp = function()$/;"	f
M.autostart	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^    function M.autostart()$/;"	f
M.available_servers	plugged/nvim-lspconfig/lua/lspconfig.lua	/^function M.available_servers()$/;"	f
M.checkHealth	plugged/completion-nvim/lua/completion/chain_completion.lua	/^function M.checkHealth(complete_items_map)$/;"	f
M.checkHealth	plugged/completion-nvim/lua/completion/health.lua	/^function M.checkHealth()$/;"	f
M.checkHealth	plugged/completion-nvim/lua/completion/source.lua	/^function M.checkHealth()$/;"	f
M.checkHealth	plugged/completion-nvim/lua/completion/source/ins_complete.lua	/^M.checkHealth = function(mode)$/;"	f
M.checkTriggerCharacter	plugged/completion-nvim/lua/completion/util.lua	/^M.checkTriggerCharacter = function(line_to_cursor, trigger_character)$/;"	f
M.check_health	plugged/nvim-lspconfig/lua/lspconfig/health.lua	/^function M.check_health()$/;"	f
M.clearCache	plugged/completion-nvim/lua/completion/complete.lua	/^M.clearCache = function()$/;"	f
M.completionToggle	plugged/completion-nvim/lua/completion.lua	/^M.completionToggle = function()$/;"	f
M.confirmCompletion	plugged/completion-nvim/lua/completion.lua	/^function M.confirmCompletion(completed_item)$/;"	f
M.create_module_commands	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.create_module_commands(module_name, commands)$/;"	f
M.find_git_ancestor	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.find_git_ancestor(startpath)$/;"	f
M.find_node_modules_ancestor	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.find_node_modules_ancestor(startpath)$/;"	f
M.find_package_json_ancestor	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.find_package_json_ancestor(startpath)$/;"	f
M.focusable_float	plugged/completion-nvim/lua/completion/hover.lua	/^M.focusable_float = function(unique_name, fn)$/;"	f
M.fuzzy_score	plugged/completion-nvim/lua/completion/util.lua	/^function M.fuzzy_score(str1, str2)$/;"	f
M.getCallback	plugged/completion-nvim/lua/completion/source/lsp.lua	/^M.getCallback = function()$/;"	f
M.getCallback	plugged/completion-nvim/lua/completion/source/path.lua	/^M.getCallback = function()$/;"	f
M.getChainCompleteList	plugged/completion-nvim/lua/completion/chain_completion.lua	/^function M.getChainCompleteList(filetype)$/;"	f
M.getCompletionItems	plugged/completion-nvim/lua/completion/source/lsp.lua	/^M.getCompletionItems = function(_, _)$/;"	f
M.getCompletionItems	plugged/completion-nvim/lua/completion/source/path.lua	/^M.getCompletionItems = function(prefix)$/;"	f
M.getCompletionItems	plugged/completion-nvim/lua/completion/source/snippet.lua	/^M.getCompletionItems = function(prefix)$/;"	f
M.getNeosnippetItems	plugged/completion-nvim/lua/completion/source/snippet.lua	/^M.getNeosnippetItems = function(prefix)$/;"	f
M.getSnippetsNvimItems	plugged/completion-nvim/lua/completion/source/snippet.lua	/^M.getSnippetsNvimItems = function(prefix)$/;"	f
M.getUltisnipItems	plugged/completion-nvim/lua/completion/source/snippet.lua	/^M.getUltisnipItems = function(prefix)$/;"	f
M.getVsnipItems	plugged/completion-nvim/lua/completion/source/snippet.lua	/^M.getVsnipItems = function(prefix)$/;"	f
M.get_option	plugged/completion-nvim/lua/completion/option.lua	/^M.get_option = function(opt)$/;"	f
M.has_bins	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.has_bins(...)$/;"	f
M.insertCompletionItems	plugged/completion-nvim/lua/completion.lua	/^M.insertCompletionItems = function(completed_items, prefix, item)$/;"	f
M.is_list	plugged/completion-nvim/lua/completion/util.lua	/^function M.is_list(thing)$/;"	f
M.matching	plugged/completion-nvim/lua/completion/matching.lua	/^M.matching = function(complete_items, prefix, item)$/;"	f
M.nextCompletion	plugged/completion-nvim/lua/completion/source.lua	/^function M.nextCompletion()$/;"	f
M.nextSource	plugged/completion-nvim/lua/completion.lua	/^M.nextSource = function()$/;"	f
M.on_CompleteDone	plugged/completion-nvim/lua/completion.lua	/^function M.on_CompleteDone()$/;"	f
M.on_InsertCharPre	plugged/completion-nvim/lua/completion.lua	/^function M.on_InsertCharPre()$/;"	f
M.on_InsertEnter	plugged/completion-nvim/lua/completion.lua	/^function M.on_InsertEnter()$/;"	f
M.on_InsertLeave	plugged/completion-nvim/lua/completion.lua	/^function M.on_InsertLeave()$/;"	f
M.on_attach	plugged/completion-nvim/lua/completion.lua	/^M.on_attach = function(option)$/;"	f
M.path	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^M.path = (function()$/;"	f
M.performComplete	plugged/completion-nvim/lua/completion/complete.lua	/^M.performComplete = function(complete_source, complete_items_map, params)$/;"	f
M.prevCompletion	plugged/completion-nvim/lua/completion/source.lua	/^function M.prevCompletion()$/;"	f
M.prevSource	plugged/completion-nvim/lua/completion.lua	/^M.prevSource = function()$/;"	f
M.root_pattern	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.root_pattern(...)$/;"	f
M.script_path	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^M.script_path = function()$/;"	f
M.search_ancestors	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.search_ancestors(startpath, func)$/;"	f
M.server_per_root_dir_manager	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.server_per_root_dir_manager(_make_config)$/;"	f
M.set_option_table	plugged/completion-nvim/lua/completion/option.lua	/^M.set_option_table = function(opt)$/;"	f
M.setup	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^  function M.setup(config)$/;"	f
M.smart_s_tab	plugged/completion-nvim/lua/completion.lua	/^function M.smart_s_tab()$/;"	f
M.smart_tab	plugged/completion-nvim/lua/completion.lua	/^function M.smart_tab()$/;"	f
M.sort_completion_items	plugged/completion-nvim/lua/completion/util.lua	/^function M.sort_completion_items(items)$/;"	f
M.triggerCompletion	plugged/completion-nvim/lua/completion.lua	/^M.triggerCompletion = function()$/;"	f
M.triggerCompletion	plugged/completion-nvim/lua/completion/source.lua	/^function M.triggerCompletion(force)$/;"	f
M.triggerCompletion	plugged/completion-nvim/lua/completion/source/ins_complete.lua	/^M.triggerCompletion = function(mode)$/;"	f
M.triggerFunction	plugged/completion-nvim/lua/completion/source/lsp.lua	/^M.triggerFunction = function(_, params)$/;"	f
M.triggerFunction	plugged/completion-nvim/lua/completion/source/path.lua	/^M.triggerFunction = function(_, opt)$/;"	f
M.validate_bufnr	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^function M.validate_bufnr(bufnr)$/;"	f
MAKEFILE	plugged/fzf/Makefile	/^MAKEFILE       := $(realpath $(lastword $(MAKEFILE_LIST)))$/;"	m
MIDDLE_BLOCKS	plugged/ale/test/script/block-padding-checker	/^MIDDLE_BLOCKS = set(['else', 'elseif', 'catch', 'finally'])$/;"	v
MakeBorderStyle	plugged/fzf/src/tui/tui.go	/^func MakeBorderStyle(shape BorderShape, unicode bool) BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
MakeSlab	plugged/fzf/src/util/slab.go	/^func MakeSlab(size16 int, size32 int) *Slab {$/;"	f	package:util	typeref:typename:*Slab
MakeTransparentBorder	plugged/fzf/src/tui/tui.go	/^func MakeTransparentBorder() BorderStyle {$/;"	f	package:tui	typeref:typename:BorderStyle
Manual test setup instructions	plugged/delimitMate/test/README.md	/^# Manual test setup instructions$/;"	c
Mappings	plugged/fzf.vim/README.md	/^Mappings$/;"	s	chapter:fzf :heart: vim
Margin	plugged/fzf/src/options.go	/^	Margin      [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
MarkdownPreview	ftplugin/markdown.vim	/^augroup MarkdownPreview$/;"	a
Marker	plugged/fzf/src/options.go	/^	Marker      string$/;"	m	struct:fzf.Options	typeref:typename:string
Match	plugged/fzf/src/pattern.go	/^func (p *Pattern) Match(chunk *Chunk, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
Match	plugged/fzf/src/tui/tui.go	/^	Match        ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
MatchItem	plugged/fzf/src/pattern.go	/^func (p *Pattern) MatchItem(item *Item, withPos bool, slab *util.Slab) (*Result, []Offset, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:(*Result, []Offset, *[]int)
MatchRequest	plugged/fzf/src/matcher.go	/^type MatchRequest struct {$/;"	s	package:fzf
Matcher	plugged/fzf/src/matcher.go	/^type Matcher struct {$/;"	s	package:fzf
Matching Strategy	plugged/completion-nvim/README.md	/^### Matching Strategy$/;"	S	section:completion-nvim""Configuration
Max	plugged/fzf/src/util/util.go	/^func Max(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Max16	plugged/fzf/src/util/util.go	/^func Max16(first int16, second int16) int16 {$/;"	f	package:util	typeref:typename:int16
Max32	plugged/fzf/src/util/util.go	/^func Max32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MaxX	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxX() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxX() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxX() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxX	plugged/fzf/src/tui/tui.go	/^	MaxX() int$/;"	n	interface:tui.Renderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) MaxY() int      { return 0 }$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) MaxY() int {$/;"	f	struct:tui.LightRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) MaxY() int {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:int
MaxY	plugged/fzf/src/tui/tui.go	/^	MaxY() int$/;"	n	interface:tui.Renderer	typeref:typename:int
Merge	plugged/fzf/src/tui/dummy.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	plugged/fzf/src/tui/tcell.go	/^func (a Attr) Merge(b Attr) Attr {$/;"	f	type:tui.Attr	typeref:typename:Attr
Merge	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) Merge(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeAttr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeAttr(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
MergeNonDefault	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) MergeNonDefault(other ColorPair) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
Merger	plugged/fzf/src/merger.go	/^type Merger struct {$/;"	s	package:fzf
Min	plugged/fzf/src/util/util.go	/^func Min(first int, second int) int {$/;"	f	package:util	typeref:typename:int
Min32	plugged/fzf/src/util/util.go	/^func Min32(first int32, second int32) int32 {$/;"	f	package:util	typeref:typename:int32
MinHeight	plugged/fzf/src/options.go	/^	MinHeight   int$/;"	m	struct:fzf.Options	typeref:typename:int
Minimal init.vim or init.lua and code sample	plugged/nvim-lspconfig/.github/ISSUE_TEMPLATE/bug_report.md	/^### Minimal init.vim or init.lua and code sample$/;"	S
Minor improvements/fixes	plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.0
Minor improvements/fixes	plugged/fzf/CHANGELOG.md	/^### Minor improvements\/fixes$/;"	S	section:CHANGELOG""0.10.1
MixProject	plugged/ale/test/test-files/elixir/mix_project/mix.exs	/^defmodule Test.MixProject do$/;"	m
Mod	plugged/fzf/src/tui/tui.go	/^	Mod    bool$/;"	m	struct:tui.MouseEvent	typeref:typename:bool
Mode names are too long. Can I use shorter mode names?	plugged/lightline.vim/README.md	/^#### Mode names are too long. Can I use shorter mode names?$/;"	t	subsection:lightline.vim""Advanced configuration""more tips
Modified	plugged/lightline.vim/test/expand.vim	/^  function! Modified()$/;"	f
Motivation	plugged/nvim-lspconfig/.github/FEATURE_REQUEST_TEMPLATE/feature_request.md	/^### Motivation$/;"	S
Mouse	plugged/fzf/src/options.go	/^	Mouse       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Mouse	plugged/fzf/src/tui/tui.go	/^	Mouse$/;"	c	package:tui
MouseEvent	plugged/fzf/src/tui/tui.go	/^	MouseEvent *MouseEvent$/;"	m	struct:tui.Event	typeref:typename:*MouseEvent
MouseEvent	plugged/fzf/src/tui/tui.go	/^type MouseEvent struct {$/;"	s	package:tui
Move	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Move(y int, x int) {$/;"	f	struct:tui.LightWindow
Move	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Move(y int, x int) {$/;"	f	struct:tui.TcellWindow
Move	plugged/fzf/src/tui/tui.go	/^	Move(y int, x int)$/;"	n	interface:tui.Window
MoveAndClear	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.LightWindow
MoveAndClear	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) MoveAndClear(y int, x int) {$/;"	f	struct:tui.TcellWindow
MoveAndClear	plugged/fzf/src/tui/tui.go	/^	MoveAndClear(y int, x int)$/;"	n	interface:tui.Window
Multi	plugged/fzf/src/options.go	/^	Multi       int$/;"	m	struct:fzf.Options	typeref:typename:int
N	plugged/vim-slash/plugin/slash.vim	/^map  <expr> N    <sid>wrap('N')$/;"	m
NAME	plugged/delimitMate/Makefile	/^NAME     =  delimitMate$/;"	m
NAME	plugged/fzf/man/man1/fzf-tmux.1	/^.SH NAME$/;"	s	title:fzf-tmux
NAME	plugged/fzf/man/man1/fzf.1	/^.SH NAME$/;"	s	title:fzf
NeoVim on Unix	plugged/ale/README.md	/^#### NeoVim on Unix$/;"	t	subsection:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation""3.i. Installation with Vim package management
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.0
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.10.1
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.10
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.11
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.12
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.13
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.3
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.4
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.5
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.6
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.7
New features	plugged/fzf/CHANGELOG.md	/^### New features$/;"	S	section:CHANGELOG""0.9.9
NewAtomicBool	plugged/fzf/src/util/atomicbool.go	/^func NewAtomicBool(initialState bool) *AtomicBool {$/;"	f	package:util	typeref:typename:*AtomicBool
NewChunkCache	plugged/fzf/src/cache.go	/^func NewChunkCache() ChunkCache {$/;"	f	package:fzf	typeref:typename:ChunkCache
NewChunkList	plugged/fzf/src/chunklist.go	/^func NewChunkList(trans ItemBuilder) *ChunkList {$/;"	f	package:fzf	typeref:typename:*ChunkList
NewColorAttr	plugged/fzf/src/tui/tui.go	/^func NewColorAttr() ColorAttr {$/;"	f	package:tui	typeref:typename:ColorAttr
NewColorPair	plugged/fzf/src/tui/tui.go	/^func NewColorPair(fg Color, bg Color, attr Attr) ColorPair {$/;"	f	package:tui	typeref:typename:ColorPair
NewEventBox	plugged/fzf/src/util/eventbox.go	/^func NewEventBox() *EventBox {$/;"	f	package:util	typeref:typename:*EventBox
NewFullscreenRenderer	plugged/fzf/src/tui/tui.go	/^func NewFullscreenRenderer(theme *ColorTheme, forceBlack bool, mouse bool) Renderer {$/;"	f	package:tui	typeref:typename:Renderer
NewHistory	plugged/fzf/src/history.go	/^func NewHistory(path string, maxSize int) (*History, error) {$/;"	f	package:fzf	typeref:typename:(*History, error)
NewLightRenderer	plugged/fzf/src/tui/light.go	/^func NewLightRenderer(theme *ColorTheme, forceBlack bool, mouse bool, tabstop int, clearOnExit b/;"	f	package:tui	typeref:typename:Renderer
NewMatcher	plugged/fzf/src/matcher.go	/^func NewMatcher(patternBuilder func([]rune) *Pattern,$/;"	f	package:fzf	typeref:typename:*Matcher
NewMerger	plugged/fzf/src/merger.go	/^func NewMerger(pattern *Pattern, lists [][]Result, sorted bool, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
NewReader	plugged/fzf/src/reader.go	/^func NewReader(pusher func([]byte) bool, eventBox *util.EventBox, delimNil bool, wait bool) *Rea/;"	f	package:fzf	typeref:typename:*Reader
NewTerminal	plugged/fzf/src/terminal.go	/^func NewTerminal(opts *Options, eventBox *util.EventBox) *Terminal {$/;"	f	package:fzf	typeref:typename:*Terminal
NewWindow	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) NewWindow(top int, left int, width int, height int, preview bool, border/;"	f	struct:tui.LightRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) NewWindow(top int, left int, width int, height int, preview bool, b/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:Window
NewWindow	plugged/fzf/src/tui/tui.go	/^	NewWindow(top int, left int, width int, height int, preview bool, borderStyle BorderStyle) Wind/;"	n	interface:tui.Renderer	typeref:typename:Window
NoColorTheme	plugged/fzf/src/tui/tui.go	/^func NoColorTheme() *ColorTheme {$/;"	f	package:tui	typeref:typename:*ColorTheme
Normalize	plugged/fzf/src/options.go	/^	Normalize   bool$/;"	m	struct:fzf.Options	typeref:typename:bool
NormalizeRunes	plugged/fzf/src/algo/normalize.go	/^func NormalizeRunes(runes []rune) []rune {$/;"	f	package:algo	typeref:typename:[]rune
Note for developers of other plugins	plugged/lightline.vim/README.md	/^## Note for developers of other plugins$/;"	s	chapter:lightline.vim
Nth	plugged/fzf/src/options.go	/^	Nth         []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
O	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> O <NOP>$/;"	m
OPERATOR_END_RE	plugged/ale/test/script/block-padding-checker	/^OPERATOR_END_RE = re.compile(r'(&&|\\|\\||\\+|-|\\*\\| \/)$')$/;"	v
OPTIONS	plugged/fzf/man/man1/fzf.1	/^.SH OPTIONS$/;"	s	title:fzf
Offset	plugged/fzf/src/result.go	/^type Offset [2]int32$/;"	t	package:fzf	typeref:typename:[2]int32
OldHope	plugged/lightline.vim/colorscheme.md	/^### OldHope$/;"	S	chapter:Available Colorschemes
Once	plugged/fzf/src/util/util.go	/^func Once(nextResponse bool) func() bool {$/;"	f	package:util	typeref:typename:func() bool
Options	plugged/fzf/README.md	/^#### Options$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Options	plugged/fzf/src/options.go	/^type Options struct {$/;"	s	package:fzf
Overview	plugged/supertab/README.rst	/^Overview$/;"	c
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PAUSE_BEFORE_EXIT=1$/;"	v
PAUSE_BEFORE_EXIT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PAUSE_BEFORE_EXIT=0$/;"	v
PERL	plugged/delimitMate/Makefile	/^PERL     =  perl$/;"	m
PLUGIN	plugged/delimitMate/Makefile	/^PLUGIN   =  $(wildcard plugin\/*.vim)$/;"	m
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set POST_PROCESS_CMD=%~2$/;"	v
POST_PROCESS_CMD	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set POST_PROCESS_CMD=$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set PROJECT_ROOT=%~2$/;"	v
PROJECT_ROOT	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set PROJECT_ROOT=$/;"	v
PROJ_ROOT	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^    set PROJ_ROOT=%~2$/;"	v
PS1	plugged/fzf/test/test_go.rb	/^PS1= PROMPT_COMMAND= HISTFILE= HISTSIZE=100$/;"	C
Padding	plugged/fzf/src/options.go	/^	Padding     [4]sizeSpec$/;"	m	struct:fzf.Options	typeref:typename:[4]sizeSpec
PaperColor (`background=dark`)	plugged/lightline.vim/README.md	/^### PaperColor (`background=dark`)$/;"	S	chapter:lightline.vim
PaperColor (`background=dark`)	plugged/lightline.vim/colorscheme.md	/^### PaperColor (`background=dark`)$/;"	S	chapter:Available Colorschemes
PaperColor (`background=light`)	plugged/lightline.vim/README.md	/^### PaperColor (`background=light`)$/;"	S	chapter:lightline.vim
PaperColor (`background=light`)	plugged/lightline.vim/colorscheme.md	/^### PaperColor (`background=light`)$/;"	S	chapter:Available Colorschemes
ParseArgs	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:ParseArgs$/;"	l
ParseArgs	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:ParseArgs$/;"	l
ParseOptions	plugged/fzf/src/options.go	/^func ParseOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
ParseRange	plugged/fzf/src/tokenizer.go	/^func ParseRange(str *string) (Range, bool) {$/;"	f	package:fzf	typeref:typename:(Range, bool)
PassMerger	plugged/fzf/src/merger.go	/^func PassMerger(chunks *[]*Chunk, tac bool) *Merger {$/;"	f	package:fzf	typeref:typename:*Merger
Pattern	plugged/fzf/src/pattern.go	/^type Pattern struct {$/;"	s	package:fzf
Pause	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Pause(bool)        {}$/;"	f	unknown:tui.FullscreenRenderer
Pause	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Pause(clear bool) {$/;"	f	struct:tui.LightRenderer
Pause	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Pause(clear bool) {$/;"	f	unknown:tui.FullscreenRenderer
Pause	plugged/fzf/src/tui/tui.go	/^	Pause(clear bool)$/;"	n	interface:tui.Renderer
Peek	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Peek(event EventType) bool {$/;"	f	struct:util.EventBox	typeref:typename:bool
Per Server Setup	plugged/completion-nvim/README.md	/^### Per Server Setup$/;"	S	section:completion-nvim""Configuration
Performance	plugged/fzf/README.md	/^### Performance$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PgDn	plugged/fzf/src/tui/tui.go	/^	PgDn$/;"	c	package:tui
PgUp	plugged/fzf/src/tui/tui.go	/^	PgUp$/;"	c	package:tui
Phony	plugged/fzf/src/options.go	/^	Phony       bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Pointer	plugged/fzf/src/options.go	/^	Pointer     string$/;"	m	struct:fzf.Options	typeref:typename:string
Popup window support	plugged/fzf/ADVANCED.md	/^#### Popup window support$/;"	t	subsection:Advanced fzf examples""Screen Layout""`fzf-tmux`
PrefixMatch	plugged/fzf/src/algo/algo.go	/^func PrefixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Prepend	plugged/fzf/src/util/chars.go	/^func (chars *Chars) Prepend(prefix string) {$/;"	f	struct:util.Chars
Prerequisites	plugged/completion-nvim/README.md	/^## Prerequisites$/;"	s	chapter:completion-nvim
Prerequisites	plugged/fzf/BUILD.md	/^### Prerequisites$/;"	S	section:Building fzf""Build instructions
Preview	plugged/fzf/src/options.go	/^	Preview     previewOpts$/;"	m	struct:fzf.Options	typeref:typename:previewOpts
Preview window	plugged/fzf.vim/README.md	/^#### Preview window$/;"	t	subsection:fzf :heart: vim""Customization""Global options
Preview window	plugged/fzf/README.md	/^### Preview window$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
PreviewBg	plugged/fzf/src/tui/tui.go	/^	PreviewBg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
PreviewFg	plugged/fzf/src/tui/tui.go	/^	PreviewFg    ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Print	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Print(text string) {$/;"	f	struct:tui.LightWindow
Print	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Print(text string) {$/;"	f	struct:tui.TcellWindow
Print	plugged/fzf/src/tui/tui.go	/^	Print(text string)$/;"	n	interface:tui.Window
PrintQuery	plugged/fzf/src/options.go	/^	PrintQuery  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
PrintSep	plugged/fzf/src/options.go	/^	PrintSep    string$/;"	m	struct:fzf.Options	typeref:typename:string
Printer	plugged/fzf/src/options.go	/^	Printer     func(string)$/;"	m	struct:fzf.Options	typeref:typename:func(string)
Problem / Steps to reproduce	plugged/fzf/.github/ISSUE_TEMPLATE.md	/^## Problem \/ Steps to reproduce$/;"	s
Process IDs	plugged/fzf/README.md	/^#### Process IDs$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Projects	init.vim	/^command! Projects call fzf#run(fzf#wrap({$/;"	c
Prompt	plugged/fzf/src/options.go	/^	Prompt      string$/;"	m	struct:fzf.Options	typeref:typename:string
Prompt	plugged/fzf/src/tui/tui.go	/^	Prompt       ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Pros	plugged/fzf/README.md	/^Pros$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Protect	plugged/fzf/src/protector/protector.go	/^func Protect() {$/;"	f	package:protector
Protect	plugged/fzf/src/protector/protector_openbsd.go	/^func Protect() {$/;"	f	package:protector
Push	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Push(data []byte) bool {$/;"	f	struct:fzf.ChunkList	typeref:typename:bool
Pushing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Pushing$/;"	s	chapter:Contributing
Q	init.vim	/^nnoremap Q @@$/;"	m
Query	plugged/fzf/src/options.go	/^	Query       string$/;"	m	struct:fzf.Options	typeref:typename:string
Quickstart	plugged/nvim-lspconfig/README.md	/^## Quickstart$/;"	s	chapter:LSP overview
R	plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent> R :<C-U><C-R>=v:count ? ':let g:dirvish_mode='.v:count.'<Bar>' : ''<CR/;"	m
REPO	plugged/rust.vim/test/run-tests	/^REPO = "alonid\/vim-testbed"$/;"	v
REVISION	plugged/fzf/Makefile	/^REVISION       := $(FZF_REVISION)$/;"	m
REVISION	plugged/fzf/Makefile	/^REVISION       := $(shell git log -n 1 --pretty=format:%h -- $(SOURCES) 2> \/dev\/null)$/;"	m
ROOT_DIR	plugged/fzf/Makefile	/^ROOT_DIR       := $(shell dirname $(MAKEFILE))$/;"	m
RUN_TESTS	plugged/ale/run-tests.bat	/^:RUN_TESTS$/;"	l
Range	plugged/fzf/src/tokenizer.go	/^type Range struct {$/;"	s	package:fzf
Rationale	plugged/fzf.vim/README.md	/^Rationale$/;"	s	chapter:fzf :heart: vim
Read	plugged/fzf/src/util/util_unix.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
Read	plugged/fzf/src/util/util_windows.go	/^func Read(fd int, b []byte) (int, error) {$/;"	f	package:util	typeref:typename:(int, error)
ReadSource	plugged/fzf/src/reader.go	/^func (r *Reader) ReadSource() {$/;"	f	struct:fzf.Reader
ReadZero	plugged/fzf/src/options.go	/^	ReadZero    bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Reader	plugged/fzf/src/reader.go	/^type Reader struct {$/;"	s	package:fzf
Recommended Setting	plugged/completion-nvim/README.md	/^### Recommended Setting$/;"	S	section:completion-nvim""Configuration
RedoTerminal	init.vim	/^function! RedoTerminal()$/;"	f
Reduced initial memory footprint (#151)	plugged/fzf/CHANGELOG.md	/^#### Reduced initial memory footprint (#151)$/;"	t	subsection:CHANGELOG""0.9.5""Improvements
Reducer example	plugged/fzf.vim/README.md	/^### Reducer example$/;"	S	section:fzf :heart: vim""Custom completion
Refresh	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Refresh()          {}$/;"	f	unknown:tui.FullscreenRenderer
Refresh	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Refresh() {$/;"	f	struct:tui.LightRenderer
Refresh	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Refresh() {$/;"	f	struct:tui.LightWindow
Refresh	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Refresh() {$/;"	f	unknown:tui.FullscreenRenderer
Refresh	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Refresh() {$/;"	f	struct:tui.TcellWindow
Refresh	plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Renderer
Refresh	plugged/fzf/src/tui/tui.go	/^	Refresh()$/;"	n	interface:tui.Window
RefreshWindows	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {}$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) RefreshWindows(windows []Window) {$/;"	f	struct:tui.LightRenderer
RefreshWindows	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) RefreshWindows(windows []Window) {$/;"	f	unknown:tui.FullscreenRenderer
RefreshWindows	plugged/fzf/src/tui/tui.go	/^	RefreshWindows(windows []Window)$/;"	n	interface:tui.Renderer
Related	plugged/vim-sneak/README.md	/^Related$/;"	s	chapter:sneak.vim :shoe:
Related Projects	plugged/vim-gutentags/README.md	/^# Related Projects$/;"	c
Related projects	plugged/fzf/README.md	/^Related projects$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Reloading the candidate list	plugged/fzf/README.md	/^### Reloading the candidate list$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Advanced topics
Renderer	plugged/fzf/src/tui/tui.go	/^type Renderer interface {$/;"	i	package:tui
Reproducing the bug	plugged/ale/.github/ISSUE_TEMPLATE/report-a-bug.md	/^## Reproducing the bug$/;"	s
Requested feature	plugged/nvim-lspconfig/.github/FEATURE_REQUEST_TEMPLATE/feature_request.md	/^### Requested feature$/;"	S
Requirements	plugged/nvim-lspconfig/CONTRIBUTING.md	/^## Requirements$/;"	s
Reset	plugged/fzf/src/matcher.go	/^func (m *Matcher) Reset(chunks []*Chunk, patternRunes []rune, cancel bool, final bool, sort bool/;"	f	struct:fzf.Matcher
Resize	plugged/fzf/src/tui/tui.go	/^	Resize$/;"	c	package:tui
Respecting `.gitignore`	plugged/fzf/README.md	/^#### Respecting `.gitignore`$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Tips
Result	plugged/fzf/src/algo/algo.go	/^type Result struct {$/;"	s	package:algo
Result	plugged/fzf/src/result.go	/^type Result struct {$/;"	s	package:fzf
Resume	plugged/fzf/src/tui/dummy.go	/^func (r *FullscreenRenderer) Resume(bool, bool) {}$/;"	f	unknown:tui.FullscreenRenderer
Resume	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) Resume(clear bool, sigcont bool) {$/;"	f	struct:tui.LightRenderer
Resume	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) Resume(clear bool, sigcont bool) {$/;"	f	unknown:tui.FullscreenRenderer
Resume	plugged/fzf/src/tui/tui.go	/^	Resume(clear bool, sigcont bool)$/;"	n	interface:tui.Renderer
Reverse	plugged/fzf/src/tui/dummy.go	/^	Reverse   = Attr(1 << 6)$/;"	c	package:tui
Reverse	plugged/fzf/src/tui/tcell.go	/^	Reverse        = Attr(tcell.AttrReverse)$/;"	c	package:tui
Right	plugged/fzf/src/tui/tui.go	/^	Right$/;"	c	package:tui
RightClick	plugged/fzf/src/tui/tui.go	/^	RightClick$/;"	c	package:tui
Ripgrep integration	plugged/fzf/ADVANCED.md	/^Ripgrep integration$/;"	s	chapter:Advanced fzf examples
Run	plugged/fzf/src/core.go	/^func Run(opts *Options, version string, revision string) {$/;"	f	package:fzf
Rune	plugged/fzf/src/tui/tui.go	/^	Rune EventType = iota$/;"	c	package:tui	typeref:type:EventType
RunesToChars	plugged/fzf/src/util/chars.go	/^func RunesToChars(runes []rune) Chars {$/;"	f	package:util	typeref:typename:Chars
RunesWidth	plugged/fzf/src/util/util.go	/^func RunesWidth(runes []rune, prefixWidth int, tabstop int, limit int) (int, int) {$/;"	f	package:util	typeref:typename:(int, int)
Running a test under cursor	plugged/rust.vim/README.md	/^### Running a test under cursor$/;"	S	section:rust.vim""Features
Rust	plugged/rust.vim/ctags/rust.ctags	/^--langdef=Rust$/;"	l
RustCargoQuickFixHooks	plugged/rust.vim/compiler/cargo.vim	/^augroup RustCargoQuickFixHooks$/;"	a
RustEmitAsm	plugged/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)$/;"	c
RustEmitIr	plugged/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)$/;"	c
RustExpand	plugged/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Ex/;"	c
RustFmt	plugged/rust.vim/ftplugin/rust.vim	/^command! -bar -buffer RustFmt call rustfmt#Format()$/;"	c
RustFmtRange	plugged/rust.vim/ftplugin/rust.vim	/^command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)$/;"	c
RustInfo	plugged/rust.vim/ftplugin/rust.vim	/^command! -bar RustInfo call rust#debugging#Info()$/;"	c
RustInfoToClipboard	plugged/rust.vim/ftplugin/rust.vim	/^command! -bar RustInfoToClipboard call rust#debugging#InfoToClipboard()$/;"	c
RustInfoToFile	plugged/rust.vim/ftplugin/rust.vim	/^command! -bar -nargs=1 RustInfoToFile call rust#debugging#InfoToFile(<f-args>)$/;"	c
RustPlay	plugged/rust.vim/ftplugin/rust.vim	/^command! -range=% RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)$/;"	c
RustRun	plugged/rust.vim/ftplugin/rust.vim	/^command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)$/;"	c
RustTest	plugged/rust.vim/ftplugin/rust.vim	/^command! -buffer -nargs=* -count -bang RustTest call rust#Test(<q-mods>, <count>, <bang>0, <q-ar/;"	c
S	plugged/fzf/src/tui/tui.go	/^	S      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
S	plugged/vim-abolish/plugin/abolish.vim	/^  command -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete S$/;"	c
S	plugged/vim-sneak/plugin/sneak.vim	/^  nmap S <Plug>Sneak_S$/;"	m
S	plugged/vim-surround/plugin/surround.vim	/^  xmap S   <Plug>VSurround$/;"	m
SAME_INDENTATION_SET	plugged/ale/test/script/block-padding-checker	/^SAME_INDENTATION_SET = set(['\\\\'])$/;"	v
SDown	plugged/fzf/src/tui/tui.go	/^	SDown$/;"	c	package:tui
SED	plugged/delimitMate/Makefile	/^SED      =  $(shell command -v gsed || command -v sed)$/;"	m
SEE	plugged/fzf/man/man1/fzf.1	/^.SH SEE ALSO$/;"	s	title:fzf
SHELL	plugged/fzf/Makefile	/^SHELL          := bash$/;"	m
SHELL	plugged/supertab/Makefile	/^SHELL=\/bin\/bash$/;"	m
SHOW_RESULTS	plugged/ale/run-tests.bat	/^:SHOW_RESULTS$/;"	l
SLeft	plugged/fzf/src/tui/tui.go	/^	SLeft$/;"	c	package:tui
SOURCES	plugged/delimitMate/Makefile	/^SOURCES  =  $(PLUGIN)$/;"	m
SOURCES	plugged/fzf/Makefile	/^SOURCES        := $(wildcard *.go src\/*.go src\/*\/*.go) $(MAKEFILE)$/;"	m
SRight	plugged/fzf/src/tui/tui.go	/^	SRight$/;"	c	package:tui
START_BLOCKS	plugged/ale/test/script/block-padding-checker	/^START_BLOCKS = set(['if', 'for', 'while', 'try', 'function'])$/;"	v
SUp	plugged/fzf/src/tui/tui.go	/^	SUp$/;"	c	package:tui
SYNOPSIS	plugged/fzf/man/man1/fzf-tmux.1	/^.SH SYNOPSIS$/;"	s	title:fzf-tmux
SYNOPSIS	plugged/fzf/man/man1/fzf.1	/^.SH SYNOPSIS$/;"	s	title:fzf
Score	plugged/fzf/src/algo/algo.go	/^	Score int$/;"	m	struct:algo.Result	typeref:typename:int
Screen Layout	plugged/fzf/ADVANCED.md	/^Screen Layout$/;"	s	chapter:Advanced fzf examples
Screencasts	plugged/vim-fugitive/README.markdown	/^## Screencasts$/;"	s	chapter:fugitive.vim
Search	plugged/fzf/src/cache.go	/^func (cc *ChunkCache) Search(chunk *Chunk, key string) []Result {$/;"	f	struct:fzf.ChunkCache	typeref:typename:[]Result
Search syntax	plugged/fzf/README.md	/^#### Search syntax$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
Select1	plugged/fzf/src/options.go	/^	Select1     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Selected	plugged/fzf/src/tui/tui.go	/^	Selected     ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Self-Promotion	plugged/vim-abolish/README.markdown	/^## Self-Promotion$/;"	s	chapter:abolish.vim
Self-Promotion	plugged/vim-commentary/README.markdown	/^## Self-Promotion$/;"	s	chapter:commentary.vim
Self-Promotion	plugged/vim-fugitive/README.markdown	/^## Self-Promotion$/;"	s	chapter:fugitive.vim
Self-Promotion	plugged/vim-repeat/README.markdown	/^## Self-Promotion$/;"	s	chapter:repeat.vim
Self-Promotion	plugged/vim-speeddating/README.markdown	/^## Self-Promotion$/;"	s	chapter:speeddating.vim
Self-Promotion	plugged/vim-surround/README.markdown	/^## Self-Promotion$/;"	s	chapter:surround.vim
Set	plugged/fzf/src/util/atomicbool.go	/^func (a *AtomicBool) Set(newState bool) bool {$/;"	f	struct:util.AtomicBool	typeref:typename:bool
Set	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Set(event EventType, value interface{}) {$/;"	f	struct:util.EventBox
SetNonblock	plugged/fzf/src/util/util_unix.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
SetNonblock	plugged/fzf/src/util/util_windows.go	/^func SetNonblock(file *os.File, nonblock bool) {$/;"	f	package:util
Settings	plugged/fzf/README.md	/^#### Settings$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Setup	plugged/completion-nvim/README.md	/^## Setup$/;"	s	chapter:completion-nvim
Shdo	plugged/vim-dirvish/plugin/dirvish.vim	/^command! -nargs=* -complete=file -range -bang Shdo call dirvish#shdo(<bang>0 ? argv() : getline(/;"	c
Shell	plugged/fzf/test/test_go.rb	/^class Shell$/;"	c
ShowUsage	plugged/vim-gutentags/plat/unix/update_scopedb.sh	/^ShowUsage() {$/;"	f
ShowUsage	plugged/vim-gutentags/plat/unix/update_tags.sh	/^ShowUsage() {$/;"	f
Slab	plugged/fzf/src/util/slab.go	/^type Slab struct {$/;"	s	package:util
Snapshot	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) Snapshot() ([]*Chunk, int) {$/;"	f	struct:fzf.ChunkList	typeref:typename:([]*Chunk, int)
Sort	plugged/fzf/src/options.go	/^	Sort        int$/;"	m	struct:fzf.Options	typeref:typename:int
Sorting completion items	plugged/completion-nvim/README.md	/^### Sorting completion items$/;"	S	section:completion-nvim""Configuration
Source	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^class Source(Base):$/;"	c
Source browsing with [Tagbar][tgbr]	plugged/rust.vim/README.md	/^### Source browsing with [Tagbar][tgbr]$/;"	S	section:rust.vim""Features
SpeedDatingFormat	plugged/vim-speeddating/plugin/speeddating.vim	/^command! -bar -bang -count=0 -nargs=? SpeedDatingFormat :call s:add_format(<q-args>,<count>,<ban/;"	c
Spinner	plugged/fzf/src/tui/tui.go	/^	Spinner      ColorAttr$/;"	m	struct:tui.ColorTheme	typeref:typename:ColorAttr
Spirit of this plugin	plugged/lightline.vim/README.md	/^## Spirit of this plugin$/;"	s	chapter:lightline.vim
Start	plugged/fzf/src/algo/algo.go	/^	Start int$/;"	m	struct:algo.Result	typeref:typename:int
Start Vim with a minimal configuration	plugged/fzf.vim/.github/ISSUE_TEMPLATE.md	/^Start Vim with a minimal configuration$/;"	c
Starting fzf in a popup window	plugged/fzf/README-VIM.md	/^### Starting fzf in a popup window$/;"	S	section:FZF Vim integration""Tips
Status line of terminal buffer	plugged/fzf.vim/README.md	/^Status line of terminal buffer$/;"	s	chapter:fzf :heart: vim
String	plugged/fzf/src/pattern.go	/^func (t term) String() string {$/;"	f	struct:fzf.term	typeref:typename:string
String	plugged/fzf/src/tokenizer.go	/^func (d Delimiter) String() string {$/;"	f	struct:fzf.Delimiter	typeref:typename:string
String	plugged/fzf/src/tokenizer.go	/^func (t Token) String() string {$/;"	f	struct:fzf.Token	typeref:typename:string
String	plugged/fzf/src/util/chars.go	/^func (chars *Chars) String() string {$/;"	f	struct:util.Chars	typeref:typename:string
Style	plugged/fzf/src/tui/tcell.go	/^func (c Color) Style() tcell.Color {$/;"	f	unknown:tui.Color	typeref:typename:tcell.Color
Substitution	plugged/vim-abolish/README.markdown	/^## Substitution$/;"	s	chapter:abolish.vim
Subvert	plugged/vim-abolish/plugin/abolish.vim	/^command! -nargs=1 -bang -bar -range=0 -complete=custom,s:SubComplete Subvert$/;"	c
SuffixMatch	plugged/fzf/src/algo/algo.go	/^func SuffixMatch(caseSensitive bool, normalize bool, forward bool, text *util.Chars, pattern []r/;"	f	package:algo	typeref:typename:(Result, *[]int)
Summary	plugged/fzf/README-VIM.md	/^Summary$/;"	s	chapter:FZF Vim integration
SuperTab	plugged/supertab/plugin/supertab.vim	/^function! SuperTab(command) " {{{$/;"	f
SuperTabAlternateCompletion	plugged/supertab/plugin/supertab.vim	/^function! SuperTabAlternateCompletion(type) " {{{$/;"	f
SuperTabChain	plugged/supertab/plugin/supertab.vim	/^function! SuperTabChain(completefunc, completekeys, ...) " {{{$/;"	f
SuperTabCodeComplete	plugged/supertab/plugin/supertab.vim	/^function! SuperTabCodeComplete(findstart, base) " {{{$/;"	f
SuperTabHelp	plugged/supertab/plugin/supertab.vim	/^    command SuperTabHelp :call <SID>SuperTabHelp()$/;"	c
SuperTabLongestHighlight	plugged/supertab/plugin/supertab.vim	/^function! SuperTabLongestHighlight(dir) " {{{$/;"	f
SuperTabSetCompletionType	plugged/supertab/plugin/supertab.vim	/^function! SuperTabSetCompletionType(type) " {{{$/;"	f
SuperTabSetDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^function! SuperTabSetDefaultCompletionType(type) " {{{$/;"	f
Supported Completion Source	plugged/completion-nvim/README.md	/^## Supported Completion Source$/;"	s	chapter:completion-nvim
Supported commands	plugged/fzf/README.md	/^#### Supported commands$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Fuzzy completion for bash and zsh
Swap	plugged/fzf/src/result.go	/^func (a ByOrder) Swap(i, j int) {$/;"	f	type:fzf.ByOrder
Swap	plugged/fzf/src/result.go	/^func (a ByRelevance) Swap(i, j int) {$/;"	f	type:fzf.ByRelevance
Swap	plugged/fzf/src/result.go	/^func (a ByRelevanceTac) Swap(i, j int) {$/;"	f	type:fzf.ByRelevanceTac
Swap	plugged/fzf/src/terminal.go	/^func (a byTimeOrder) Swap(i, j int) {$/;"	f	type:fzf.byTimeOrder
Switching to fzf-only search mode	plugged/fzf/ADVANCED.md	/^### Switching to fzf-only search mode$/;"	S	section:Advanced fzf examples""Ripgrep integration
SynStack	init.vim	/^function! SynStack()$/;"	f
Sync	plugged/fzf/src/options.go	/^	Sync        bool$/;"	m	struct:fzf.Options	typeref:typename:bool
SyntaxCheckers_rust_cargo_GetLocList	plugged/rust.vim/syntax_checkers/rust/cargo.vim	/^function! SyntaxCheckers_rust_cargo_GetLocList() dict$/;"	f
SyntaxCheckers_rust_cargo_IsAvailable	plugged/rust.vim/syntax_checkers/rust/cargo.vim	/^function! SyntaxCheckers_rust_cargo_IsAvailable() dict$/;"	f
SyntaxCheckers_rust_rustc_GetLocList	plugged/rust.vim/syntax_checkers/rust/rustc.vim	/^function! SyntaxCheckers_rust_rustc_GetLocList() dict$/;"	f
T	init.vim	/^command! -nargs=* T split | terminal <args>$/;"	c
TAG	plugged/rust.vim/test/run-tests	/^TAG = "10-rust.vim"$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set TAGS_FILE=%~2$/;"	v
TAGS_FILE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set TAGS_FILE=tags$/;"	v
TEMPLATE	plugged/fzf/test/test_go.rb	/^TEMPLATE = DATA.read$/;"	C
TEMPNAME	plugged/fzf/test/test_go.rb	/^  TEMPNAME = '\/tmp\/output'$/;"	C	class:TestBase
TERMINATORS	plugged/ale/test/script/block-padding-checker	/^TERMINATORS = set(['return', 'throw'])$/;"	v
Tab	plugged/fzf/src/tui/tui.go	/^	Tab$/;"	c	package:tui
Table of Contents	plugged/ale/README.md	/^## Table of Contents$/;"	s	chapter:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)
Table of Contents	plugged/fzf/README.md	/^Table of Contents$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tabstop	plugged/fzf/src/options.go	/^	Tabstop     int$/;"	m	struct:fzf.Options	typeref:typename:int
Tac	plugged/fzf/src/options.go	/^	Tac         bool$/;"	m	struct:fzf.Options	typeref:typename:bool
TcellWindow	plugged/fzf/src/tui/tcell.go	/^type TcellWindow struct {$/;"	s	package:tui
Terminal	plugged/fzf/src/terminal.go	/^type Terminal struct {$/;"	s	package:fzf
TestAdditiveExpect	plugged/fzf/src/options_test.go	/^func TestAdditiveExpect(t *testing.T) {$/;"	f	package:fzf
TestAnsiCodeStringConversion	plugged/fzf/src/ansi_test.go	/^func TestAnsiCodeStringConversion(t *testing.T) {$/;"	f	package:fzf
TestAtomicBool	plugged/fzf/src/util/atomicbool_test.go	/^func TestAtomicBool(t *testing.T) {$/;"	f	package:util
TestBase	plugged/fzf/test/test_go.rb	/^class TestBase < Minitest::Test$/;"	c
TestBash	plugged/fzf/test/test_go.rb	/^class TestBash < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
TestBind	plugged/fzf/src/options_test.go	/^func TestBind(t *testing.T) {$/;"	f	package:fzf
TestCacheKey	plugged/fzf/src/pattern_test.go	/^func TestCacheKey(t *testing.T) {$/;"	f	package:fzf
TestCacheable	plugged/fzf/src/pattern_test.go	/^func TestCacheable(t *testing.T) {$/;"	f	package:fzf
TestCaseSensitivity	plugged/fzf/src/pattern_test.go	/^func TestCaseSensitivity(t *testing.T) {$/;"	f	package:fzf
TestCharsLength	plugged/fzf/src/util/chars_test.go	/^func TestCharsLength(t *testing.T) {$/;"	f	package:util
TestCharsToString	plugged/fzf/src/util/chars_test.go	/^func TestCharsToString(t *testing.T) {$/;"	f	package:util
TestChunkCache	plugged/fzf/src/cache_test.go	/^func TestChunkCache(t *testing.T) {$/;"	f	package:fzf
TestChunkList	plugged/fzf/src/chunklist_test.go	/^func TestChunkList(t *testing.T) {$/;"	f	package:fzf
TestColorOffset	plugged/fzf/src/result_test.go	/^func TestColorOffset(t *testing.T) {$/;"	f	package:fzf
TestColorSpec	plugged/fzf/src/options_test.go	/^func TestColorSpec(t *testing.T) {$/;"	f	package:fzf
TestContrain	plugged/fzf/src/util/util_test.go	/^func TestContrain(t *testing.T) {$/;"	f	package:util
TestDefaultCtrlNP	plugged/fzf/src/options_test.go	/^func TestDefaultCtrlNP(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegex	plugged/fzf/src/options_test.go	/^func TestDelimiterRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexRegex	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexRegex(t *testing.T) {$/;"	f	package:fzf
TestDelimiterRegexString	plugged/fzf/src/options_test.go	/^func TestDelimiterRegexString(t *testing.T) {$/;"	f	package:fzf
TestEmptyMerger	plugged/fzf/src/merger_test.go	/^func TestEmptyMerger(t *testing.T) {$/;"	f	package:fzf
TestEmptyPattern	plugged/fzf/src/algo/algo_test.go	/^func TestEmptyPattern(t *testing.T) {$/;"	f	package:algo
TestEqual	plugged/fzf/src/pattern_test.go	/^func TestEqual(t *testing.T) {$/;"	f	package:fzf
TestEventBox	plugged/fzf/src/util/eventbox_test.go	/^func TestEventBox(t *testing.T) {$/;"	f	package:util
TestExact	plugged/fzf/src/pattern_test.go	/^func TestExact(t *testing.T) {$/;"	f	package:fzf
TestExactMatchNaive	plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaive(t *testing.T) {$/;"	f	package:algo
TestExactMatchNaiveBackward	plugged/fzf/src/algo/algo_test.go	/^func TestExactMatchNaiveBackward(t *testing.T) {$/;"	f	package:algo
TestExtractColor	plugged/fzf/src/ansi_test.go	/^func TestExtractColor(t *testing.T) {$/;"	f	package:fzf
TestFish	plugged/fzf/test/test_go.rb	/^class TestFish < TestBase$/;"	c	mixin:include:TestShell
TestFuzzyMatch	plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatch(t *testing.T) {$/;"	f	package:algo
TestFuzzyMatchBackward	plugged/fzf/src/algo/algo_test.go	/^func TestFuzzyMatchBackward(t *testing.T) {$/;"	f	package:algo
TestGoFZF	plugged/fzf/test/test_go.rb	/^class TestGoFZF < TestBase$/;"	c
TestHexToColor	plugged/fzf/src/tui/tui_test.go	/^func TestHexToColor(t *testing.T) {$/;"	f	package:tui
TestHistory	plugged/fzf/src/history_test.go	/^func TestHistory(t *testing.T) {$/;"	f	package:fzf
TestIrrelevantNth	plugged/fzf/src/options_test.go	/^func TestIrrelevantNth(t *testing.T) {$/;"	f	package:fzf
TestLongString	plugged/fzf/src/algo/algo_test.go	/^func TestLongString(t *testing.T) {$/;"	f	package:algo
TestMax	plugged/fzf/src/util/util_test.go	/^func TestMax(t *testing.T) {$/;"	f	package:util
TestMergerSorted	plugged/fzf/src/merger_test.go	/^func TestMergerSorted(t *testing.T) {$/;"	f	package:fzf
TestMergerUnsorted	plugged/fzf/src/merger_test.go	/^func TestMergerUnsorted(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Modified	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Modified(t *testing.T) {$/;"	f	package:fzf
TestNextAnsiEscapeSequence_Fuzz_Random	plugged/fzf/src/ansi_test.go	/^func TestNextAnsiEscapeSequence_Fuzz_Random(t *testing.T) {$/;"	f	package:fzf
TestNormalize	plugged/fzf/src/algo/algo_test.go	/^func TestNormalize(t *testing.T) {$/;"	f	package:algo
TestOffsetSort	plugged/fzf/src/result_test.go	/^func TestOffsetSort(t *testing.T) {$/;"	f	package:fzf
TestOnce	plugged/fzf/src/util/util_test.go	/^func TestOnce(t *testing.T) {$/;"	f	package:util
TestOrigTextAndTransformed	plugged/fzf/src/pattern_test.go	/^func TestOrigTextAndTransformed(t *testing.T) {$/;"	f	package:fzf
TestParseAnsiCode	plugged/fzf/src/ansi_test.go	/^func TestParseAnsiCode(t *testing.T) {$/;"	f	package:fzf
TestParseKeys	plugged/fzf/src/options_test.go	/^func TestParseKeys(t *testing.T) {$/;"	f	package:fzf
TestParseKeysWithComma	plugged/fzf/src/options_test.go	/^func TestParseKeysWithComma(t *testing.T) {$/;"	f	package:fzf
TestParseRange	plugged/fzf/src/tokenizer_test.go	/^func TestParseRange(t *testing.T) {$/;"	f	package:fzf
TestParseTermsEmpty	plugged/fzf/src/pattern_test.go	/^func TestParseTermsEmpty(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtended	plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtended(t *testing.T) {$/;"	f	package:fzf
TestParseTermsExtendedExact	plugged/fzf/src/pattern_test.go	/^func TestParseTermsExtendedExact(t *testing.T) {$/;"	f	package:fzf
TestPrefixMatch	plugged/fzf/src/algo/algo_test.go	/^func TestPrefixMatch(t *testing.T) {$/;"	f	package:algo
TestPreviewOpts	plugged/fzf/src/options_test.go	/^func TestPreviewOpts(t *testing.T) {$/;"	f	package:fzf
TestQuoteEntryCmd	plugged/fzf/src/terminal_test.go	/^func TestQuoteEntryCmd(t *testing.T) {$/;"	f	package:fzf
TestRankComparison	plugged/fzf/src/result_test.go	/^func TestRankComparison(t *testing.T) {$/;"	f	package:fzf
TestReadFromCommand	plugged/fzf/src/reader_test.go	/^func TestReadFromCommand(t *testing.T) {$/;"	f	package:fzf
TestReplacePlaceholder	plugged/fzf/src/terminal_test.go	/^func TestReplacePlaceholder(t *testing.T) {$/;"	f	package:fzf
TestResultRank	plugged/fzf/src/result_test.go	/^func TestResultRank(t *testing.T) {$/;"	f	package:fzf
TestShell	plugged/fzf/test/test_go.rb	/^module TestShell$/;"	m
TestSplitNth	plugged/fzf/src/options_test.go	/^func TestSplitNth(t *testing.T) {$/;"	f	package:fzf
TestStringPtr	plugged/fzf/src/item_test.go	/^func TestStringPtr(t *testing.T) {$/;"	f	package:fzf
TestSuffixMatch	plugged/fzf/src/algo/algo_test.go	/^func TestSuffixMatch(t *testing.T) {$/;"	f	package:algo
TestSuperTabCodeComplete	plugged/supertab/plugin/supertab.vim	/^function! TestSuperTabCodeComplete(findstart, base) " {{{$/;"	f
TestToCharsAscii	plugged/fzf/src/util/chars_test.go	/^func TestToCharsAscii(t *testing.T) {$/;"	f	package:util
TestToggle	plugged/fzf/src/options_test.go	/^func TestToggle(t *testing.T) {$/;"	f	package:fzf
TestTokenize	plugged/fzf/src/tokenizer_test.go	/^func TestTokenize(t *testing.T) {$/;"	f	package:fzf
TestTransform	plugged/fzf/src/tokenizer_test.go	/^func TestTransform(t *testing.T) {$/;"	f	package:fzf
TestTransformIndexOutOfBounds	plugged/fzf/src/tokenizer_test.go	/^func TestTransformIndexOutOfBounds(t *testing.T) {$/;"	f	package:fzf
TestTrimLength	plugged/fzf/src/util/chars_test.go	/^func TestTrimLength(t *testing.T) {$/;"	f	package:util
TestValidateSign	plugged/fzf/src/options_test.go	/^func TestValidateSign(t *testing.T) {$/;"	f	package:fzf
TestZsh	plugged/fzf/test/test_go.rb	/^class TestZsh < TestBase$/;"	c	mixin:include:TestShell,include:CompletionTest
Testing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Testing$/;"	s	chapter:Contributing
The wiki	plugged/nvim-lspconfig/README.md	/^## The wiki$/;"	s	chapter:LSP overview
Theme	plugged/fzf/src/options.go	/^	Theme       *tui.ColorTheme$/;"	m	struct:fzf.Options	typeref:typename:*tui.ColorTheme
Third-party libraries used	plugged/fzf/BUILD.md	/^Third-party libraries used$/;"	s	chapter:Building fzf
Timer Adjustment	plugged/completion-nvim/README.md	/^### Timer Adjustment$/;"	S	section:completion-nvim""Configuration
Tips	plugged/fzf/README-VIM.md	/^Tips$/;"	s	chapter:FZF Vim integration
Tips	plugged/fzf/README.md	/^Tips$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Tmux	plugged/fzf/test/test_go.rb	/^class Tmux$/;"	c
ToChars	plugged/fzf/src/util/chars.go	/^func ToChars(bytes []byte) Chars {$/;"	f	package:util	typeref:typename:Chars
ToRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
ToString	plugged/fzf/src/ansi.go	/^func (s *ansiState) ToString() string {$/;"	f	struct:fzf.ansiState	typeref:typename:string
ToString	plugged/fzf/src/util/chars.go	/^func (chars *Chars) ToString() string {$/;"	f	struct:util.Chars	typeref:typename:string
ToggleSort	plugged/fzf/src/options.go	/^	ToggleSort  bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Toggling between data sources	plugged/fzf/ADVANCED.md	/^### Toggling between data sources$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Token	plugged/fzf/src/tokenizer.go	/^type Token struct {$/;"	s	package:fzf
Tokenize	plugged/fzf/src/tokenizer.go	/^func Tokenize(text string, delimiter Delimiter) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Tomorrow	plugged/lightline.vim/colorscheme.md	/^### Tomorrow$/;"	S	chapter:Available Colorschemes
Tomorrow_Night	plugged/lightline.vim/colorscheme.md	/^### Tomorrow_Night$/;"	S	chapter:Available Colorschemes
Tomorrow_Night_Blue	plugged/lightline.vim/colorscheme.md	/^### Tomorrow_Night_Blue$/;"	S	chapter:Available Colorschemes
Tomorrow_Night_Bright	plugged/lightline.vim/colorscheme.md	/^### Tomorrow_Night_Bright$/;"	S	chapter:Available Colorschemes
Tomorrow_Night_Eighties	plugged/lightline.vim/colorscheme.md	/^### Tomorrow_Night_Eighties$/;"	S	chapter:Available Colorschemes
Top	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Top() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Top	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Top() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Top	plugged/fzf/src/tui/tui.go	/^	Top() int$/;"	n	interface:tui.Window	typeref:typename:int
TrailingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrailingWhitespaces() int {$/;"	f	struct:util.Chars	typeref:typename:int
Transform	plugged/fzf/src/tokenizer.go	/^func Transform(tokens []Token, withNth []Range) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
Trigger Characters	plugged/completion-nvim/README.md	/^### Trigger Characters$/;"	S	section:completion-nvim""Configuration
Trigger keyword length	plugged/completion-nvim/README.md	/^### Trigger keyword length$/;"	S	section:completion-nvim""Configuration
Trigger on delete	plugged/completion-nvim/README.md	/^### Trigger on delete$/;"	S	section:completion-nvim""Configuration
TrimLength	plugged/fzf/src/item.go	/^func (item *Item) TrimLength() uint16 {$/;"	f	struct:fzf.Item	typeref:typename:uint16
TrimLength	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimLength() uint16 {$/;"	f	struct:util.Chars	typeref:typename:uint16
TrimTrailingWhitespaces	plugged/fzf/src/util/chars.go	/^func (chars *Chars) TrimTrailingWhitespaces() {$/;"	f	struct:util.Chars
Trouble Shooting	plugged/completion-nvim/README.md	/^## Trouble Shooting$/;"	s	chapter:completion-nvim
TtyIn	plugged/fzf/src/tui/ttyname_unix.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
TtyIn	plugged/fzf/src/tui/ttyname_windows.go	/^func TtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
Type	plugged/fzf/src/tui/tui.go	/^	Type       EventType$/;"	m	struct:tui.Event	typeref:typename:EventType
U	init.vim	/^noremap U <C-r>$/;"	m
U	plugged/vim-repeat/autoload/repeat.vim	/^    nmap U <Plug>(RepeatUndoLine)$/;"	m
UNAME_M	plugged/fzf/Makefile	/^UNAME_M := $(shell uname -m)$/;"	m
UNSETS	plugged/fzf/test/test_go.rb	/^UNSETS = %w[$/;"	C
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^    set UPDATED_SOURCE=%~2$/;"	v
UPDATED_SOURCE	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^set UPDATED_SOURCE=$/;"	v
Underline	plugged/fzf/src/tui/dummy.go	/^	Underline = Attr(1 << 3)$/;"	c	package:tui
Underline	plugged/fzf/src/tui/tcell.go	/^	Underline      = Attr(tcell.AttrUnderline)$/;"	c	package:tui
Unicode	plugged/fzf/src/options.go	/^	Unicode     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Unlock	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Unlock$/;"	l
Unwatch	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Unwatch(events ...EventType) {$/;"	f	struct:util.EventBox
Up	plugged/fzf/src/tui/tui.go	/^	Up$/;"	c	package:tui
UpdateCount	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateCount(cnt int, final bool, failedCommand *string) {$/;"	f	struct:fzf.Terminal
UpdateHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateHeader(header []string) {$/;"	f	struct:fzf.Terminal
UpdateList	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateList(merger *Merger, reset bool) {$/;"	f	struct:fzf.Terminal
UpdateProgress	plugged/fzf/src/terminal.go	/^func (t *Terminal) UpdateProgress(progress float32) {$/;"	f	struct:fzf.Terminal
Updating the list of processes by pressing CTRL-R	plugged/fzf/ADVANCED.md	/^### Updating the list of processes by pressing CTRL-R$/;"	S	section:Advanced fzf examples""Dynamic reloading of the list
Upgrading fzf	plugged/fzf/README.md	/^Upgrading fzf$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	plugged/fzf/README.md	/^Usage$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
Usage	plugged/vim-gutentags/plat/win32/update_scopedb.cmd	/^:Usage$/;"	l
Usage	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^:Usage$/;"	l
Usage	plugged/vim-sneak/README.md	/^Usage$/;"	s	chapter:sneak.vim :shoe:
Using Homebrew	plugged/fzf/README.md	/^### Using Homebrew$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Linux package managers	plugged/fzf/README.md	/^### Using Linux package managers$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using Makefile	plugged/fzf/BUILD.md	/^### Using Makefile$/;"	S	section:Building fzf""Build instructions
Using [vim-plug](https://github.com/junegunn/vim-plug)	plugged/fzf.vim/README.md	/^### Using [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:fzf :heart: vim""Installation
Using fzf as the secondary filter	plugged/fzf/ADVANCED.md	/^### Using fzf as the secondary filter$/;"	S	section:Advanced fzf examples""Ripgrep integration
Using git	plugged/fzf/README.md	/^### Using git$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Using the finder	plugged/fzf/README.md	/^#### Using the finder$/;"	t	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Usage
VADER_OUTPUT_FILE	plugged/ale/run-tests.bat	/^set VADER_OUTPUT_FILE=%~dp0\\vader_output$/;"	v
VERSION	plugged/delimitMate/Makefile	/^VERSION  =  $(shell $(SED) -n -e '\/Current \\+release\/{s\/^ \\+\\([0-9.]\\+\\).*\/\\1\/;p;}' $/;"	m
VERSION	plugged/fzf/Makefile	/^VERSION        := $(FZF_VERSION)$/;"	m
VERSION	plugged/fzf/Makefile	/^VERSION        := $(shell git describe --abbrev=0 2> \/dev\/null)$/;"	m
VERSION_REGEX	plugged/fzf/Makefile	/^VERSION_REGEX  := $(subst .,\\.,$(VERSION_TRIM))$/;"	m
VERSION_TRIM	plugged/fzf/Makefile	/^VERSION_TRIM   := $(shell sed "s\/-.*\/\/" <<< $(VERSION))$/;"	m
VIM	plugged/delimitMate/Makefile	/^VIM      =  vim$/;"	m
VIM	plugged/vim-sneak/Makefile	/^VIM = vim -N -u NORC -i NONE --cmd 'set rtp+=tests\/vim-vader rtp+=tests\/vim-repeat rtp+=tests\//;"	m
VT	init.vim	/^command! -nargs=* VT vsplit | terminal <args>$/;"	c
Version	plugged/fzf/src/options.go	/^	Version     bool$/;"	m	struct:fzf.Options	typeref:typename:bool
Vim 8 on Unix	plugged/ale/README.md	/^#### Vim 8 on Unix$/;"	t	subsection:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation""3.i. Installation with Vim package management
Vim 8 on Windows	plugged/ale/README.md	/^#### Vim 8 on Windows$/;"	t	subsection:Asynchronous Lint Engine [![GitHub Build Status](https://github.com/dense-analysis/ale/workflows/CI/badge.svg)](https://github.com/dense-analysis/ale/actions?query=event%3Apush+workflow%3ACI+branch%3Amaster++) [![AppVeyor Build Status](https://ci.appveyor.com/api/projects/status/r0ef1xu8xjmik58d/branch/master?svg=true)](https://ci.appveyor.com/project/dense-analysis/ale) [![Join the chat at https://gitter.im/vim-ale/Lobby](https://badges.gitter.im/vim-ale/Lobby.svg)](https://gitter.im/vim-ale/Lobby?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)""3. Installation""3.i. Installation with Vim package management
Vim functions	plugged/fzf.vim/README.md	/^#### Vim functions$/;"	t	subsection:fzf :heart: vim""Customization""Advanced customization
Vim plugin	plugged/fzf/README.md	/^Vim plugin$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
VimMock	plugged/ale/test/python/test_deoplete_source.py	/^class VimMock(object):$/;"	c
WHITESPACE_AFTER_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_AFTER_SET = END_BLOCKS$/;"	v
WHITESPACE_BEFORE_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_BEFORE_SET = START_BLOCKS | TERMINATORS$/;"	v
WHITESPACE_FORBIDDEN_AFTER_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_AFTER_SET = START_BLOCKS | MIDDLE_BLOCKS$/;"	v
WHITESPACE_FORBIDDEN_BEFORE_SET	plugged/ale/test/script/block-padding-checker	/^WHITESPACE_FORBIDDEN_BEFORE_SET = END_BLOCKS | MIDDLE_BLOCKS$/;"	v
Wait	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Wait(callback func(*Events)) {$/;"	f	struct:util.EventBox
WaitFor	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) WaitFor(event EventType) {$/;"	f	struct:util.EventBox
Watch	plugged/fzf/src/util/eventbox.go	/^func (b *EventBox) Watch(events ...EventType) {$/;"	f	struct:util.EventBox
What went wrong	plugged/ale/.github/ISSUE_TEMPLATE/report-a-bug.md	/^## What went wrong$/;"	s
What?	plugged/vim-gutentags/README.md	/^## What?$/;"	s	chapter:Gutentags
Where can I find the default components?	plugged/lightline.vim/README.md	/^#### Where can I find the default components?$/;"	t	subsection:lightline.vim""Advanced configuration""more tips
Why not use `/`?	plugged/vim-sneak/README.md	/^### Why not use `\/`?$/;"	S	section:sneak.vim :shoe:""FAQ
Why not use `f`?	plugged/vim-sneak/README.md	/^### Why not use `f`?$/;"	S	section:sneak.vim :shoe:""FAQ
Why yet another clone of powerline?	plugged/lightline.vim/README.md	/^## Why yet another clone of powerline?$/;"	s	chapter:lightline.vim
Why you should use fzf on Vim	plugged/fzf.vim/README.md	/^Why you should use fzf on Vim$/;"	s	chapter:fzf :heart: vim
Why?	plugged/vim-gutentags/README.md	/^## Why?$/;"	s	chapter:Gutentags
Width	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Width() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Width	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Width() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Width	plugged/fzf/src/tui/tui.go	/^	Width() int$/;"	n	interface:tui.Window	typeref:typename:int
Window	plugged/fzf/src/tui/tui.go	/^type Window interface {$/;"	i	package:tui
Windows	plugged/fzf/README.md	/^### Windows$/;"	S	section:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)""Installation
Windows	plugged/nvim-lspconfig/README.md	/^## Windows$/;"	s	chapter:LSP overview
WithAttr	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) WithAttr(attr Attr) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
WithNth	plugged/fzf/src/options.go	/^	WithNth     []Range$/;"	m	struct:fzf.Options	typeref:typename:[]Range
Work with the :args list	plugged/vim-dirvish/README.md	/^### Work with the :args list$/;"	S	section:dirvish.vim :zap:""Concepts
Writing	plugged/vim-gutentags/CONTRIBUTING.md	/^## Writing$/;"	s	chapter:Contributing
X	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) X() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
X	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) X() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
X	plugged/fzf/src/tui/tui.go	/^	X      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
X	plugged/fzf/src/tui/tui.go	/^	X() int$/;"	n	interface:tui.Window	typeref:typename:int
Y	init.vim	/^nnoremap Y y\$$/;"	m
Y	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) Y() int {$/;"	f	struct:tui.LightWindow	typeref:typename:int
Y	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) Y() int {$/;"	f	struct:tui.TcellWindow	typeref:typename:int
Y	plugged/fzf/src/tui/tui.go	/^	Y      int$/;"	m	struct:tui.MouseEvent	typeref:typename:int
Y	plugged/fzf/src/tui/tui.go	/^	Y() int$/;"	n	interface:tui.Window	typeref:typename:int
Z	plugged/vim-sneak/plugin/sneak.vim	/^  omap Z <Plug>Sneak_S$/;"	m
Z	plugged/vim-sneak/plugin/sneak.vim	/^  xmap Z <Plug>Sneak_S$/;"	m
Z!	plugged/vim-dirvish/autoload/dirvish.vim	/^  nnoremap <buffer><silent> Z! :silent write<Bar>exe '!'.(has('win32')?fnameescape(escape(expand/;"	m
["textDocument/codeAction"]	plugged/nvim-lspconfig/lua/lspconfig/jdtls.lua	/^      ["textDocument\/codeAction"] = function(a, b, actions)$/;"	f
["textDocument/rename"]	plugged/nvim-lspconfig/lua/lspconfig/jdtls.lua	/^      ["textDocument\/rename"] = function(a, b, workspace_edit)$/;"	f
["workspace/applyEdit"]	plugged/nvim-lspconfig/lua/lspconfig/jdtls.lua	/^      ["workspace\/applyEdit"] = function(a, b, workspace_edit)$/;"	f
[License](LICENSE)	plugged/fzf/README-VIM.md	/^[License](LICENSE)$/;"	s	chapter:FZF Vim integration
[License](LICENSE)	plugged/fzf/README.md	/^[License](LICENSE)$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
[NeoBundle](https://github.com/Shougo/neobundle.vim)	plugged/lightline.vim/README.md	/^### [NeoBundle](https:\/\/github.com\/Shougo\/neobundle.vim)$/;"	S	section:lightline.vim""Installation
[NeoBundle][nb]	plugged/rust.vim/README.md	/^### [NeoBundle][nb]$/;"	S	section:rust.vim""Installation
[Pathogen](https://github.com/tpope/vim-pathogen)	plugged/lightline.vim/README.md	/^### [Pathogen](https:\/\/github.com\/tpope\/vim-pathogen)$/;"	S	section:lightline.vim""Installation
[Pathogen][p]	plugged/rust.vim/README.md	/^### [Pathogen][p]$/;"	S	section:rust.vim""Installation
[Playpen][pp] integration	plugged/rust.vim/README.md	/^### [Playpen][pp] integration$/;"	S	section:rust.vim""Features
[Vim packages](https://vimhelp.org/repeat.txt.html#packages) (since Vim 7.4.1528)	plugged/lightline.vim/README.md	/^### [Vim packages](https:\/\/vimhelp.org\/repeat.txt.html#packages) (since Vim 7.4.1528)$/;"	S	section:lightline.vim""Installation
[Vim8 packages][vim8pack]	plugged/rust.vim/README.md	/^### [Vim8 packages][vim8pack]$/;"	S	section:rust.vim""Installation
[Vundle](https://github.com/VundleVim/Vundle.vim)	plugged/lightline.vim/README.md	/^### [Vundle](https:\/\/github.com\/VundleVim\/Vundle.vim)$/;"	S	section:lightline.vim""Installation
[Vundle][v]	plugged/rust.vim/README.md	/^### [Vundle][v]$/;"	S	section:rust.vim""Installation
[[	plugged/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
[[	plugged/rust.vim/ftplugin/rust.vim	/^onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
[[	plugged/rust.vim/ftplugin/rust.vim	/^xnoremap <silent> <buffer> [[ :call rust#Jump('v', 'Back')<CR>$/;"	m
[dein.vim](https://github.com/Shougo/dein.vim)	plugged/lightline.vim/README.md	/^### [dein.vim](https:\/\/github.com\/Shougo\/dein.vim)$/;"	S	section:lightline.vim""Installation
[dein.vim][d]	plugged/rust.vim/README.md	/^### [dein.vim][d]$/;"	S	section:rust.vim""Installation
[vim-plug](https://github.com/junegunn/vim-plug)	plugged/lightline.vim/README.md	/^### [vim-plug](https:\/\/github.com\/junegunn\/vim-plug)$/;"	S	section:lightline.vim""Installation
[vim-plug][vp]	plugged/rust.vim/README.md	/^### [vim-plug][vp]$/;"	S	section:rust.vim""Installation
\\	plugged/vim-sneak/plugin/sneak.vim	/^    nmap \\ <Plug>Sneak_,$/;"	m
\\	plugged/vim-sneak/plugin/sneak.vim	/^    omap \\ <Plug>Sneak_,$/;"	m
\\	plugged/vim-sneak/plugin/sneak.vim	/^    xmap \\ <Plug>Sneak_,$/;"	m
]	plugged/fzf/shell/completion.bash	/^  if [ "$(type -t _fzf_comprun 2>&1)" = function ]; then$/;"	f
]]	plugged/fzf/shell/completion.zsh	/^  if [[ "$(type _fzf_comprun 2>&1)" =~ function ]]; then$/;"	f
]]	plugged/rust.vim/ftplugin/rust.vim	/^nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
]]	plugged/rust.vim/ftplugin/rust.vim	/^onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
]]	plugged/rust.vim/ftplugin/rust.vim	/^xnoremap <silent> <buffer> ]] :call rust#Jump('v', 'Forward')<CR>$/;"	m
_G.load_config	plugged/nvim-lspconfig/test/minimal_init.lua	/^_G.load_config = function()$/;"	f
__author__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^__author__ = 'Joao Paulo, w0rp'$/;"	v
__fsel	plugged/fzf/shell/key-bindings.zsh	/^__fsel() {$/;"	f
__fzf_cd__	plugged/fzf/shell/key-bindings.bash	/^__fzf_cd__() {$/;"	f
__fzf_comprun	plugged/fzf/shell/completion.bash	/^__fzf_comprun() {$/;"	f
__fzf_comprun	plugged/fzf/shell/completion.zsh	/^__fzf_comprun() {$/;"	f
__fzf_defc	plugged/fzf/shell/completion.bash	/^__fzf_defc() {$/;"	f
__fzf_extract_command	plugged/fzf/shell/completion.zsh	/^__fzf_extract_command() {$/;"	f
__fzf_generic_path_completion	plugged/fzf/shell/completion.bash	/^__fzf_generic_path_completion() {$/;"	f
__fzf_generic_path_completion	plugged/fzf/shell/completion.zsh	/^__fzf_generic_path_completion() {$/;"	f
__fzf_history__	plugged/fzf/shell/key-bindings.bash	/^__fzf_history__() {$/;"	f
__fzf_orig_completion	plugged/fzf/shell/completion.bash	/^__fzf_orig_completion() {$/;"	f
__fzf_select__	plugged/fzf/shell/key-bindings.bash	/^__fzf_select__() {$/;"	f
__fzfcmd	plugged/fzf/shell/key-bindings.bash	/^__fzfcmd() {$/;"	f
__fzfcmd	plugged/fzf/shell/key-bindings.zsh	/^__fzfcmd() {$/;"	f
__index	plugged/completion-nvim/lua/completion/option.lua	/^  __index = function(_, key)$/;"	f
__init__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^        def __init__(self, vim):$/;"	m	class:Base
__init__	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def __init__(self, vim):$/;"	m	class:Source
__init__	plugged/ale/test/python/test_deoplete_source.py	/^    def __init__(self, call_list, call_results, commands):$/;"	m	class:VimMock
_cache	plugged/fzf/src/pattern.go	/^	_cache        ChunkCache$/;"	v	package:fzf	typeref:typename:ChunkCache
_colorToAttribute	plugged/fzf/src/tui/tcell.go	/^	_colorToAttribute = []tcell.Color{$/;"	v	package:tui
_fzf_alias_completion	plugged/fzf/shell/completion.bash	/^_fzf_alias_completion() {$/;"	f
_fzf_compgen_dir	plugged/fzf/shell/completion.bash	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_dir	plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_dir() {$/;"	f
_fzf_compgen_path	plugged/fzf/shell/completion.bash	/^  _fzf_compgen_path() {$/;"	f
_fzf_compgen_path	plugged/fzf/shell/completion.zsh	/^  _fzf_compgen_path() {$/;"	f
_fzf_complete	plugged/fzf/shell/completion.bash	/^_fzf_complete() {$/;"	f
_fzf_complete	plugged/fzf/shell/completion.zsh	/^_fzf_complete() {$/;"	f
_fzf_complete_export	plugged/fzf/shell/completion.zsh	/^_fzf_complete_export() {$/;"	f
_fzf_complete_kill	plugged/fzf/shell/completion.bash	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill	plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill() {$/;"	f
_fzf_complete_kill_post	plugged/fzf/shell/completion.zsh	/^_fzf_complete_kill_post() {$/;"	f
_fzf_complete_ssh	plugged/fzf/shell/completion.zsh	/^_fzf_complete_ssh() {$/;"	f
_fzf_complete_telnet	plugged/fzf/shell/completion.zsh	/^_fzf_complete_telnet() {$/;"	f
_fzf_complete_unalias	plugged/fzf/shell/completion.zsh	/^_fzf_complete_unalias() {$/;"	f
_fzf_complete_unset	plugged/fzf/shell/completion.zsh	/^_fzf_complete_unset() {$/;"	f
_fzf_dir_completion	plugged/fzf/shell/completion.bash	/^_fzf_dir_completion() {$/;"	f
_fzf_dir_completion	plugged/fzf/shell/completion.zsh	/^_fzf_dir_completion() {$/;"	f
_fzf_feed_fifo	plugged/fzf/shell/completion.zsh	/^_fzf_feed_fifo() ($/;"	f
_fzf_file_completion	plugged/fzf/shell/completion.bash	/^_fzf_file_completion() {$/;"	f
_fzf_handle_dynamic_completion	plugged/fzf/shell/completion.bash	/^_fzf_handle_dynamic_completion() {$/;"	f
_fzf_host_completion	plugged/fzf/shell/completion.bash	/^_fzf_host_completion() {$/;"	f
_fzf_opts_completion	plugged/fzf/shell/completion.bash	/^_fzf_opts_completion() {$/;"	f
_fzf_path_completion	plugged/fzf/shell/completion.bash	/^_fzf_path_completion() {$/;"	f
_fzf_path_completion	plugged/fzf/shell/completion.zsh	/^_fzf_path_completion() {$/;"	f
_fzf_proc_completion	plugged/fzf/shell/completion.bash	/^_fzf_proc_completion() {$/;"	f
_fzf_proc_completion_post	plugged/fzf/shell/completion.bash	/^_fzf_proc_completion_post() {$/;"	f
_fzf_setup_completion	plugged/fzf/shell/completion.bash	/^_fzf_setup_completion() {$/;"	f
_fzf_statusline	plugged/fzf.vim/plugin/fzf.vim	/^  augroup _fzf_statusline$/;"	a
_fzf_var_completion	plugged/fzf/shell/completion.bash	/^_fzf_var_completion() {$/;"	f
_patternCache	plugged/fzf/src/pattern.go	/^	_patternCache map[string]*Pattern$/;"	v	package:fzf	typeref:typename:map[string]*Pattern
_screen	plugged/fzf/src/tui/tcell.go	/^	_screen tcell.Screen$/;"	v	package:tui	typeref:typename:tcell.Screen
_splitRegex	plugged/fzf/src/pattern.go	/^	_splitRegex   *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
`--filter` will not block when sort is disabled	plugged/fzf/CHANGELOG.md	/^#### `--filter` will not block when sort is disabled$/;"	t	subsection:CHANGELOG""0.9.4""Improvements
`--height`	plugged/fzf/ADVANCED.md	/^### `--height`$/;"	S	section:Advanced fzf examples""Screen Layout
`:FZF[!]`	plugged/fzf/README-VIM.md	/^`:FZF[!]`$/;"	s	chapter:FZF Vim integration
`fzf#run`	plugged/fzf/README-VIM.md	/^`fzf#run`$/;"	s	chapter:FZF Vim integration
`fzf#wrap`	plugged/fzf/README-VIM.md	/^`fzf#wrap`$/;"	s	chapter:FZF Vim integration
`fzf-tmux`	plugged/fzf/ADVANCED.md	/^### `fzf-tmux`$/;"	S	section:Advanced fzf examples""Screen Layout
`fzf-tmux` script	plugged/fzf/README.md	/^`fzf-tmux` script$/;"	s	chapter:<img src="https://raw.githubusercontent.com/junegunn/i/master/fzf.png" height="170" alt="fzf - a command-line fuzzy finder"> [![github-actions](https://github.com/junegunn/fzf/workflows/Test%20fzf%20on%20Linux/badge.svg)](https://github.com/junegunn/fzf/actions)
`zz` after search	plugged/vim-slash/README.md	/^#### `zz` after search$/;"	t	section:vim-slash""Customization
a	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> a <NOP>$/;"	m
a	plugged/fzf/src/terminal.go	/^	a string$/;"	m	struct:fzf.action	typeref:typename:string
abolish.vim	plugged/vim-abolish/README.markdown	/^# abolish.vim$/;"	c
actAbort	plugged/fzf/src/terminal.go	/^	actAbort$/;"	c	package:fzf
actAccept	plugged/fzf/src/terminal.go	/^	actAccept$/;"	c	package:fzf
actAcceptNonEmpty	plugged/fzf/src/terminal.go	/^	actAcceptNonEmpty$/;"	c	package:fzf
actBackwardChar	plugged/fzf/src/terminal.go	/^	actBackwardChar$/;"	c	package:fzf
actBackwardDeleteChar	plugged/fzf/src/terminal.go	/^	actBackwardDeleteChar$/;"	c	package:fzf
actBackwardDeleteCharEOF	plugged/fzf/src/terminal.go	/^	actBackwardDeleteCharEOF$/;"	c	package:fzf
actBackwardKillWord	plugged/fzf/src/terminal.go	/^	actBackwardKillWord$/;"	c	package:fzf
actBackwardWord	plugged/fzf/src/terminal.go	/^	actBackwardWord$/;"	c	package:fzf
actBeginningOfLine	plugged/fzf/src/terminal.go	/^	actBeginningOfLine$/;"	c	package:fzf
actCancel	plugged/fzf/src/terminal.go	/^	actCancel$/;"	c	package:fzf
actChangePrompt	plugged/fzf/src/terminal.go	/^	actChangePrompt$/;"	c	package:fzf
actClearQuery	plugged/fzf/src/terminal.go	/^	actClearQuery$/;"	c	package:fzf
actClearScreen	plugged/fzf/src/terminal.go	/^	actClearScreen$/;"	c	package:fzf
actClearSelection	plugged/fzf/src/terminal.go	/^	actClearSelection$/;"	c	package:fzf
actClose	plugged/fzf/src/terminal.go	/^	actClose$/;"	c	package:fzf
actDeleteChar	plugged/fzf/src/terminal.go	/^	actDeleteChar$/;"	c	package:fzf
actDeleteCharEOF	plugged/fzf/src/terminal.go	/^	actDeleteCharEOF$/;"	c	package:fzf
actDeselect	plugged/fzf/src/terminal.go	/^	actDeselect$/;"	c	package:fzf
actDeselectAll	plugged/fzf/src/terminal.go	/^	actDeselectAll$/;"	c	package:fzf
actDisableSearch	plugged/fzf/src/terminal.go	/^	actDisableSearch$/;"	c	package:fzf
actDown	plugged/fzf/src/terminal.go	/^	actDown$/;"	c	package:fzf
actEnableSearch	plugged/fzf/src/terminal.go	/^	actEnableSearch$/;"	c	package:fzf
actEndOfLine	plugged/fzf/src/terminal.go	/^	actEndOfLine$/;"	c	package:fzf
actExecute	plugged/fzf/src/terminal.go	/^	actExecute$/;"	c	package:fzf
actExecuteMulti	plugged/fzf/src/terminal.go	/^	actExecuteMulti \/\/ Deprecated$/;"	c	package:fzf
actExecuteSilent	plugged/fzf/src/terminal.go	/^	actExecuteSilent$/;"	c	package:fzf
actFirst	plugged/fzf/src/terminal.go	/^	actFirst$/;"	c	package:fzf
actForwardChar	plugged/fzf/src/terminal.go	/^	actForwardChar$/;"	c	package:fzf
actForwardWord	plugged/fzf/src/terminal.go	/^	actForwardWord$/;"	c	package:fzf
actHalfPageDown	plugged/fzf/src/terminal.go	/^	actHalfPageDown$/;"	c	package:fzf
actHalfPageUp	plugged/fzf/src/terminal.go	/^	actHalfPageUp$/;"	c	package:fzf
actIgnore	plugged/fzf/src/terminal.go	/^	actIgnore actionType = iota$/;"	c	package:fzf	typeref:type:actionType
actInvalid	plugged/fzf/src/terminal.go	/^	actInvalid$/;"	c	package:fzf
actJump	plugged/fzf/src/terminal.go	/^	actJump$/;"	c	package:fzf
actJumpAccept	plugged/fzf/src/terminal.go	/^	actJumpAccept$/;"	c	package:fzf
actKillLine	plugged/fzf/src/terminal.go	/^	actKillLine$/;"	c	package:fzf
actKillWord	plugged/fzf/src/terminal.go	/^	actKillWord$/;"	c	package:fzf
actLast	plugged/fzf/src/terminal.go	/^	actLast$/;"	c	package:fzf
actMouse	plugged/fzf/src/terminal.go	/^	actMouse$/;"	c	package:fzf
actNextHistory	plugged/fzf/src/terminal.go	/^	actNextHistory$/;"	c	package:fzf
actPageDown	plugged/fzf/src/terminal.go	/^	actPageDown$/;"	c	package:fzf
actPageUp	plugged/fzf/src/terminal.go	/^	actPageUp$/;"	c	package:fzf
actPreview	plugged/fzf/src/terminal.go	/^	actPreview$/;"	c	package:fzf
actPreviewBottom	plugged/fzf/src/terminal.go	/^	actPreviewBottom$/;"	c	package:fzf
actPreviewDown	plugged/fzf/src/terminal.go	/^	actPreviewDown$/;"	c	package:fzf
actPreviewHalfPageDown	plugged/fzf/src/terminal.go	/^	actPreviewHalfPageDown$/;"	c	package:fzf
actPreviewHalfPageUp	plugged/fzf/src/terminal.go	/^	actPreviewHalfPageUp$/;"	c	package:fzf
actPreviewPageDown	plugged/fzf/src/terminal.go	/^	actPreviewPageDown$/;"	c	package:fzf
actPreviewPageUp	plugged/fzf/src/terminal.go	/^	actPreviewPageUp$/;"	c	package:fzf
actPreviewTop	plugged/fzf/src/terminal.go	/^	actPreviewTop$/;"	c	package:fzf
actPreviewUp	plugged/fzf/src/terminal.go	/^	actPreviewUp$/;"	c	package:fzf
actPreviousHistory	plugged/fzf/src/terminal.go	/^	actPreviousHistory$/;"	c	package:fzf
actPrintQuery	plugged/fzf/src/terminal.go	/^	actPrintQuery$/;"	c	package:fzf
actRefreshPreview	plugged/fzf/src/terminal.go	/^	actRefreshPreview$/;"	c	package:fzf
actReload	plugged/fzf/src/terminal.go	/^	actReload$/;"	c	package:fzf
actReplaceQuery	plugged/fzf/src/terminal.go	/^	actReplaceQuery$/;"	c	package:fzf
actRune	plugged/fzf/src/terminal.go	/^	actRune$/;"	c	package:fzf
actSelect	plugged/fzf/src/terminal.go	/^	actSelect$/;"	c	package:fzf
actSelectAll	plugged/fzf/src/terminal.go	/^	actSelectAll$/;"	c	package:fzf
actSigStop	plugged/fzf/src/terminal.go	/^	actSigStop$/;"	c	package:fzf
actToggle	plugged/fzf/src/terminal.go	/^	actToggle$/;"	c	package:fzf
actToggleAll	plugged/fzf/src/terminal.go	/^	actToggleAll$/;"	c	package:fzf
actToggleDown	plugged/fzf/src/terminal.go	/^	actToggleDown$/;"	c	package:fzf
actToggleIn	plugged/fzf/src/terminal.go	/^	actToggleIn$/;"	c	package:fzf
actToggleOut	plugged/fzf/src/terminal.go	/^	actToggleOut$/;"	c	package:fzf
actTogglePreview	plugged/fzf/src/terminal.go	/^	actTogglePreview$/;"	c	package:fzf
actTogglePreviewWrap	plugged/fzf/src/terminal.go	/^	actTogglePreviewWrap$/;"	c	package:fzf
actToggleSearch	plugged/fzf/src/terminal.go	/^	actToggleSearch$/;"	c	package:fzf
actToggleSort	plugged/fzf/src/terminal.go	/^	actToggleSort$/;"	c	package:fzf
actToggleUp	plugged/fzf/src/terminal.go	/^	actToggleUp$/;"	c	package:fzf
actUnbind	plugged/fzf/src/terminal.go	/^	actUnbind$/;"	c	package:fzf
actUnixLineDiscard	plugged/fzf/src/terminal.go	/^	actUnixLineDiscard$/;"	c	package:fzf
actUnixWordRubout	plugged/fzf/src/terminal.go	/^	actUnixWordRubout$/;"	c	package:fzf
actUp	plugged/fzf/src/terminal.go	/^	actUp$/;"	c	package:fzf
actYank	plugged/fzf/src/terminal.go	/^	actYank$/;"	c	package:fzf
action	plugged/fzf/src/terminal.go	/^type action struct {$/;"	s	package:fzf
actionType	plugged/fzf/src/terminal.go	/^type actionType int$/;"	t	package:fzf	typeref:typename:int
activeTempFiles	plugged/fzf/src/terminal.go	/^var activeTempFiles []string$/;"	v	package:fzf	typeref:typename:[]string
ale#Env	plugged/ale/autoload/ale.vim	/^function! ale#Env(variable_name, value) abort$/;"	f
ale#Escape	plugged/ale/autoload/ale.vim	/^function! ale#Escape(str) abort$/;"	f
ale#FileTooLarge	plugged/ale/autoload/ale.vim	/^function! ale#FileTooLarge(buffer) abort$/;"	f
ale#GetFilenameMappings	plugged/ale/autoload/ale.vim	/^function! ale#GetFilenameMappings(buffer, name) abort$/;"	f
ale#GetLocItemMessage	plugged/ale/autoload/ale.vim	/^function! ale#GetLocItemMessage(item, format_string) abort$/;"	f
ale#Has	plugged/ale/autoload/ale.vim	/^function! ale#Has(feature) abort$/;"	f
ale#Pad	plugged/ale/autoload/ale.vim	/^function! ale#Pad(string) abort$/;"	f
ale#Queue	plugged/ale/autoload/ale.vim	/^function! ale#Queue(delay, ...) abort$/;"	f
ale#Set	plugged/ale/autoload/ale.vim	/^function! ale#Set(variable_name, default) abort$/;"	f
ale#ShouldDoNothing	plugged/ale/autoload/ale.vim	/^function! ale#ShouldDoNothing(buffer) abort$/;"	f
ale#Var	plugged/ale/autoload/ale.vim	/^function! ale#Var(buffer, variable_name) abort$/;"	f
ale#ant#BuildClasspathCommand	plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#BuildClasspathCommand(buffer) abort$/;"	f
ale#ant#FindExecutable	plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#FindExecutable(buffer) abort$/;"	f
ale#ant#FindProjectRoot	plugged/ale/autoload/ale/ant.vim	/^function! ale#ant#FindProjectRoot(buffer) abort$/;"	f
ale#args#Parse	plugged/ale/autoload/ale/args.vim	/^function! ale#args#Parse(arg_list, string) abort$/;"	f
ale#assert#Fixer	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#Fixer(expected_result) abort$/;"	f
ale#assert#FixerCwd	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#FixerCwd(expected_cwd) abort$/;"	f
ale#assert#FixerNotExecuted	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#FixerNotExecuted() abort$/;"	f
ale#assert#GivenCommandOutput	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#GivenCommandOutput(...) abort$/;"	f
ale#assert#LSPAddress	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPAddress(expected_address) abort$/;"	f
ale#assert#LSPConfig	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPConfig(expected_config) abort$/;"	f
ale#assert#LSPLanguage	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPLanguage(expected_language) abort$/;"	f
ale#assert#LSPOptions	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPOptions(expected_options) abort$/;"	f
ale#assert#LSPProject	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LSPProject(expected_root) abort$/;"	f
ale#assert#Linter	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#Linter(expected_executable, expected_command) abort$/;"	f
ale#assert#LinterCwd	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LinterCwd(expected_cwd) abort$/;"	f
ale#assert#LinterNotExecuted	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#LinterNotExecuted() abort$/;"	f
ale#assert#ResetVariables	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#ResetVariables(filetype, name, ...) abort$/;"	f
ale#assert#SetUpFixerTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpFixerTest(filetype, name, ...) abort$/;"	f
ale#assert#SetUpFixerTestCommands	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpFixerTestCommands() abort$/;"	f
ale#assert#SetUpLinterTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpLinterTest(filetype, name) abort$/;"	f
ale#assert#SetUpLinterTestCommands	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#SetUpLinterTestCommands() abort$/;"	f
ale#assert#TearDownFixerTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#TearDownFixerTest() abort$/;"	f
ale#assert#TearDownLinterTest	plugged/ale/autoload/ale/assert.vim	/^function! ale#assert#TearDownLinterTest() abort$/;"	f
ale#balloon#Disable	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Disable() abort$/;"	f
ale#balloon#Enable	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Enable() abort$/;"	f
ale#balloon#Expr	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#Expr() abort$/;"	f
ale#balloon#MessageForPos	plugged/ale/autoload/ale/balloon.vim	/^function! ale#balloon#MessageForPos(bufnr, lnum, col) abort$/;"	f
ale#c#ExpandAtArgs	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ExpandAtArgs(path_prefix, raw_split_lines) abort$/;"	f
ale#c#FindCompileCommands	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindCompileCommands(buffer) abort$/;"	f
ale#c#FindLocalHeaderPaths	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindLocalHeaderPaths(buffer) abort$/;"	f
ale#c#FindProjectRoot	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FindProjectRoot(buffer) abort$/;"	f
ale#c#FlagsFromCompileCommands	plugged/ale/autoload/ale/c.vim	/^function! ale#c#FlagsFromCompileCommands(buffer, compile_commands_file) abort$/;"	f
ale#c#GetBuildDirectory	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetBuildDirectory(buffer) abort$/;"	f
ale#c#GetCFlags	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetCFlags(buffer, output) abort$/;"	f
ale#c#GetMakeCommand	plugged/ale/autoload/ale/c.vim	/^function! ale#c#GetMakeCommand(buffer) abort$/;"	f
ale#c#IncludeOptions	plugged/ale/autoload/ale/c.vim	/^function! ale#c#IncludeOptions(include_paths) abort$/;"	f
ale#c#ParseCFlags	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlags(path_prefix, should_quote, raw_arguments) abort$/;"	f
ale#c#ParseCFlagsFromMakeOutput	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCFlagsFromMakeOutput(buffer, make_output) abort$/;"	f
ale#c#ParseCompileCommandsFlags	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ParseCompileCommandsFlags(buffer, file_lookup, dir_lookup) abort$/;"	f
ale#c#QuoteArg	plugged/ale/autoload/ale/c.vim	/^function! ale#c#QuoteArg(arg) abort$/;"	f
ale#c#ResetCompileCommandsCache	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ResetCompileCommandsCache() abort$/;"	f
ale#c#RunMakeCommand	plugged/ale/autoload/ale/c.vim	/^function! ale#c#RunMakeCommand(buffer, Callback) abort$/;"	f
ale#c#ShellSplit	plugged/ale/autoload/ale/c.vim	/^function! ale#c#ShellSplit(line) abort$/;"	f
ale#code_action#ApplyChanges	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#ApplyChanges(filename, changes, should_save) abort$/;"	f
ale#code_action#BuildChangesList	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#BuildChangesList(changes_map) abort$/;"	f
ale#code_action#DisablePopUpMenu	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#DisablePopUpMenu() abort$/;"	f
ale#code_action#EnablePopUpMenu	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#EnablePopUpMenu() abort$/;"	f
ale#code_action#GetChanges	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#GetChanges(workspace_edit) abort$/;"	f
ale#code_action#GetCodeActions	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#GetCodeActions(options) abort$/;"	f
ale#code_action#HandleCodeAction	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#HandleCodeAction(code_action, options) abort$/;"	f
ale#code_action#ReloadBuffer	plugged/ale/autoload/ale/code_action.vim	/^function! ale#code_action#ReloadBuffer() abort$/;"	f
ale#codefix#ApplyLSPCodeAction	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#ApplyLSPCodeAction(data, item) abort$/;"	f
ale#codefix#ApplyTSServerCodeAction	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#ApplyTSServerCodeAction(data, item) abort$/;"	f
ale#codefix#ClearLSPData	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#ClearLSPData() abort$/;"	f
ale#codefix#Execute	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#Execute(range, ...) abort$/;"	f
ale#codefix#GetMap	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#GetMap() abort$/;"	f
ale#codefix#HandleLSPResponse	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#codefix#HandleTSServerResponse	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#codefix#SetMap	plugged/ale/autoload/ale/codefix.vim	/^function! ale#codefix#SetMap(map) abort$/;"	f
ale#command#CdString	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CdString(directory) abort$/;"	f
ale#command#ClearData	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ClearData() abort$/;"	f
ale#command#CreateDirectory	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateDirectory(buffer) abort$/;"	f
ale#command#CreateFile	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateFile(buffer) abort$/;"	f
ale#command#CreateTempFile	plugged/ale/autoload/ale/command.vim	/^function! ale#command#CreateTempFile(buffer, temporary_file, input) abort$/;"	f
ale#command#EscapeCommandPart	plugged/ale/autoload/ale/command.vim	/^function! ale#command#EscapeCommandPart(command_part) abort$/;"	f
ale#command#FormatCommand	plugged/ale/autoload/ale/command.vim	/^function! ale#command#FormatCommand($/;"	f
ale#command#GetData	plugged/ale/autoload/ale/command.vim	/^function! ale#command#GetData() abort$/;"	f
ale#command#InitData	plugged/ale/autoload/ale/command.vim	/^function! ale#command#InitData(buffer) abort$/;"	f
ale#command#IsDeferred	plugged/ale/autoload/ale/command.vim	/^function! ale#command#IsDeferred(value) abort$/;"	f
ale#command#ManageDirectory	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ManageDirectory(buffer, directory) abort$/;"	f
ale#command#ManageFile	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ManageFile(buffer, file) abort$/;"	f
ale#command#RemoveManagedFiles	plugged/ale/autoload/ale/command.vim	/^function! ale#command#RemoveManagedFiles(buffer) abort$/;"	f
ale#command#ResetCwd	plugged/ale/autoload/ale/command.vim	/^function! ale#command#ResetCwd(buffer) abort$/;"	f
ale#command#Run	plugged/ale/autoload/ale/command.vim	/^function! ale#command#Run(buffer, command, Callback, ...) abort$/;"	f
ale#command#SetCwd	plugged/ale/autoload/ale/command.vim	/^function! ale#command#SetCwd(buffer, cwd) abort$/;"	f
ale#command#StopJobs	plugged/ale/autoload/ale/command.vim	/^function! ale#command#StopJobs(buffer, job_type) abort$/;"	f
ale#completion#AutomaticOmniFunc	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#AutomaticOmniFunc(findstart, base) abort$/;"	f
ale#completion#CanProvideCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#CanProvideCompletions() abort$/;"	f
ale#completion#Disable	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Disable() abort$/;"	f
ale#completion#Done	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Done() abort$/;"	f
ale#completion#Enable	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Enable() abort$/;"	f
ale#completion#Filter	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Filter($/;"	f
ale#completion#GetAllTriggers	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetAllTriggers() abort$/;"	f
ale#completion#GetCompletionKind	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionKind(kind) abort$/;"	f
ale#completion#GetCompletionPosition	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionPosition() abort$/;"	f
ale#completion#GetCompletionPositionForDeoplete	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionPositionForDeoplete(input) abort$/;"	f
ale#completion#GetCompletionResult	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionResult() abort$/;"	f
ale#completion#GetCompletionSymbols	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletionSymbols(kind) abort$/;"	f
ale#completion#GetCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetCompletions(...) abort$/;"	f
ale#completion#GetPrefix	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetPrefix(filetype, line, column) abort$/;"	f
ale#completion#GetTriggerCharacter	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#GetTriggerCharacter(filetype, prefix) abort$/;"	f
ale#completion#HandleLSPResponse	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#completion#HandleTSServerResponse	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#completion#HandleUserData	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#HandleUserData(completed_item) abort$/;"	f
ale#completion#Import	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Import() abort$/;"	f
ale#completion#NullFilter	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#NullFilter(buffer, item) abort$/;"	f
ale#completion#OmniFunc	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#OmniFunc(findstart, base) abort$/;"	f
ale#completion#ParseLSPCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseLSPCompletions(response) abort$/;"	f
ale#completion#ParseTSServerCompletionEntryDetails	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletionEntryDetails(response) abort$/;"	f
ale#completion#ParseTSServerCompletions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#ParseTSServerCompletions(response) abort$/;"	f
ale#completion#Queue	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Queue() abort$/;"	f
ale#completion#RestoreCompletionOptions	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#RestoreCompletionOptions() abort$/;"	f
ale#completion#Show	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#Show(result) abort$/;"	f
ale#completion#StopTimer	plugged/ale/autoload/ale/completion.vim	/^function! ale#completion#StopTimer() abort$/;"	f
ale#completion#python#CompletionItemFilter	plugged/ale/autoload/ale/completion/python.vim	/^function! ale#completion#python#CompletionItemFilter(buffer, item) abort$/;"	f
ale#cursor#EchoCursorWarning	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarning(...) abort$/;"	f
ale#cursor#EchoCursorWarningWithDelay	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#EchoCursorWarningWithDelay() abort$/;"	f
ale#cursor#ShowCursorDetail	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#ShowCursorDetail() abort$/;"	f
ale#cursor#TruncatedEcho	plugged/ale/autoload/ale/cursor.vim	/^function! ale#cursor#TruncatedEcho(original_message) abort$/;"	f
ale#d#FindDUBConfig	plugged/ale/autoload/ale/d.vim	/^function! ale#d#FindDUBConfig(buffer) abort$/;"	f
ale#debugging#Info	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#Info() abort$/;"	f
ale#debugging#InfoToClipboard	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToClipboard() abort$/;"	f
ale#debugging#InfoToFile	plugged/ale/autoload/ale/debugging.vim	/^function! ale#debugging#InfoToFile(filename) abort$/;"	f
ale#definition#ClearLSPData	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#ClearLSPData() abort$/;"	f
ale#definition#GetMap	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GetMap() abort$/;"	f
ale#definition#GoTo	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoTo(options) abort$/;"	f
ale#definition#GoToCommandHandler	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoToCommandHandler(command, ...) abort$/;"	f
ale#definition#GoToType	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#GoToType(options) abort$/;"	f
ale#definition#HandleLSPResponse	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#definition#HandleTSServerResponse	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#definition#SetMap	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#SetMap(map) abort$/;"	f
ale#definition#UpdateTagStack	plugged/ale/autoload/ale/definition.vim	/^function! ale#definition#UpdateTagStack() abort$/;"	f
ale#dhall#GetCommand	plugged/ale/autoload/ale/dhall.vim	/^function! ale#dhall#GetCommand(buffer) abort$/;"	f
ale#dhall#GetExecutable	plugged/ale/autoload/ale/dhall.vim	/^function! ale#dhall#GetExecutable(buffer) abort$/;"	f
ale#dhall#GetExecutableWithOptions	plugged/ale/autoload/ale/dhall.vim	/^function! ale#dhall#GetExecutableWithOptions(buffer) abort$/;"	f
ale#engine#Cleanup	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#Cleanup(buffer) abort$/;"	f
ale#engine#CleanupEveryBuffer	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#CleanupEveryBuffer() abort$/;"	f
ale#engine#EscapeCommandPart	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#EscapeCommandPart(command_part) abort$/;"	f
ale#engine#FixLocList	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#FixLocList(buffer, linter_name, from_other_source, loclist) abort$/;"	f
ale#engine#GetLoclist	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#GetLoclist(buffer) abort$/;"	f
ale#engine#HandleLoclist	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#HandleLoclist(linter_name, buffer, loclist, from_other_source) abort$/;"	f
ale#engine#InitBufferInfo	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#InitBufferInfo(buffer) abort$/;"	f
ale#engine#IsCheckingBuffer	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#IsCheckingBuffer(buffer) abort$/;"	f
ale#engine#IsExecutable	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#IsExecutable(buffer, executable) abort$/;"	f
ale#engine#MarkLinterActive	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#MarkLinterActive(info, linter) abort$/;"	f
ale#engine#MarkLinterInactive	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#MarkLinterInactive(info, linter_name) abort$/;"	f
ale#engine#ResetExecutableCache	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#ResetExecutableCache() abort$/;"	f
ale#engine#RunLinters	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#RunLinters(buffer, linters, should_lint_file) abort$/;"	f
ale#engine#SetResults	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#SetResults(buffer, loclist) abort$/;"	f
ale#engine#Stop	plugged/ale/autoload/ale/engine.vim	/^function! ale#engine#Stop(buffer) abort$/;"	f
ale#engine#ignore#Exclude	plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#Exclude(filetype, all_linters, config, disable_lsp) abort$/;"	f
ale#engine#ignore#GetList	plugged/ale/autoload/ale/engine/ignore.vim	/^function! ale#engine#ignore#GetList(filetype, config) abort$/;"	f
ale#events#ClockMilliseconds	plugged/ale/autoload/ale/events.vim	/^function! ale#events#ClockMilliseconds() abort$/;"	f
ale#events#FileChangedEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#FileChangedEvent(buffer) abort$/;"	f
ale#events#FileTypeEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#FileTypeEvent(buffer, new_filetype) abort$/;"	f
ale#events#Init	plugged/ale/autoload/ale/events.vim	/^function! ale#events#Init() abort$/;"	f
ale#events#LintOnEnter	plugged/ale/autoload/ale/events.vim	/^function! ale#events#LintOnEnter(buffer) abort$/;"	f
ale#events#QuitEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#QuitEvent(buffer) abort$/;"	f
ale#events#QuitRecently	plugged/ale/autoload/ale/events.vim	/^function! ale#events#QuitRecently(buffer) abort$/;"	f
ale#events#ReadOrEnterEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#ReadOrEnterEvent(buffer) abort$/;"	f
ale#events#SaveEvent	plugged/ale/autoload/ale/events.vim	/^function! ale#events#SaveEvent(buffer) abort$/;"	f
ale#filename_mapping#Invert	plugged/ale/autoload/ale/filename_mapping.vim	/^function! ale#filename_mapping#Invert(filename_mappings) abort$/;"	f
ale#filename_mapping#Map	plugged/ale/autoload/ale/filename_mapping.vim	/^function! ale#filename_mapping#Map(filename, filename_mappings) abort$/;"	f
ale#filetypes#GuessExtension	plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#GuessExtension(filetype) abort$/;"	f
ale#filetypes#LoadExtensionMap	plugged/ale/autoload/ale/filetypes.vim	/^function! ale#filetypes#LoadExtensionMap() abort$/;"	f
ale#fix#ApplyFixes	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyFixes(buffer, output) abort$/;"	f
ale#fix#ApplyQueuedFixes	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#ApplyQueuedFixes(buffer) abort$/;"	f
ale#fix#Fix	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#Fix(buffer, fixing_flag, ...) abort$/;"	f
ale#fix#InitBufferData	plugged/ale/autoload/ale/fix.vim	/^function! ale#fix#InitBufferData(buffer, fixing_flag) abort$/;"	f
ale#fix#registry#Add	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Add(name, func, filetypes, desc, ...) abort$/;"	f
ale#fix#registry#Clear	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Clear() abort$/;"	f
ale#fix#registry#CompleteFixers	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#CompleteFixers(ArgLead, CmdLine, CursorPos) abort$/;"	f
ale#fix#registry#GetApplicableFixers	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetApplicableFixers(filetype) abort$/;"	f
ale#fix#registry#GetFunc	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#GetFunc(name) abort$/;"	f
ale#fix#registry#ResetToDefaults	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#ResetToDefaults() abort$/;"	f
ale#fix#registry#Suggest	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#Suggest(filetype) abort$/;"	f
ale#fix#registry#SuggestedFixers	plugged/ale/autoload/ale/fix/registry.vim	/^function! ale#fix#registry#SuggestedFixers(filetype) abort$/;"	f
ale#fixers#appleswiftformat#Fix	plugged/ale/autoload/ale/fixers/appleswiftformat.vim	/^function! ale#fixers#appleswiftformat#Fix(buffer) abort$/;"	f
ale#fixers#astyle#FindProjectOptions	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! ale#fixers#astyle#FindProjectOptions(buffer) abort$/;"	f
ale#fixers#astyle#Fix	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! ale#fixers#astyle#Fix(buffer) abort$/;"	f
ale#fixers#astyle#Var	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! ale#fixers#astyle#Var(buffer, name) abort$/;"	f
ale#fixers#autoimport#Fix	plugged/ale/autoload/ale/fixers/autoimport.vim	/^function! ale#fixers#autoimport#Fix(buffer) abort$/;"	f
ale#fixers#autopep8#Fix	plugged/ale/autoload/ale/fixers/autopep8.vim	/^function! ale#fixers#autopep8#Fix(buffer) abort$/;"	f
ale#fixers#bibclean#Fix	plugged/ale/autoload/ale/fixers/bibclean.vim	/^function! ale#fixers#bibclean#Fix(buffer) abort$/;"	f
ale#fixers#black#Fix	plugged/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#Fix(buffer) abort$/;"	f
ale#fixers#black#GetExecutable	plugged/ale/autoload/ale/fixers/black.vim	/^function! ale#fixers#black#GetExecutable(buffer) abort$/;"	f
ale#fixers#brittany#Fix	plugged/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#Fix(buffer) abort$/;"	f
ale#fixers#brittany#GetExecutable	plugged/ale/autoload/ale/fixers/brittany.vim	/^function! ale#fixers#brittany#GetExecutable(buffer) abort$/;"	f
ale#fixers#buildifier#Fix	plugged/ale/autoload/ale/fixers/buildifier.vim	/^function! ale#fixers#buildifier#Fix(buffer) abort$/;"	f
ale#fixers#buildifier#GetExecutable	plugged/ale/autoload/ale/fixers/buildifier.vim	/^function! ale#fixers#buildifier#GetExecutable(buffer) abort$/;"	f
ale#fixers#clangformat#Fix	plugged/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#Fix(buffer) abort$/;"	f
ale#fixers#clangformat#GetExecutable	plugged/ale/autoload/ale/fixers/clangformat.vim	/^function! ale#fixers#clangformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#clangtidy#Fix	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#Fix(buffer) abort$/;"	f
ale#fixers#clangtidy#GetCommand	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#GetCommand(buffer) abort$/;"	f
ale#fixers#clangtidy#Var	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! ale#fixers#clangtidy#Var(buffer, name) abort$/;"	f
ale#fixers#cmakeformat#Fix	plugged/ale/autoload/ale/fixers/cmakeformat.vim	/^function! ale#fixers#cmakeformat#Fix(buffer) abort$/;"	f
ale#fixers#dartfmt#Fix	plugged/ale/autoload/ale/fixers/dartfmt.vim	/^function! ale#fixers#dartfmt#Fix(buffer) abort$/;"	f
ale#fixers#deno#Fix	plugged/ale/autoload/ale/fixers/deno.vim	/^function! ale#fixers#deno#Fix(buffer) abort$/;"	f
ale#fixers#dfmt#Fix	plugged/ale/autoload/ale/fixers/dfmt.vim	/^function! ale#fixers#dfmt#Fix(buffer) abort$/;"	f
ale#fixers#dhall_format#Fix	plugged/ale/autoload/ale/fixers/dhall_format.vim	/^function! ale#fixers#dhall_format#Fix(buffer) abort$/;"	f
ale#fixers#dhall_freeze#Freeze	plugged/ale/autoload/ale/fixers/dhall_freeze.vim	/^function! ale#fixers#dhall_freeze#Freeze(buffer) abort$/;"	f
ale#fixers#dhall_lint#Fix	plugged/ale/autoload/ale/fixers/dhall_lint.vim	/^function! ale#fixers#dhall_lint#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#Fix	plugged/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#Fix(buffer) abort$/;"	f
ale#fixers#elm_format#GetExecutable	plugged/ale/autoload/ale/fixers/elm_format.vim	/^function! ale#fixers#elm_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#erlfmt#Fix	plugged/ale/autoload/ale/fixers/erlfmt.vim	/^function! ale#fixers#erlfmt#Fix(buffer) abort$/;"	f
ale#fixers#erlfmt#GetExecutable	plugged/ale/autoload/ale/fixers/erlfmt.vim	/^function! ale#fixers#erlfmt#GetExecutable(buffer) abort$/;"	f
ale#fixers#eslint#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#eslint#Fix	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#Fix(buffer) abort$/;"	f
ale#fixers#eslint#ProcessEslintDOutput	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessEslintDOutput(buffer, output) abort$/;"	f
ale#fixers#eslint#ProcessFixDryRunOutput	plugged/ale/autoload/ale/fixers/eslint.vim	/^function! ale#fixers#eslint#ProcessFixDryRunOutput(buffer, output) abort$/;"	f
ale#fixers#fecs#Fix	plugged/ale/autoload/ale/fixers/fecs.vim	/^function! ale#fixers#fecs#Fix(buffer) abort$/;"	f
ale#fixers#fish_indent#Fix	plugged/ale/autoload/ale/fixers/fish_indent.vim	/^function! ale#fixers#fish_indent#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#Fix	plugged/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#Fix(buffer) abort$/;"	f
ale#fixers#fixjson#GetExecutable	plugged/ale/autoload/ale/fixers/fixjson.vim	/^function! ale#fixers#fixjson#GetExecutable(buffer) abort$/;"	f
ale#fixers#floskell#Fix	plugged/ale/autoload/ale/fixers/floskell.vim	/^function! ale#fixers#floskell#Fix(buffer) abort$/;"	f
ale#fixers#floskell#GetExecutable	plugged/ale/autoload/ale/fixers/floskell.vim	/^function! ale#fixers#floskell#GetExecutable(buffer) abort$/;"	f
ale#fixers#generic#RemoveTrailingBlankLines	plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#RemoveTrailingBlankLines(buffer, lines) abort$/;"	f
ale#fixers#generic#TrimWhitespace	plugged/ale/autoload/ale/fixers/generic.vim	/^function! ale#fixers#generic#TrimWhitespace(buffer, lines) abort$/;"	f
ale#fixers#generic_python#AddLinesBeforeControlStatements	plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#AddLinesBeforeControlStatements(buffer, lines) abort$/;"	f
ale#fixers#generic_python#BreakUpLongLines	plugged/ale/autoload/ale/fixers/generic_python.vim	/^function! ale#fixers#generic_python#BreakUpLongLines(buffer, lines) abort$/;"	f
ale#fixers#gnatpp#Fix	plugged/ale/autoload/ale/fixers/gnatpp.vim	/^function! ale#fixers#gnatpp#Fix(buffer) abort$/;"	f
ale#fixers#gofmt#Fix	plugged/ale/autoload/ale/fixers/gofmt.vim	/^function! ale#fixers#gofmt#Fix(buffer) abort$/;"	f
ale#fixers#goimports#Fix	plugged/ale/autoload/ale/fixers/goimports.vim	/^function! ale#fixers#goimports#Fix(buffer) abort$/;"	f
ale#fixers#gomod#Fix	plugged/ale/autoload/ale/fixers/gomod.vim	/^function! ale#fixers#gomod#Fix(buffer) abort$/;"	f
ale#fixers#google_java_format#Fix	plugged/ale/autoload/ale/fixers/google_java_format.vim	/^function! ale#fixers#google_java_format#Fix(buffer) abort$/;"	f
ale#fixers#hackfmt#Fix	plugged/ale/autoload/ale/fixers/hackfmt.vim	/^function! ale#fixers#hackfmt#Fix(buffer) abort$/;"	f
ale#fixers#help#AlignTags	plugged/ale/autoload/ale/fixers/help.vim	/^function! ale#fixers#help#AlignTags(buffer, lines) abort$/;"	f
ale#fixers#hfmt#Fix	plugged/ale/autoload/ale/fixers/hfmt.vim	/^function! ale#fixers#hfmt#Fix(buffer) abort$/;"	f
ale#fixers#hindent#Fix	plugged/ale/autoload/ale/fixers/hindent.vim	/^function! ale#fixers#hindent#Fix(buffer) abort$/;"	f
ale#fixers#hindent#GetExecutable	plugged/ale/autoload/ale/fixers/hindent.vim	/^function! ale#fixers#hindent#GetExecutable(buffer) abort$/;"	f
ale#fixers#hlint#Fix	plugged/ale/autoload/ale/fixers/hlint.vim	/^function! ale#fixers#hlint#Fix(buffer) abort$/;"	f
ale#fixers#html_beautify#Fix	plugged/ale/autoload/ale/fixers/html_beautify.vim	/^function! ale#fixers#html_beautify#Fix(buffer) abort$/;"	f
ale#fixers#importjs#Fix	plugged/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#Fix(buffer) abort$/;"	f
ale#fixers#importjs#ProcessOutput	plugged/ale/autoload/ale/fixers/importjs.vim	/^function! ale#fixers#importjs#ProcessOutput(buffer, output) abort$/;"	f
ale#fixers#isort#Fix	plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#Fix(buffer) abort$/;"	f
ale#fixers#isort#GetExecutable	plugged/ale/autoload/ale/fixers/isort.vim	/^function! ale#fixers#isort#GetExecutable(buffer) abort$/;"	f
ale#fixers#jq#Fix	plugged/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#Fix(buffer) abort$/;"	f
ale#fixers#jq#GetExecutable	plugged/ale/autoload/ale/fixers/jq.vim	/^function! ale#fixers#jq#GetExecutable(buffer) abort$/;"	f
ale#fixers#ktlint#Fix	plugged/ale/autoload/ale/fixers/ktlint.vim	/^function! ale#fixers#ktlint#Fix(buffer) abort$/;"	f
ale#fixers#latexindent#Fix	plugged/ale/autoload/ale/fixers/latexindent.vim	/^function! ale#fixers#latexindent#Fix(buffer) abort$/;"	f
ale#fixers#luafmt#Fix	plugged/ale/autoload/ale/fixers/luafmt.vim	/^function! ale#fixers#luafmt#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#Fix	plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#Fix(buffer) abort$/;"	f
ale#fixers#mix_format#GetCommand	plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetCommand(buffer) abort$/;"	f
ale#fixers#mix_format#GetExecutable	plugged/ale/autoload/ale/fixers/mix_format.vim	/^function! ale#fixers#mix_format#GetExecutable(buffer) abort$/;"	f
ale#fixers#nimpretty#Fix	plugged/ale/autoload/ale/fixers/nimpretty.vim	/^function! ale#fixers#nimpretty#Fix(buffer) abort$/;"	f
ale#fixers#nixfmt#Fix	plugged/ale/autoload/ale/fixers/nixfmt.vim	/^function! ale#fixers#nixfmt#Fix(buffer) abort$/;"	f
ale#fixers#nixpkgsfmt#Fix	plugged/ale/autoload/ale/fixers/nixpkgsfmt.vim	/^function! ale#fixers#nixpkgsfmt#Fix(buffer) abort$/;"	f
ale#fixers#ocamlformat#Fix	plugged/ale/autoload/ale/fixers/ocamlformat.vim	/^function! ale#fixers#ocamlformat#Fix(buffer) abort$/;"	f
ale#fixers#ocp_indent#Fix	plugged/ale/autoload/ale/fixers/ocp_indent.vim	/^function! ale#fixers#ocp_indent#Fix(buffer) abort$/;"	f
ale#fixers#ormolu#Fix	plugged/ale/autoload/ale/fixers/ormolu.vim	/^function! ale#fixers#ormolu#Fix(buffer) abort$/;"	f
ale#fixers#perltidy#Fix	plugged/ale/autoload/ale/fixers/perltidy.vim	/^function! ale#fixers#perltidy#Fix(buffer) abort$/;"	f
ale#fixers#pgformatter#Fix	plugged/ale/autoload/ale/fixers/pgformatter.vim	/^function! ale#fixers#pgformatter#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#Fix	plugged/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#Fix(buffer) abort$/;"	f
ale#fixers#php_cs_fixer#GetExecutable	plugged/ale/autoload/ale/fixers/php_cs_fixer.vim	/^function! ale#fixers#php_cs_fixer#GetExecutable(buffer) abort$/;"	f
ale#fixers#phpcbf#Fix	plugged/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#Fix(buffer) abort$/;"	f
ale#fixers#phpcbf#GetExecutable	plugged/ale/autoload/ale/fixers/phpcbf.vim	/^function! ale#fixers#phpcbf#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#prettier#Fix	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#Fix(buffer) abort$/;"	f
ale#fixers#prettier#GetCwd	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetCwd(buffer) abort$/;"	f
ale#fixers#prettier#GetExecutable	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier#ProcessPrettierDOutput	plugged/ale/autoload/ale/fixers/prettier.vim	/^function! ale#fixers#prettier#ProcessPrettierDOutput(buffer, output) abort$/;"	f
ale#fixers#prettier_eslint#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#ApplyFixForVersion(buffer, version) abort$/;"	f
ale#fixers#prettier_eslint#Fix	plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#Fix(buffer) abort$/;"	f
ale#fixers#prettier_eslint#GetExecutable	plugged/ale/autoload/ale/fixers/prettier_eslint.vim	/^function! ale#fixers#prettier_eslint#GetExecutable(buffer) abort$/;"	f
ale#fixers#prettier_standard#Fix	plugged/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#Fix(buffer) abort$/;"	f
ale#fixers#prettier_standard#GetExecutable	plugged/ale/autoload/ale/fixers/prettier_standard.vim	/^function! ale#fixers#prettier_standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#protolint#Fix	plugged/ale/autoload/ale/fixers/protolint.vim	/^function! ale#fixers#protolint#Fix(buffer) abort$/;"	f
ale#fixers#protolint#GetExecutable	plugged/ale/autoload/ale/fixers/protolint.vim	/^function! ale#fixers#protolint#GetExecutable(buffer) abort$/;"	f
ale#fixers#ptop#Fix	plugged/ale/autoload/ale/fixers/ptop.vim	/^function! ale#fixers#ptop#Fix(buffer) abort$/;"	f
ale#fixers#puppetlint#Fix	plugged/ale/autoload/ale/fixers/puppetlint.vim	/^function! ale#fixers#puppetlint#Fix(buffer) abort$/;"	f
ale#fixers#purty#Fix	plugged/ale/autoload/ale/fixers/purty.vim	/^function! ale#fixers#purty#Fix(buffer) abort$/;"	f
ale#fixers#purty#GetExecutable	plugged/ale/autoload/ale/fixers/purty.vim	/^function! ale#fixers#purty#GetExecutable(buffer) abort$/;"	f
ale#fixers#qmlfmt#Fix	plugged/ale/autoload/ale/fixers/qmlfmt.vim	/^function! ale#fixers#qmlfmt#Fix(buffer) abort$/;"	f
ale#fixers#qmlfmt#GetExecutable	plugged/ale/autoload/ale/fixers/qmlfmt.vim	/^function! ale#fixers#qmlfmt#GetExecutable(buffer) abort$/;"	f
ale#fixers#refmt#Fix	plugged/ale/autoload/ale/fixers/refmt.vim	/^function! ale#fixers#refmt#Fix(buffer) abort$/;"	f
ale#fixers#remark_lint#Fix	plugged/ale/autoload/ale/fixers/remark_lint.vim	/^function! ale#fixers#remark_lint#Fix(buffer) abort$/;"	f
ale#fixers#remark_lint#GetExecutable	plugged/ale/autoload/ale/fixers/remark_lint.vim	/^function! ale#fixers#remark_lint#GetExecutable(buffer) abort$/;"	f
ale#fixers#reorder_python_imports#Fix	plugged/ale/autoload/ale/fixers/reorder_python_imports.vim	/^function! ale#fixers#reorder_python_imports#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#Fix	plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#Fix(buffer) abort$/;"	f
ale#fixers#rubocop#GetCommand	plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#GetCommand(buffer) abort$/;"	f
ale#fixers#rubocop#PostProcess	plugged/ale/autoload/ale/fixers/rubocop.vim	/^function! ale#fixers#rubocop#PostProcess(buffer, output) abort$/;"	f
ale#fixers#rufo#Fix	plugged/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#Fix(buffer) abort$/;"	f
ale#fixers#rufo#GetCommand	plugged/ale/autoload/ale/fixers/rufo.vim	/^function! ale#fixers#rufo#GetCommand(buffer) abort$/;"	f
ale#fixers#rustfmt#Fix	plugged/ale/autoload/ale/fixers/rustfmt.vim	/^function! ale#fixers#rustfmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#Fix	plugged/ale/autoload/ale/fixers/scalafmt.vim	/^function! ale#fixers#scalafmt#Fix(buffer) abort$/;"	f
ale#fixers#scalafmt#GetCommand	plugged/ale/autoload/ale/fixers/scalafmt.vim	/^function! ale#fixers#scalafmt#GetCommand(buffer) abort$/;"	f
ale#fixers#shfmt#Fix	plugged/ale/autoload/ale/fixers/shfmt.vim	/^function! ale#fixers#shfmt#Fix(buffer) abort$/;"	f
ale#fixers#sorbet#Fix	plugged/ale/autoload/ale/fixers/sorbet.vim	/^function! ale#fixers#sorbet#Fix(buffer) abort$/;"	f
ale#fixers#sorbet#GetCommand	plugged/ale/autoload/ale/fixers/sorbet.vim	/^function! ale#fixers#sorbet#GetCommand(buffer) abort$/;"	f
ale#fixers#sqlfmt#Fix	plugged/ale/autoload/ale/fixers/sqlfmt.vim	/^function! ale#fixers#sqlfmt#Fix(buffer) abort$/;"	f
ale#fixers#sqlformat#Fix	plugged/ale/autoload/ale/fixers/sqlformat.vim	/^function! ale#fixers#sqlformat#Fix(buffer) abort$/;"	f
ale#fixers#standard#Fix	plugged/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#Fix(buffer) abort$/;"	f
ale#fixers#standard#GetExecutable	plugged/ale/autoload/ale/fixers/standard.vim	/^function! ale#fixers#standard#GetExecutable(buffer) abort$/;"	f
ale#fixers#standardrb#Fix	plugged/ale/autoload/ale/fixers/standardrb.vim	/^function! ale#fixers#standardrb#Fix(buffer) abort$/;"	f
ale#fixers#standardrb#GetCommand	plugged/ale/autoload/ale/fixers/standardrb.vim	/^function! ale#fixers#standardrb#GetCommand(buffer) abort$/;"	f
ale#fixers#stylelint#Fix	plugged/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#Fix(buffer) abort$/;"	f
ale#fixers#stylelint#GetExecutable	plugged/ale/autoload/ale/fixers/stylelint.vim	/^function! ale#fixers#stylelint#GetExecutable(buffer) abort$/;"	f
ale#fixers#styler#Fix	plugged/ale/autoload/ale/fixers/styler.vim	/^function! ale#fixers#styler#Fix(buffer) abort$/;"	f
ale#fixers#stylish_haskell#Fix	plugged/ale/autoload/ale/fixers/stylish_haskell.vim	/^function! ale#fixers#stylish_haskell#Fix(buffer) abort$/;"	f
ale#fixers#stylish_haskell#GetExecutable	plugged/ale/autoload/ale/fixers/stylish_haskell.vim	/^function! ale#fixers#stylish_haskell#GetExecutable(buffer) abort$/;"	f
ale#fixers#swiftformat#Fix	plugged/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#Fix(buffer) abort$/;"	f
ale#fixers#swiftformat#GetExecutable	plugged/ale/autoload/ale/fixers/swiftformat.vim	/^function! ale#fixers#swiftformat#GetExecutable(buffer) abort$/;"	f
ale#fixers#terraform#Fix	plugged/ale/autoload/ale/fixers/terraform.vim	/^function! ale#fixers#terraform#Fix(buffer) abort$/;"	f
ale#fixers#textlint#Fix	plugged/ale/autoload/ale/fixers/textlint.vim	/^function! ale#fixers#textlint#Fix(buffer) abort$/;"	f
ale#fixers#tidy#Fix	plugged/ale/autoload/ale/fixers/tidy.vim	/^function! ale#fixers#tidy#Fix(buffer) abort$/;"	f
ale#fixers#tslint#Fix	plugged/ale/autoload/ale/fixers/tslint.vim	/^function! ale#fixers#tslint#Fix(buffer) abort$/;"	f
ale#fixers#uncrustify#Fix	plugged/ale/autoload/ale/fixers/uncrustify.vim	/^function! ale#fixers#uncrustify#Fix(buffer) abort$/;"	f
ale#fixers#vfmt#Fix	plugged/ale/autoload/ale/fixers/vfmt.vim	/^function! ale#fixers#vfmt#Fix(buffer) abort$/;"	f
ale#fixers#xmllint#Fix	plugged/ale/autoload/ale/fixers/xmllint.vim	/^function! ale#fixers#xmllint#Fix(buffer) abort$/;"	f
ale#fixers#xo#ApplyFixForVersion	plugged/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#ApplyFixForVersion(buffer, version, executable, options) abort$/;"	f
ale#fixers#xo#Fix	plugged/ale/autoload/ale/fixers/xo.vim	/^function! ale#fixers#xo#Fix(buffer) abort$/;"	f
ale#fixers#yamlfix#Fix	plugged/ale/autoload/ale/fixers/yamlfix.vim	/^function! ale#fixers#yamlfix#Fix(buffer) abort$/;"	f
ale#fixers#yapf#Fix	plugged/ale/autoload/ale/fixers/yapf.vim	/^function! ale#fixers#yapf#Fix(buffer) abort$/;"	f
ale#floating_preview#Show	plugged/ale/autoload/ale/floating_preview.vim	/^function! ale#floating_preview#Show(lines, ...) abort$/;"	f
ale#go#EnvString	plugged/ale/autoload/ale/go.vim	/^function! ale#go#EnvString(buffer) abort$/;"	f
ale#go#FindProjectRoot	plugged/ale/autoload/ale/go.vim	/^function! ale#go#FindProjectRoot(buffer) abort$/;"	f
ale#go#GetGoPathExecutable	plugged/ale/autoload/ale/go.vim	/^function! ale#go#GetGoPathExecutable(suffix) abort$/;"	f
ale#gradle#BuildClasspathCommand	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#BuildClasspathCommand(buffer) abort$/;"	f
ale#gradle#FindExecutable	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindExecutable(buffer) abort$/;"	f
ale#gradle#FindProjectRoot	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#FindProjectRoot(buffer) abort$/;"	f
ale#gradle#GetInitPath	plugged/ale/autoload/ale/gradle.vim	/^function! ale#gradle#GetInitPath() abort$/;"	f
ale#handlers#alex#CreateCommandCallback	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#CreateCommandCallback(flags) abort$/;"	f
ale#handlers#alex#DefineLinter	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#DefineLinter(filetype, flags) abort$/;"	f
ale#handlers#alex#GetExecutable	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#GetExecutable(buffer) abort$/;"	f
ale#handlers#alex#Handle	plugged/ale/autoload/ale/handlers/alex.vim	/^function! ale#handlers#alex#Handle(buffer, lines) abort$/;"	f
ale#handlers#atools#Handle	plugged/ale/autoload/ale/handlers/atools.vim	/^function! ale#handlers#atools#Handle(buffer, lines) abort$/;"	f
ale#handlers#ccls#GetInitOpts	plugged/ale/autoload/ale/handlers/ccls.vim	/^function! ale#handlers#ccls#GetInitOpts(buffer, init_options_var) abort$/;"	f
ale#handlers#ccls#GetProjectRoot	plugged/ale/autoload/ale/handlers/ccls.vim	/^function! ale#handlers#ccls#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#cppcheck#GetBufferPathIncludeOptions	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetBufferPathIncludeOptions(buffer) abort$/;"	f
ale#handlers#cppcheck#GetCompileCommandsOptions	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetCompileCommandsOptions(buffer) abort$/;"	f
ale#handlers#cppcheck#GetCwd	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#GetCwd(buffer) abort$/;"	f
ale#handlers#cppcheck#HandleCppCheckFormat	plugged/ale/autoload/ale/handlers/cppcheck.vim	/^function! ale#handlers#cppcheck#HandleCppCheckFormat(buffer, lines) abort$/;"	f
ale#handlers#cpplint#HandleCppLintFormat	plugged/ale/autoload/ale/handlers/cpplint.vim	/^function! ale#handlers#cpplint#HandleCppLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleCSSLintFormat	plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleCSSLintFormat(buffer, lines) abort$/;"	f
ale#handlers#css#HandleStyleLintFormat	plugged/ale/autoload/ale/handlers/css.vim	/^function! ale#handlers#css#HandleStyleLintFormat(buffer, lines) abort$/;"	f
ale#handlers#deno#GetExecutable	plugged/ale/autoload/ale/handlers/deno.vim	/^function! ale#handlers#deno#GetExecutable(buffer) abort$/;"	f
ale#handlers#deno#GetProjectRoot	plugged/ale/autoload/ale/handlers/deno.vim	/^function! ale#handlers#deno#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#elixir#FindMixProjectRoot	plugged/ale/autoload/ale/handlers/elixir.vim	/^function! ale#handlers#elixir#FindMixProjectRoot(buffer) abort$/;"	f
ale#handlers#elixir#FindMixUmbrellaRoot	plugged/ale/autoload/ale/handlers/elixir.vim	/^function! ale#handlers#elixir#FindMixUmbrellaRoot(buffer) abort$/;"	f
ale#handlers#eslint#FindConfig	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#FindConfig(buffer) abort$/;"	f
ale#handlers#eslint#GetCommand	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetCommand(buffer) abort$/;"	f
ale#handlers#eslint#GetCwd	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetCwd(buffer) abort$/;"	f
ale#handlers#eslint#GetExecutable	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#eslint#Handle	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#Handle(buffer, lines) abort$/;"	f
ale#handlers#eslint#HandleJSON	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! ale#handlers#eslint#HandleJSON(buffer, lines) abort$/;"	f
ale#handlers#fecs#GetCommand	plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#GetCommand(buffer) abort$/;"	f
ale#handlers#fecs#GetExecutable	plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#GetExecutable(buffer) abort$/;"	f
ale#handlers#fecs#Handle	plugged/ale/autoload/ale/handlers/fecs.vim	/^function! ale#handlers#fecs#Handle(buffer, lines) abort$/;"	f
ale#handlers#flawfinder#HandleFlawfinderFormat	plugged/ale/autoload/ale/handlers/flawfinder.vim	/^function! ale#handlers#flawfinder#HandleFlawfinderFormat(buffer, lines) abort$/;"	f
ale#handlers#gawk#HandleGawkFormat	plugged/ale/autoload/ale/handlers/gawk.vim	/^function! ale#handlers#gawk#HandleGawkFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormat	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormat(buffer, lines) abort$/;"	f
ale#handlers#gcc#HandleGCCFormatWithIncludes	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! ale#handlers#gcc#HandleGCCFormatWithIncludes(buffer, lines) abort$/;"	f
ale#handlers#go#Handler	plugged/ale/autoload/ale/handlers/go.vim	/^function! ale#handlers#go#Handler(buffer, lines) abort$/;"	f
ale#handlers#haskell#GetStackExecutable	plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#GetStackExecutable(bufnr) abort$/;"	f
ale#handlers#haskell#HandleGHCFormat	plugged/ale/autoload/ale/handlers/haskell.vim	/^function! ale#handlers#haskell#HandleGHCFormat(buffer, lines) abort$/;"	f
ale#handlers#haskell_stack#EscapeExecutable	plugged/ale/autoload/ale/handlers/haskell_stack.vim	/^function! ale#handlers#haskell_stack#EscapeExecutable(executable, stack_exec) abort$/;"	f
ale#handlers#hdl_checker#DefineLinter	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#DefineLinter(filetype) abort$/;"	f
ale#handlers#hdl_checker#GetCommand	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetCommand(buffer) abort$/;"	f
ale#handlers#hdl_checker#GetExecutable	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetExecutable(buffer) abort$/;"	f
ale#handlers#hdl_checker#GetInitOptions	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetInitOptions(buffer) abort$/;"	f
ale#handlers#hdl_checker#GetProjectRoot	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#hdl_checker#IsDotGit	plugged/ale/autoload/ale/handlers/hdl_checker.vim	/^function! ale#handlers#hdl_checker#IsDotGit(path) abort$/;"	f
ale#handlers#hlint#GetExecutable	plugged/ale/autoload/ale/handlers/hlint.vim	/^function! ale#handlers#hlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#inko#GetType	plugged/ale/autoload/ale/handlers/inko.vim	/^function! ale#handlers#inko#GetType(severity) abort$/;"	f
ale#handlers#inko#Handle	plugged/ale/autoload/ale/handlers/inko.vim	/^function! ale#handlers#inko#Handle(buffer, lines) abort$/;"	f
ale#handlers#ktlint#GetCommand	plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#GetCommand(buffer) abort$/;"	f
ale#handlers#ktlint#GetRulesets	plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#GetRulesets(buffer) abort$/;"	f
ale#handlers#ktlint#Handle	plugged/ale/autoload/ale/handlers/ktlint.vim	/^function! ale#handlers#ktlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#languagetool#DefineLinter	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#DefineLinter(filetype) abort$/;"	f
ale#handlers#languagetool#GetCommand	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#GetCommand(buffer) abort$/;"	f
ale#handlers#languagetool#GetExecutable	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#GetExecutable(buffer) abort$/;"	f
ale#handlers#languagetool#HandleOutput	plugged/ale/autoload/ale/handlers/languagetool.vim	/^function! ale#handlers#languagetool#HandleOutput(buffer, lines) abort$/;"	f
ale#handlers#markdownlint#Handle	plugged/ale/autoload/ale/handlers/markdownlint.vim	/^function! ale#handlers#markdownlint#Handle(buffer, lines) abort$/;"	f
ale#handlers#ocamllsp#GetCommand	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetCommand(buffer) abort$/;"	f
ale#handlers#ocamllsp#GetExecutable	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetExecutable(buffer) abort$/;"	f
ale#handlers#ocamllsp#GetLanguage	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetLanguage(buffer) abort$/;"	f
ale#handlers#ocamllsp#GetProjectRoot	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^function! ale#handlers#ocamllsp#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#ols#GetCommand	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetCommand(buffer) abort$/;"	f
ale#handlers#ols#GetExecutable	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetExecutable(buffer) abort$/;"	f
ale#handlers#ols#GetLanguage	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetLanguage(buffer) abort$/;"	f
ale#handlers#ols#GetProjectRoot	plugged/ale/autoload/ale/handlers/ols.vim	/^function! ale#handlers#ols#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#pony#HandlePonycFormat	plugged/ale/autoload/ale/handlers/pony.vim	/^function! ale#handlers#pony#HandlePonycFormat(buffer, lines) abort$/;"	f
ale#handlers#redpen#HandleRedpenOutput	plugged/ale/autoload/ale/handlers/redpen.vim	/^function! ale#handlers#redpen#HandleRedpenOutput(buffer, lines) abort$/;"	f
ale#handlers#ruby#HandleSyntaxErrors	plugged/ale/autoload/ale/handlers/ruby.vim	/^function! ale#handlers#ruby#HandleSyntaxErrors(buffer, lines) abort$/;"	f
ale#handlers#rust#HandleRustErrors	plugged/ale/autoload/ale/handlers/rust.vim	/^function! ale#handlers#rust#HandleRustErrors(buffer, lines) abort$/;"	f
ale#handlers#scala#HandleScalacLintFormat	plugged/ale/autoload/ale/handlers/scala.vim	/^function! ale#handlers#scala#HandleScalacLintFormat(buffer, lines) abort$/;"	f
ale#handlers#sh#GetShellType	plugged/ale/autoload/ale/handlers/sh.vim	/^function! ale#handlers#sh#GetShellType(buffer) abort$/;"	f
ale#handlers#shellcheck#DefineLinter	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#DefineLinter(filetype) abort$/;"	f
ale#handlers#shellcheck#GetCommand	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetCommand(buffer, version) abort$/;"	f
ale#handlers#shellcheck#GetCwd	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetCwd(buffer) abort$/;"	f
ale#handlers#shellcheck#GetDialectArgument	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetDialectArgument(buffer) abort$/;"	f
ale#handlers#shellcheck#GetShellcheckDialectDirective	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#GetShellcheckDialectDirective(buffer) abort$/;"	f
ale#handlers#shellcheck#Handle	plugged/ale/autoload/ale/handlers/shellcheck.vim	/^function! ale#handlers#shellcheck#Handle(buffer, lines) abort$/;"	f
ale#handlers#sml#GetCmFile	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetCmFile(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjCm	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjCm(buffer) abort$/;"	f
ale#handlers#sml#GetExecutableSmlnjFile	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#GetExecutableSmlnjFile(buffer) abort$/;"	f
ale#handlers#sml#Handle	plugged/ale/autoload/ale/handlers/sml.vim	/^function! ale#handlers#sml#Handle(buffer, lines) abort$/;"	f
ale#handlers#solhint#FindConfig	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#FindConfig(buffer) abort$/;"	f
ale#handlers#solhint#GetCommand	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#GetCommand(buffer) abort$/;"	f
ale#handlers#solhint#GetCwd	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#GetCwd(buffer) abort$/;"	f
ale#handlers#solhint#GetExecutable	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#GetExecutable(buffer) abort$/;"	f
ale#handlers#solhint#Handle	plugged/ale/autoload/ale/handlers/solhint.vim	/^function! ale#handlers#solhint#Handle(buffer, lines) abort$/;"	f
ale#handlers#spectral#HandleSpectralOutput	plugged/ale/autoload/ale/handlers/spectral.vim	/^function! ale#handlers#spectral#HandleSpectralOutput(buffer, lines) abort$/;"	f
ale#handlers#textlint#GetCommand	plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetCommand(buffer) abort$/;"	f
ale#handlers#textlint#GetExecutable	plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#GetExecutable(buffer) abort$/;"	f
ale#handlers#textlint#HandleTextlintOutput	plugged/ale/autoload/ale/handlers/textlint.vim	/^function! ale#handlers#textlint#HandleTextlintOutput(buffer, lines) abort$/;"	f
ale#handlers#tslint#GetExecutable	plugged/ale/autoload/ale/handlers/tslint.vim	/^function! ale#handlers#tslint#GetExecutable(buffer) abort$/;"	f
ale#handlers#tslint#InitVariables	plugged/ale/autoload/ale/handlers/tslint.vim	/^function! ale#handlers#tslint#InitVariables() abort$/;"	f
ale#handlers#tsserver#GetProjectRoot	plugged/ale/autoload/ale/handlers/tsserver.vim	/^function! ale#handlers#tsserver#GetProjectRoot(buffer) abort$/;"	f
ale#handlers#unix#HandleAsError	plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsError(buffer, lines) abort$/;"	f
ale#handlers#unix#HandleAsWarning	plugged/ale/autoload/ale/handlers/unix.vim	/^function! ale#handlers#unix#HandleAsWarning(buffer, lines) abort$/;"	f
ale#handlers#vale#GetType	plugged/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#GetType(severity) abort$/;"	f
ale#handlers#vale#Handle	plugged/ale/autoload/ale/handlers/vale.vim	/^function! ale#handlers#vale#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#DefineLinter	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#DefineLinter(filetype) abort$/;"	f
ale#handlers#writegood#GetCommand	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetCommand(buffer) abort$/;"	f
ale#handlers#writegood#GetExecutable	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#GetExecutable(buffer) abort$/;"	f
ale#handlers#writegood#Handle	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#Handle(buffer, lines) abort$/;"	f
ale#handlers#writegood#ResetOptions	plugged/ale/autoload/ale/handlers/writegood.vim	/^function! ale#handlers#writegood#ResetOptions() abort$/;"	f
ale#handlers#xo#GetExecutable	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetExecutable(buffer) abort$/;"	f
ale#handlers#xo#GetLintCommand	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetLintCommand(buffer) abort$/;"	f
ale#handlers#xo#GetOptions	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetOptions(buffer) abort$/;"	f
ale#handlers#xo#GetType	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#GetType(buffer) abort$/;"	f
ale#handlers#xo#HandleJSON	plugged/ale/autoload/ale/handlers/xo.vim	/^function! ale#handlers#xo#HandleJSON(buffer, lines) abort$/;"	f
ale#handlers#yamllint#GetCommand	plugged/ale/autoload/ale/handlers/yamllint.vim	/^function! ale#handlers#yamllint#GetCommand(buffer) abort$/;"	f
ale#handlers#yamllint#Handle	plugged/ale/autoload/ale/handlers/yamllint.vim	/^function! ale#handlers#yamllint#Handle(buffer, lines) abort$/;"	f
ale#highlight#BufferHidden	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#BufferHidden(buffer) abort$/;"	f
ale#highlight#CreatePositions	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#CreatePositions(line, col, end_line, end_col) abort$/;"	f
ale#highlight#RemoveHighlights	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#RemoveHighlights() abort$/;"	f
ale#highlight#SetHighlights	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#SetHighlights(buffer, loclist) abort$/;"	f
ale#highlight#UpdateHighlights	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#UpdateHighlights() abort$/;"	f
ale#highlight#nvim_buf_add_highlight	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#nvim_buf_add_highlight(buffer, ns_id, hl_group, line, col_start, col_end/;"	f
ale#highlight#nvim_buf_clear_namespace	plugged/ale/autoload/ale/highlight.vim	/^function! ale#highlight#nvim_buf_clear_namespace(buffer, ns_id, line_start, line_end) abort$/;"	f
ale#history#Add	plugged/ale/autoload/ale/history.vim	/^function! ale#history#Add(buffer, status, job_id, command) abort$/;"	f
ale#history#Get	plugged/ale/autoload/ale/history.vim	/^function! ale#history#Get(buffer) abort$/;"	f
ale#history#RememberOutput	plugged/ale/autoload/ale/history.vim	/^function! ale#history#RememberOutput(buffer, job_id, output) abort$/;"	f
ale#history#SetExitCode	plugged/ale/autoload/ale/history.vim	/^function! ale#history#SetExitCode(buffer, job_id, exit_code) abort$/;"	f
ale#hover#ClearLSPData	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ClearLSPData() abort$/;"	f
ale#hover#GetMap	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#GetMap() abort$/;"	f
ale#hover#HandleLSPResponse	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#hover#HandleTSServerResponse	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#hover#ParseLSPResult	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ParseLSPResult(contents) abort$/;"	f
ale#hover#SetMap	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#SetMap(map) abort$/;"	f
ale#hover#Show	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#Show(buffer, line, col, opt) abort$/;"	f
ale#hover#ShowAtCursor	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowAtCursor() abort$/;"	f
ale#hover#ShowDocumentationAtCursor	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowDocumentationAtCursor() abort$/;"	f
ale#hover#ShowTruncatedMessageAtCursor	plugged/ale/autoload/ale/hover.vim	/^function! ale#hover#ShowTruncatedMessageAtCursor() abort$/;"	f
ale#java#FindProjectRoot	plugged/ale/autoload/ale/java.vim	/^function! ale#java#FindProjectRoot(buffer) abort$/;"	f
ale#job#HasOpenChannel	plugged/ale/autoload/ale/job.vim	/^function! ale#job#HasOpenChannel(job_id) abort$/;"	f
ale#job#IsRunning	plugged/ale/autoload/ale/job.vim	/^function! ale#job#IsRunning(job_id) abort$/;"	f
ale#job#ParseVim8ProcessID	plugged/ale/autoload/ale/job.vim	/^function! ale#job#ParseVim8ProcessID(job_string) abort$/;"	f
ale#job#PrepareCommand	plugged/ale/autoload/ale/job.vim	/^function! ale#job#PrepareCommand(buffer, command) abort$/;"	f
ale#job#SendRaw	plugged/ale/autoload/ale/job.vim	/^function! ale#job#SendRaw(job_id, string) abort$/;"	f
ale#job#Start	plugged/ale/autoload/ale/job.vim	/^function! ale#job#Start(command, options) abort$/;"	f
ale#job#StartWithCmd	plugged/ale/autoload/ale/job.vim	/^function! ale#job#StartWithCmd(command, options) abort$/;"	f
ale#job#Stop	plugged/ale/autoload/ale/job.vim	/^function! ale#job#Stop(job_id) abort$/;"	f
ale#job#ValidateArguments	plugged/ale/autoload/ale/job.vim	/^function! ale#job#ValidateArguments(command, options) abort$/;"	f
ale#julia#FindProjectRoot	plugged/ale/autoload/ale/julia.vim	/^function! ale#julia#FindProjectRoot(buffer) abort$/;"	f
ale#linter#Define	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Define(filetype, linter) abort$/;"	f
ale#linter#Get	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Get(original_filetypes) abort$/;"	f
ale#linter#GetAddress	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAddress(buffer, linter) abort$/;"	f
ale#linter#GetAll	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetAll(filetypes) abort$/;"	f
ale#linter#GetCommand	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetCommand(buffer, linter) abort$/;"	f
ale#linter#GetCwd	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetCwd(buffer, linter) abort$/;"	f
ale#linter#GetExecutable	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetExecutable(buffer, linter) abort$/;"	f
ale#linter#GetLanguage	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetLanguage(buffer, linter) abort$/;"	f
ale#linter#GetLintersLoaded	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#GetLintersLoaded() abort$/;"	f
ale#linter#PreProcess	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreProcess(filetype, linter) abort$/;"	f
ale#linter#PreventLoading	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#PreventLoading(filetype) abort$/;"	f
ale#linter#RemoveIgnored	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#RemoveIgnored(buffer, filetype, linters) abort$/;"	f
ale#linter#Reset	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#Reset() abort$/;"	f
ale#linter#ResolveFiletype	plugged/ale/autoload/ale/linter.vim	/^function! ale#linter#ResolveFiletype(original_filetype) abort$/;"	f
ale#list#GetCombinedList	plugged/ale/autoload/ale/list.vim	/^function! ale#list#GetCombinedList() abort$/;"	f
ale#list#IsQuickfixOpen	plugged/ale/autoload/ale/list.vim	/^function! ale#list#IsQuickfixOpen() abort$/;"	f
ale#list#SetLists	plugged/ale/autoload/ale/list.vim	/^function! ale#list#SetLists(buffer, loclist) abort$/;"	f
ale#loclist_jumping#FindNearest	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#FindNearest(direction, wrap, ...) abort$/;"	f
ale#loclist_jumping#Jump	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#Jump(direction, ...) abort$/;"	f
ale#loclist_jumping#JumpToIndex	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#JumpToIndex(index) abort$/;"	f
ale#loclist_jumping#WrapJump	plugged/ale/autoload/ale/loclist_jumping.vim	/^function! ale#loclist_jumping#WrapJump(direction, sargs) abort$/;"	f
ale#lsp#CloseDocument	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CloseDocument(buffer) abort$/;"	f
ale#lsp#CloseDocument	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CloseDocument(conn_id) abort$/;"	f
ale#lsp#ConnectToAddress	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ConnectToAddress(conn_id, address) abort$/;"	f
ale#lsp#CreateMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#CreateMessageData(message) abort$/;"	f
ale#lsp#GetConnections	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetConnections() abort$/;"	f
ale#lsp#GetNextMessageID	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#GetNextMessageID() abort$/;"	f
ale#lsp#HandleInitResponse	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleInitResponse(conn, response) abort$/;"	f
ale#lsp#HandleMessage	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HandleMessage(conn_id, message) abort$/;"	f
ale#lsp#HasCapability	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#HasCapability(conn_id, capability) abort$/;"	f
ale#lsp#MarkConnectionAsTsserver	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#MarkConnectionAsTsserver(conn_id) abort$/;"	f
ale#lsp#MarkDocumentAsOpen	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#MarkDocumentAsOpen(id, buffer) abort$/;"	f
ale#lsp#NotifyForChanges	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#NotifyForChanges(conn_id, buffer) abort$/;"	f
ale#lsp#OnInit	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OnInit(conn_id, Callback) abort$/;"	f
ale#lsp#OpenDocument	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#OpenDocument(conn_id, buffer, language_id) abort$/;"	f
ale#lsp#ReadMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ReadMessageData(data) abort$/;"	f
ale#lsp#Register	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Register(executable_or_address, project, init_options) abort$/;"	f
ale#lsp#RegisterCallback	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RegisterCallback(conn_id, callback) abort$/;"	f
ale#lsp#RemoveConnectionWithID	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#RemoveConnectionWithID(id) abort$/;"	f
ale#lsp#ResetConnections	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#ResetConnections() abort$/;"	f
ale#lsp#Send	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Send(conn_id, message) abort$/;"	f
ale#lsp#StartProgram	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StartProgram(conn_id, executable, command) abort$/;"	f
ale#lsp#Stop	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#Stop(conn_id) abort$/;"	f
ale#lsp#StopAll	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#StopAll() abort$/;"	f
ale#lsp#UpdateConfig	plugged/ale/autoload/ale/lsp.vim	/^function! ale#lsp#UpdateConfig(conn_id, buffer, config) abort$/;"	f
ale#lsp#message#CodeAction	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#CodeAction(buffer, line, column, end_line, end_column, diagnostics) ab/;"	f
ale#lsp#message#Completion	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Completion(buffer, line, column, trigger_character) abort$/;"	f
ale#lsp#message#Definition	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#message#DidChange	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChange(buffer) abort$/;"	f
ale#lsp#message#DidChangeConfiguration	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidChangeConfiguration(buffer, config) abort$/;"	f
ale#lsp#message#DidClose	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidClose(buffer) abort$/;"	f
ale#lsp#message#DidOpen	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidOpen(buffer, language_id) abort$/;"	f
ale#lsp#message#DidSave	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#DidSave(buffer) abort$/;"	f
ale#lsp#message#ExecuteCommand	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#ExecuteCommand(command, arguments) abort$/;"	f
ale#lsp#message#Exit	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Exit() abort$/;"	f
ale#lsp#message#GetNextVersionID	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#GetNextVersionID() abort$/;"	f
ale#lsp#message#Hover	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Hover(buffer, line, column) abort$/;"	f
ale#lsp#message#Initialize	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialize(root_path, options, capabilities) abort$/;"	f
ale#lsp#message#Initialized	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Initialized() abort$/;"	f
ale#lsp#message#References	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#References(buffer, line, column) abort$/;"	f
ale#lsp#message#Rename	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Rename(buffer, line, column, new_name) abort$/;"	f
ale#lsp#message#Shutdown	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Shutdown() abort$/;"	f
ale#lsp#message#Symbol	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#Symbol(query) abort$/;"	f
ale#lsp#message#TypeDefinition	plugged/ale/autoload/ale/lsp/message.vim	/^function! ale#lsp#message#TypeDefinition(buffer, line, column) abort$/;"	f
ale#lsp#reset#StopAllLSPs	plugged/ale/autoload/ale/lsp/reset.vim	/^function! ale#lsp#reset#StopAllLSPs() abort$/;"	f
ale#lsp#response#GetErrorMessage	plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#GetErrorMessage(response) abort$/;"	f
ale#lsp#response#ReadDiagnostics	plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadDiagnostics(response) abort$/;"	f
ale#lsp#response#ReadTSServerDiagnostics	plugged/ale/autoload/ale/lsp/response.vim	/^function! ale#lsp#response#ReadTSServerDiagnostics(response) abort$/;"	f
ale#lsp#tsserver_message#Change	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Change(buffer) abort$/;"	f
ale#lsp#tsserver_message#Close	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Close(buffer) abort$/;"	f
ale#lsp#tsserver_message#CompletionEntryDetails	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#CompletionEntryDetails(buffer, line, column, entry_names) abo/;"	f
ale#lsp#tsserver_message#Completions	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Completions($/;"	f
ale#lsp#tsserver_message#Definition	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Definition(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#GetApplicableRefactors	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetApplicableRefactors(buffer, line, column, end_line, end_co/;"	f
ale#lsp#tsserver_message#GetCodeFixes	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetCodeFixes(buffer, line, column, end_line, end_column, erro/;"	f
ale#lsp#tsserver_message#GetEditsForRefactor	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#GetEditsForRefactor(buffer, line, column, end_line, end_colum/;"	f
ale#lsp#tsserver_message#Geterr	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Geterr(buffer) abort$/;"	f
ale#lsp#tsserver_message#Open	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Open(buffer) abort$/;"	f
ale#lsp#tsserver_message#OrganizeImports	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#OrganizeImports(buffer) abort$/;"	f
ale#lsp#tsserver_message#Quickinfo	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Quickinfo(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#References	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#References(buffer, line, column) abort$/;"	f
ale#lsp#tsserver_message#Rename	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#Rename($/;"	f
ale#lsp#tsserver_message#TypeDefinition	plugged/ale/autoload/ale/lsp/tsserver_message.vim	/^function! ale#lsp#tsserver_message#TypeDefinition(buffer, line, column) abort$/;"	f
ale#lsp_linter#CheckWithLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#CheckWithLSP(buffer, linter) abort$/;"	f
ale#lsp_linter#ClearLSPData	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#ClearLSPData() abort$/;"	f
ale#lsp_linter#FindProjectRoot	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#FindProjectRoot(buffer, linter) abort$/;"	f
ale#lsp_linter#GetConfig	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetConfig(buffer, linter) abort$/;"	f
ale#lsp_linter#GetOptions	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#GetOptions(buffer, linter) abort$/;"	f
ale#lsp_linter#HandleLSPResponse	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#lsp_linter#OnInit	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#OnInit(linter, details, Callback) abort$/;"	f
ale#lsp_linter#SendRequest	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#SendRequest(buffer, linter_name, message, ...) abort$/;"	f
ale#lsp_linter#SetLSPLinterMap	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#SetLSPLinterMap(replacement_map) abort$/;"	f
ale#lsp_linter#StartLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! ale#lsp_linter#StartLSP(buffer, linter, Callback) abort$/;"	f
ale#lsp_window#HandleShowMessage	plugged/ale/autoload/ale/lsp_window.vim	/^function! ale#lsp_window#HandleShowMessage(linter_name, format, params) abort$/;"	f
ale#maven#BuildClasspathCommand	plugged/ale/autoload/ale/maven.vim	/^function! ale#maven#BuildClasspathCommand(buffer) abort$/;"	f
ale#maven#FindExecutable	plugged/ale/autoload/ale/maven.vim	/^function! ale#maven#FindExecutable(buffer) abort$/;"	f
ale#maven#FindProjectRoot	plugged/ale/autoload/ale/maven.vim	/^function! ale#maven#FindProjectRoot(buffer) abort$/;"	f
ale#node#Executable	plugged/ale/autoload/ale/node.vim	/^function! ale#node#Executable(buffer, executable) abort$/;"	f
ale#organize_imports#Execute	plugged/ale/autoload/ale/organize_imports.vim	/^function! ale#organize_imports#Execute() abort$/;"	f
ale#organize_imports#HandleTSServerResponse	plugged/ale/autoload/ale/organize_imports.vim	/^function! ale#organize_imports#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#other_source#ShowResults	plugged/ale/autoload/ale/other_source.vim	/^function! ale#other_source#ShowResults(buffer, linter_name, loclist) abort$/;"	f
ale#other_source#StartChecking	plugged/ale/autoload/ale/other_source.vim	/^function! ale#other_source#StartChecking(buffer, linter_name) abort$/;"	f
ale#path#Dirname	plugged/ale/autoload/ale/path.vim	/^function! ale#path#Dirname(path) abort$/;"	f
ale#path#FindExecutable	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#path#FindNearestDirectory	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestDirectory(buffer, directory_name) abort$/;"	f
ale#path#FindNearestExecutable	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestExecutable(buffer, path_list) abort$/;"	f
ale#path#FindNearestFile	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FindNearestFile(buffer, filename) abort$/;"	f
ale#path#FromURI	plugged/ale/autoload/ale/path.vim	/^function! ale#path#FromURI(uri) abort$/;"	f
ale#path#GetAbsPath	plugged/ale/autoload/ale/path.vim	/^function! ale#path#GetAbsPath(base_directory, filename) abort$/;"	f
ale#path#IsAbsolute	plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsAbsolute(filename) abort$/;"	f
ale#path#IsBufferPath	plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsBufferPath(buffer, complex_filename) abort$/;"	f
ale#path#IsTempName	plugged/ale/autoload/ale/path.vim	/^function! ale#path#IsTempName(filename) abort$/;"	f
ale#path#RemoveDriveLetter	plugged/ale/autoload/ale/path.vim	/^function! ale#path#RemoveDriveLetter(path) abort$/;"	f
ale#path#ResolveLocalPath	plugged/ale/autoload/ale/path.vim	/^function! ale#path#ResolveLocalPath(buffer, search_string, global_fallback) abort$/;"	f
ale#path#Simplify	plugged/ale/autoload/ale/path.vim	/^function! ale#path#Simplify(path) abort$/;"	f
ale#path#ToURI	plugged/ale/autoload/ale/path.vim	/^function! ale#path#ToURI(path) abort$/;"	f
ale#path#Upwards	plugged/ale/autoload/ale/path.vim	/^function! ale#path#Upwards(path) abort$/;"	f
ale#pattern_options#SetOptions	plugged/ale/autoload/ale/pattern_options.vim	/^function! ale#pattern_options#SetOptions(buffer) abort$/;"	f
ale#powershell#RunPowerShell	plugged/ale/autoload/ale/powershell.vim	/^function! ale#powershell#RunPowerShell(buffer, base_var_name, command) abort$/;"	f
ale#preview#CloseIfTypeMatches	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#CloseIfTypeMatches(filetype) abort$/;"	f
ale#preview#OpenSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelection() abort$/;"	f
ale#preview#OpenSelectionInTab	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#OpenSelectionInTab() abort$/;"	f
ale#preview#RepeatSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#RepeatSelection() abort$/;"	f
ale#preview#SetLastSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#SetLastSelection(item_list, options) abort$/;"	f
ale#preview#Show	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#Show(lines, ...) abort$/;"	f
ale#preview#ShowSelection	plugged/ale/autoload/ale/preview.vim	/^function! ale#preview#ShowSelection(item_list, ...) abort$/;"	f
ale#python#FindExecutable	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindExecutable(buffer, base_var_name, path_list) abort$/;"	f
ale#python#FindProjectRoot	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRoot(buffer) abort$/;"	f
ale#python#FindProjectRootIni	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindProjectRootIni(buffer) abort$/;"	f
ale#python#FindVirtualenv	plugged/ale/autoload/ale/python.vim	/^function! ale#python#FindVirtualenv(buffer) abort$/;"	f
ale#python#HandleTraceback	plugged/ale/autoload/ale/python.vim	/^function! ale#python#HandleTraceback(lines, limit) abort$/;"	f
ale#python#PipenvPresent	plugged/ale/autoload/ale/python.vim	/^function! ale#python#PipenvPresent(buffer) abort$/;"	f
ale#references#ClearLSPData	plugged/ale/autoload/ale/references.vim	/^function! ale#references#ClearLSPData() abort$/;"	f
ale#references#Find	plugged/ale/autoload/ale/references.vim	/^function! ale#references#Find(...) abort$/;"	f
ale#references#GetMap	plugged/ale/autoload/ale/references.vim	/^function! ale#references#GetMap() abort$/;"	f
ale#references#HandleLSPResponse	plugged/ale/autoload/ale/references.vim	/^function! ale#references#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#references#HandleTSServerResponse	plugged/ale/autoload/ale/references.vim	/^function! ale#references#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#references#SetMap	plugged/ale/autoload/ale/references.vim	/^function! ale#references#SetMap(map) abort$/;"	f
ale#rename#ClearLSPData	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#ClearLSPData() abort$/;"	f
ale#rename#Execute	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#Execute() abort$/;"	f
ale#rename#GetMap	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#GetMap() abort$/;"	f
ale#rename#HandleLSPResponse	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#rename#HandleTSServerResponse	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#HandleTSServerResponse(conn_id, response) abort$/;"	f
ale#rename#SetMap	plugged/ale/autoload/ale/rename.vim	/^function! ale#rename#SetMap(map) abort$/;"	f
ale#ruby#EscapeExecutable	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#EscapeExecutable(executable, bundle_exec) abort$/;"	f
ale#ruby#FindProjectRoot	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindProjectRoot(buffer) abort$/;"	f
ale#ruby#FindRailsRoot	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#FindRailsRoot(buffer) abort$/;"	f
ale#ruby#HandleRubocopOutput	plugged/ale/autoload/ale/ruby.vim	/^function! ale#ruby#HandleRubocopOutput(buffer, lines) abort$/;"	f
ale#semver#GTE	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#GTE(lhs, rhs) abort$/;"	f
ale#semver#ParseVersion	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#ParseVersion(version_lines) abort$/;"	f
ale#semver#ResetVersionCache	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#ResetVersionCache() abort$/;"	f
ale#semver#RunWithVersionCheck	plugged/ale/autoload/ale/semver.vim	/^function! ale#semver#RunWithVersionCheck(buffer, executable, command, Callback) abort$/;"	f
ale#sign#Clear	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#Clear() abort$/;"	f
ale#sign#FindCurrentSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#FindCurrentSigns(buffer) abort$/;"	f
ale#sign#GetSignCommands	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignCommands(buffer, was_sign_set, sign_map) abort$/;"	f
ale#sign#GetSignName	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#GetSignName(sublist) abort$/;"	f
ale#sign#ParsePattern	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParsePattern() abort$/;"	f
ale#sign#ParseSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSigns(line_list) abort$/;"	f
ale#sign#ParseSignsWithGetPlaced	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ParseSignsWithGetPlaced(buffer) abort$/;"	f
ale#sign#ReadSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#ReadSigns(buffer) abort$/;"	f
ale#sign#SetSigns	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetSigns(buffer, loclist) abort$/;"	f
ale#sign#SetUpDefaultColumnWithoutErrorsHighlight	plugged/ale/autoload/ale/sign.vim	/^function! ale#sign#SetUpDefaultColumnWithoutErrorsHighlight() abort$/;"	f
ale#socket#Close	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Close(channel_id) abort$/;"	f
ale#socket#GetAddress	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#GetAddress(channel_id) abort$/;"	f
ale#socket#IsOpen	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#IsOpen(channel_id) abort$/;"	f
ale#socket#Open	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Open(address, options) abort$/;"	f
ale#socket#Send	plugged/ale/autoload/ale/socket.vim	/^function! ale#socket#Send(channel_id, data) abort$/;"	f
ale#statusline#Count	plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Count(buffer) abort$/;"	f
ale#statusline#FirstProblem	plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#FirstProblem(buffer, type) abort$/;"	f
ale#statusline#Update	plugged/ale/autoload/ale/statusline.vim	/^function! ale#statusline#Update(buffer, loclist) abort$/;"	f
ale#swift#FindProjectRoot	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#FindProjectRoot(buffer) abort$/;"	f
ale#swift#GetAppleSwiftFormatCommand	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#GetAppleSwiftFormatCommand(buffer) abort$/;"	f
ale#swift#GetAppleSwiftFormatConfigArgs	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#GetAppleSwiftFormatConfigArgs(buffer) abort$/;"	f
ale#swift#GetAppleSwiftFormatExecutable	plugged/ale/autoload/ale/swift.vim	/^function! ale#swift#GetAppleSwiftFormatExecutable(buffer) abort$/;"	f
ale#symbol#ClearLSPData	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#ClearLSPData() abort$/;"	f
ale#symbol#GetMap	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#GetMap() abort$/;"	f
ale#symbol#HandleLSPResponse	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#HandleLSPResponse(conn_id, response) abort$/;"	f
ale#symbol#Search	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#Search(args) abort$/;"	f
ale#symbol#SetMap	plugged/ale/autoload/ale/symbol.vim	/^function! ale#symbol#SetMap(map) abort$/;"	f
ale#test#FlushJobs	plugged/ale/autoload/ale/test.vim	/^function! ale#test#FlushJobs() abort$/;"	f
ale#test#GetFilename	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetFilename(path) abort$/;"	f
ale#test#GetLoclistWithoutModule	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetLoclistWithoutModule() abort$/;"	f
ale#test#GetPreviewWindowText	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetPreviewWindowText() abort$/;"	f
ale#test#GetQflistWithoutModule	plugged/ale/autoload/ale/test.vim	/^function! ale#test#GetQflistWithoutModule() abort$/;"	f
ale#test#RestoreDirectory	plugged/ale/autoload/ale/test.vim	/^function! ale#test#RestoreDirectory() abort$/;"	f
ale#test#SetDirectory	plugged/ale/autoload/ale/test.vim	/^function! ale#test#SetDirectory(docker_path) abort$/;"	f
ale#test#SetFilename	plugged/ale/autoload/ale/test.vim	/^function! ale#test#SetFilename(path) abort$/;"	f
ale#test#WaitForJobs	plugged/ale/autoload/ale/test.vim	/^function! ale#test#WaitForJobs(deadline) abort$/;"	f
ale#toggle#Disable	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Disable() abort$/;"	f
ale#toggle#DisableBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#DisableBuffer(buffer) abort$/;"	f
ale#toggle#Enable	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Enable() abort$/;"	f
ale#toggle#EnableBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#EnableBuffer(buffer) abort$/;"	f
ale#toggle#Reset	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Reset() abort$/;"	f
ale#toggle#ResetBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ResetBuffer(buffer) abort$/;"	f
ale#toggle#Toggle	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#Toggle() abort$/;"	f
ale#toggle#ToggleBuffer	plugged/ale/autoload/ale/toggle.vim	/^function! ale#toggle#ToggleBuffer(buffer) abort$/;"	f
ale#uri#Decode	plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#Decode(value) abort$/;"	f
ale#uri#Encode	plugged/ale/autoload/ale/uri.vim	/^function! ale#uri#Encode(value) abort$/;"	f
ale#util#BinarySearch	plugged/ale/autoload/ale/util.vim	/^function! ale#util#BinarySearch(loclist, buffer, line, column) abort$/;"	f
ale#util#Col	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Col(str, chr) abort$/;"	f
ale#util#EscapePCRE	plugged/ale/autoload/ale/util.vim	/^function! ale#util#EscapePCRE(unsafe_string) abort$/;"	f
ale#util#EscapeVim	plugged/ale/autoload/ale/util.vim	/^function! ale#util#EscapeVim(unsafe_string) abort$/;"	f
ale#util#Execute	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Execute(expr) abort$/;"	f
ale#util#FeedKeys	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FeedKeys(...) abort$/;"	f
ale#util#FindItemAtCursor	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FindItemAtCursor(buffer) abort$/;"	f
ale#util#FunctionArgCount	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FunctionArgCount(function) abort$/;"	f
ale#util#FuzzyJSONDecode	plugged/ale/autoload/ale/util.vim	/^function! ale#util#FuzzyJSONDecode(data, default) abort$/;"	f
ale#util#GetFunction	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetFunction(string_or_ref) abort$/;"	f
ale#util#GetItemPriority	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetItemPriority(item) abort$/;"	f
ale#util#GetLineCount	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetLineCount(buffer) abort$/;"	f
ale#util#GetMatches	plugged/ale/autoload/ale/util.vim	/^function! ale#util#GetMatches(lines, patterns) abort$/;"	f
ale#util#HasBuflineApi	plugged/ale/autoload/ale/util.vim	/^function! ale#util#HasBuflineApi() abort$/;"	f
ale#util#InSandbox	plugged/ale/autoload/ale/util.vim	/^function! ale#util#InSandbox() abort$/;"	f
ale#util#Input	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Input(message, value) abort$/;"	f
ale#util#JoinNeovimOutput	plugged/ale/autoload/ale/util.vim	/^function! ale#util#JoinNeovimOutput(job, last_line, data, mode, callback) abort$/;"	f
ale#util#LocItemCompare	plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompare(left, right) abort$/;"	f
ale#util#LocItemCompareWithText	plugged/ale/autoload/ale/util.vim	/^function! ale#util#LocItemCompareWithText(left, right) abort$/;"	f
ale#util#MapMatches	plugged/ale/autoload/ale/util.vim	/^function! ale#util#MapMatches(lines, patterns, Callback) abort$/;"	f
ale#util#Mode	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Mode(...) abort$/;"	f
ale#util#Open	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Open(filename, line, column, options) abort$/;"	f
ale#util#SetBufferContents	plugged/ale/autoload/ale/util.vim	/^function! ale#util#SetBufferContents(buffer, lines) abort$/;"	f
ale#util#ShowMessage	plugged/ale/autoload/ale/util.vim	/^function! ale#util#ShowMessage(string, ...) abort$/;"	f
ale#util#StartPartialTimer	plugged/ale/autoload/ale/util.vim	/^function! ale#util#StartPartialTimer(delay, callback, args) abort$/;"	f
ale#util#StopPartialTimer	plugged/ale/autoload/ale/util.vim	/^function! ale#util#StopPartialTimer(timer_id) abort$/;"	f
ale#util#Tempname	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Tempname() abort$/;"	f
ale#util#Writefile	plugged/ale/autoload/ale/util.vim	/^function! ale#util#Writefile(buffer, lines, filename) abort$/;"	f
ale#virtualtext#Clear	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#Clear() abort$/;"	f
ale#virtualtext#ShowCursorWarning	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowCursorWarning(...) abort$/;"	f
ale#virtualtext#ShowCursorWarningWithDelay	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowCursorWarningWithDelay() abort$/;"	f
ale#virtualtext#ShowMessage	plugged/ale/autoload/ale/virtualtext.vim	/^function! ale#virtualtext#ShowMessage(message, hl_group) abort$/;"	f
ale_floating_preview_window	plugged/ale/autoload/ale/floating_preview.vim	/^    augroup ale_floating_preview_window$/;"	a
ale_linters#ada#adals#GetAdaLSConfig	plugged/ale/ale_linters/ada/adals.vim	/^function! ale_linters#ada#adals#GetAdaLSConfig(buffer) abort$/;"	f
ale_linters#ada#adals#GetRootDirectory	plugged/ale/ale_linters/ada/adals.vim	/^function! ale_linters#ada#adals#GetRootDirectory(buffer) abort$/;"	f
ale_linters#ada#gcc#GetCommand	plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#ada#gcc#Handle	plugged/ale/ale_linters/ada/gcc.vim	/^function! ale_linters#ada#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#ansible#ansible_lint#GetCommand	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetCommand(buffer, version) abort$/;"	f
ale_linters#ansible#ansible_lint#GetExecutable	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#ansible#ansible_lint#Handle	plugged/ale/ale_linters/ansible/ansible_lint.vim	/^function! ale_linters#ansible#ansible_lint#Handle(buffer, version, lines) abort$/;"	f
ale_linters#apiblueprint#drafter#HandleErrors	plugged/ale/ale_linters/apiblueprint/drafter.vim	/^function! ale_linters#apiblueprint#drafter#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#asm#gcc#GetCommand	plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#asm#gcc#Handle	plugged/ale/ale_linters/asm/gcc.vim	/^function! ale_linters#asm#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#awk#gawk#GetCommand	plugged/ale/ale_linters/awk/gawk.vim	/^function! ale_linters#awk#gawk#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#GetCommand	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#GetCommand(buffer) abort$/;"	f
ale_linters#bib#bibclean#Handle	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#Handle(buffer, lines) abort$/;"	f
ale_linters#bib#bibclean#get_type	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#get_type(str) abort$/;"	f
ale_linters#bib#bibclean#match_entry	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_entry(line) abort$/;"	f
ale_linters#bib#bibclean#match_msg	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_msg(line) abort$/;"	f
ale_linters#bib#bibclean#match_value	plugged/ale/ale_linters/bib/bibclean.vim	/^function! ale_linters#bib#bibclean#match_value(line) abort$/;"	f
ale_linters#c#cc#GetCommand	plugged/ale/ale_linters/c/cc.vim	/^function! ale_linters#c#cc#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cc#GetExecutable	plugged/ale/ale_linters/c/cc.vim	/^function! ale_linters#c#cc#GetExecutable(buffer) abort$/;"	f
ale_linters#c#clangd#GetCommand	plugged/ale/ale_linters/c/clangd.vim	/^function! ale_linters#c#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#c#clangtidy#GetCommand	plugged/ale/ale_linters/c/clangtidy.vim	/^function! ale_linters#c#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#c#cppcheck#GetCommand	plugged/ale/ale_linters/c/cppcheck.vim	/^function! ale_linters#c#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#c#cquery#GetInitializationOptions	plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#c#cquery#GetProjectRoot	plugged/ale/ale_linters/c/cquery.vim	/^function! ale_linters#c#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#c#flawfinder#GetCommand	plugged/ale/ale_linters/c/flawfinder.vim	/^function! ale_linters#c#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#chef#cookstyle#GetCommand	plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#GetCommand(buffer) abort$/;"	f
ale_linters#chef#cookstyle#Handle	plugged/ale/ale_linters/chef/cookstyle.vim	/^function! ale_linters#chef#cookstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#chef#foodcritic#GetCommand	plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#GetCommand(buffer) abort$/;"	f
ale_linters#chef#foodcritic#Handle	plugged/ale/ale_linters/chef/foodcritic.vim	/^function! ale_linters#chef#foodcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#clojure#clj_kondo#HandleCljKondoFormat	plugged/ale/ale_linters/clojure/clj_kondo.vim	/^function! ale_linters#clojure#clj_kondo#HandleCljKondoFormat(buffer, lines) abort$/;"	f
ale_linters#clojure#joker#HandleJokerFormat	plugged/ale/ale_linters/clojure/joker.vim	/^function! ale_linters#clojure#joker#HandleJokerFormat(buffer, lines) abort$/;"	f
ale_linters#cloudformation#cfn_python_lint#Handle	plugged/ale/ale_linters/cloudformation/cfn_python_lint.vim	/^function! ale_linters#cloudformation#cfn_python_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#cmake#cmakelint#Command	plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Command(buffer) abort$/;"	f
ale_linters#cmake#cmakelint#Executable	plugged/ale/ale_linters/cmake/cmakelint.vim	/^function! ale_linters#cmake#cmakelint#Executable(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetCommand	plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffee#GetExecutable	plugged/ale/ale_linters/coffee/coffee.vim	/^function! ale_linters#coffee#coffee#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetCommand	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetCommand(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#GetExecutable	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#GetExecutable(buffer) abort$/;"	f
ale_linters#coffee#coffeelint#Handle	plugged/ale/ale_linters/coffee/coffeelint.vim	/^function! ale_linters#coffee#coffeelint#Handle(buffer, lines) abort$/;"	f
ale_linters#cpp#cc#GetCommand	plugged/ale/ale_linters/cpp/cc.vim	/^function! ale_linters#cpp#cc#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#cc#GetExecutable	plugged/ale/ale_linters/cpp/cc.vim	/^function! ale_linters#cpp#cc#GetExecutable(buffer) abort$/;"	f
ale_linters#cpp#clangcheck#GetCommand	plugged/ale/ale_linters/cpp/clangcheck.vim	/^function! ale_linters#cpp#clangcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangd#GetCommand	plugged/ale/ale_linters/cpp/clangd.vim	/^function! ale_linters#cpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#clangtidy#GetCommand	plugged/ale/ale_linters/cpp/clangtidy.vim	/^function! ale_linters#cpp#clangtidy#GetCommand(buffer, output) abort$/;"	f
ale_linters#cpp#clazy#GetCommand	plugged/ale/ale_linters/cpp/clazy.vim	/^function! ale_linters#cpp#clazy#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cppcheck#GetCommand	plugged/ale/ale_linters/cpp/cppcheck.vim	/^function! ale_linters#cpp#cppcheck#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cpplint#GetCommand	plugged/ale/ale_linters/cpp/cpplint.vim	/^function! ale_linters#cpp#cpplint#GetCommand(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetInitializationOptions	plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#cpp#cquery#GetProjectRoot	plugged/ale/ale_linters/cpp/cquery.vim	/^function! ale_linters#cpp#cquery#GetProjectRoot(buffer) abort$/;"	f
ale_linters#cpp#flawfinder#GetCommand	plugged/ale/ale_linters/cpp/flawfinder.vim	/^function! ale_linters#cpp#flawfinder#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#ameba#GetCommand	plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#ameba#HandleAmebaOutput	plugged/ale/ale_linters/crystal/ameba.vim	/^function! ale_linters#crystal#ameba#HandleAmebaOutput(buffer, lines) abort$/;"	f
ale_linters#crystal#crystal#GetCommand	plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#GetCommand(buffer) abort$/;"	f
ale_linters#crystal#crystal#Handle	plugged/ale/ale_linters/crystal/crystal.vim	/^function! ale_linters#crystal#crystal#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#csc#GetCommand	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#csc#GetCwd	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#GetCwd(buffer) abort$/;"	f
ale_linters#cs#csc#Handle	plugged/ale/ale_linters/cs/csc.vim	/^function! ale_linters#cs#csc#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcs#GetCommand	plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcs#Handle	plugged/ale/ale_linters/cs/mcs.vim	/^function! ale_linters#cs#mcs#Handle(buffer, lines) abort$/;"	f
ale_linters#cs#mcsc#GetCommand	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCommand(buffer) abort$/;"	f
ale_linters#cs#mcsc#GetCwd	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#GetCwd(buffer) abort$/;"	f
ale_linters#cs#mcsc#Handle	plugged/ale/ale_linters/cs/mcsc.vim	/^function! ale_linters#cs#mcsc#Handle(buffer, lines) abort$/;"	f
ale_linters#css#csslint#GetCommand	plugged/ale/ale_linters/css/csslint.vim	/^function! ale_linters#css#csslint#GetCommand(buffer) abort$/;"	f
ale_linters#css#stylelint#GetCommand	plugged/ale/ale_linters/css/stylelint.vim	/^function! ale_linters#css#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#GetCommand	plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#GetCommand(buffer) abort$/;"	f
ale_linters#cucumber#cucumber#Handle	plugged/ale/ale_linters/cucumber/cucumber.vim	/^function! ale_linters#cucumber#cucumber#Handle(buffer, lines) abort$/;"	f
ale_linters#cuda#clangd#GetCommand	plugged/ale/ale_linters/cuda/clangd.vim	/^function! ale_linters#cuda#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#GetCommand	plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#GetCommand(buffer) abort$/;"	f
ale_linters#cuda#nvcc#HandleNVCCFormat	plugged/ale/ale_linters/cuda/nvcc.vim	/^function! ale_linters#cuda#nvcc#HandleNVCCFormat(buffer, lines) abort$/;"	f
ale_linters#cypher#cypher_lint#Handle	plugged/ale/ale_linters/cypher/cypher_lint.vim	/^function! ale_linters#cypher#cypher_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dls#FindProjectRoot	plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#d#dls#GetExecutable	plugged/ale/ale_linters/d/dls.vim	/^function! ale_linters#d#dls#GetExecutable(buffer) abort$/;"	f
ale_linters#d#dmd#DMDCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#DMDCommand(buffer, dub_output, meta) abort$/;"	f
ale_linters#d#dmd#Handle	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#Handle(buffer, lines) abort$/;"	f
ale_linters#d#dmd#RunDUBCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! ale_linters#d#dmd#RunDUBCommand(buffer) abort$/;"	f
ale_linters#dafny#dafny#GetCommand	plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#GetCommand(buffer) abort$/;"	f
ale_linters#dafny#dafny#Handle	plugged/ale/ale_linters/dafny/dafny.vim	/^function! ale_linters#dafny#dafny#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#analysis_server#GetCommand	plugged/ale/ale_linters/dart/analysis_server.vim	/^function! ale_linters#dart#analysis_server#GetCommand(buffer) abort$/;"	f
ale_linters#dart#analysis_server#GetProjectRoot	plugged/ale/ale_linters/dart/analysis_server.vim	/^function! ale_linters#dart#analysis_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#GetCommand	plugged/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#dart#dartanalyzer#Handle	plugged/ale/ale_linters/dart/dartanalyzer.vim	/^function! ale_linters#dart#dartanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#dart#language_server#GetProjectRoot	plugged/ale/ale_linters/dart/language_server.vim	/^function! ale_linters#dart#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#desktop#desktop_file_validate#Handle	plugged/ale/ale_linters/desktop/desktop_file_validate.vim	/^function! ale_linters#desktop#desktop_file_validate#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetCommand	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#GetType	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#GetType(type) abort$/;"	f
ale_linters#dockerfile#dockerfile_lint#Handle	plugged/ale/ale_linters/dockerfile/dockerfile_lint.vim	/^function! ale_linters#dockerfile#dockerfile_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#dockerfile#hadolint#GetCommand	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetCommand(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#GetExecutable	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#GetExecutable(buffer) abort$/;"	f
ale_linters#dockerfile#hadolint#Handle	plugged/ale/ale_linters/dockerfile/hadolint.vim	/^function! ale_linters#dockerfile#hadolint#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#credo#GetCommand	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#credo#GetConfigFile	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetConfigFile() abort$/;"	f
ale_linters#elixir#credo#GetMode	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#GetMode() abort$/;"	f
ale_linters#elixir#credo#Handle	plugged/ale/ale_linters/elixir/credo.vim	/^function! ale_linters#elixir#credo#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dialyxir#Handle	plugged/ale/ale_linters/elixir/dialyxir.vim	/^function! ale_linters#elixir#dialyxir#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#dogma#Handle	plugged/ale/ale_linters/elixir/dogma.vim	/^function! ale_linters#elixir#dogma#Handle(buffer, lines) abort$/;"	f
ale_linters#elixir#elixir_ls#GetExecutable	plugged/ale/ale_linters/elixir/elixir_ls.vim	/^function! ale_linters#elixir#elixir_ls#GetExecutable(buffer) abort$/;"	f
ale_linters#elixir#mix#GetCommand	plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#GetCommand(buffer) abort$/;"	f
ale_linters#elixir#mix#Handle	plugged/ale/ale_linters/elixir/mix.vim	/^function! ale_linters#elixir#mix#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#FileIsBuffer	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#FileIsBuffer(path) abort$/;"	f
ale_linters#elm#make#GetCommand	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCommand(buffer) abort$/;"	f
ale_linters#elm#make#GetCwd	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetCwd(buffer) abort$/;"	f
ale_linters#elm#make#GetExecutable	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetExecutable(buffer) abort$/;"	f
ale_linters#elm#make#GetPackageFile	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetPackageFile(buffer) abort$/;"	f
ale_linters#elm#make#GetRootDir	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#GetRootDir(buffer) abort$/;"	f
ale_linters#elm#make#Handle	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#Handle(buffer, lines) abort$/;"	f
ale_linters#elm#make#HandleElm018Line	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm018Line(line, output) abort$/;"	f
ale_linters#elm#make#HandleElm019Line	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#HandleElm019Line(line, output) abort$/;"	f
ale_linters#elm#make#IsTest	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsTest(buffer) abort$/;"	f
ale_linters#elm#make#IsVersionGte19	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#IsVersionGte19(buffer) abort$/;"	f
ale_linters#elm#make#ParseMessage	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessage(message) abort$/;"	f
ale_linters#elm#make#ParseMessageItem	plugged/ale/ale_linters/elm/make.vim	/^function! ale_linters#elm#make#ParseMessageItem(item) abort$/;"	f
ale_linters#erlang#dialyzer#FindPlt	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#FindPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetCommand	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetExecutable	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetPlt	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetPlt(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#GetRebar3Profile	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#GetRebar3Profile(buffer) abort$/;"	f
ale_linters#erlang#dialyzer#Handle	plugged/ale/ale_linters/erlang/dialyzer.vim	/^function! ale_linters#erlang#dialyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#elvis#Handle	plugged/ale/ale_linters/erlang/elvis.vim	/^function! ale_linters#erlang#elvis#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#erlc#GetCommand	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetCommand(buffer) abort$/;"	f
ale_linters#erlang#erlc#GetExecutable	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#GetExecutable(buffer) abort$/;"	f
ale_linters#erlang#erlc#Handle	plugged/ale/ale_linters/erlang/erlc.vim	/^function! ale_linters#erlang#erlc#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#GetCommand	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#erlang#syntaxerl#Handle	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#Handle(buffer, lines) abort$/;"	f
ale_linters#erlang#syntaxerl#RunHelpCommand	plugged/ale/ale_linters/erlang/syntaxerl.vim	/^function! ale_linters#erlang#syntaxerl#RunHelpCommand(buffer) abort$/;"	f
ale_linters#eruby#erb#GetCommand	plugged/ale/ale_linters/eruby/erb.vim	/^function! ale_linters#eruby#erb#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#erubi#GetCommand	plugged/ale/ale_linters/eruby/erubi.vim	/^function! ale_linters#eruby#erubi#GetCommand(buffer, output, meta) abort$/;"	f
ale_linters#eruby#erubis#GetCommand	plugged/ale/ale_linters/eruby/erubis.vim	/^function! ale_linters#eruby#erubis#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#GetCommand	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetCommand(buffer) abort$/;"	f
ale_linters#eruby#ruumba#GetType	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#GetType(severity) abort$/;"	f
ale_linters#eruby#ruumba#Handle	plugged/ale/ale_linters/eruby/ruumba.vim	/^function! ale_linters#eruby#ruumba#Handle(buffer, lines) abort$/;"	f
ale_linters#fish#fish#Handle	plugged/ale/ale_linters/fish/fish.vim	/^function! ale_linters#fish#fish#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#gcc#GetCommand	plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#GetCommand(buffer) abort$/;"	f
ale_linters#fortran#gcc#Handle	plugged/ale/ale_linters/fortran/gcc.vim	/^function! ale_linters#fortran#gcc#Handle(buffer, lines) abort$/;"	f
ale_linters#fortran#language_server#GetProjectRoot	plugged/ale/ale_linters/fortran/language_server.vim	/^function! ale_linters#fortran#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#GetCommand	plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#GetCommand(buffer) abort$/;"	f
ale_linters#fuse#fusionlint#Handle	plugged/ale/ale_linters/fuse/fusionlint.vim	/^function! ale_linters#fuse#fusionlint#Handle(buffer, lines) abort$/;"	f
ale_linters#gitcommit#gitlint#GetCommand	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetCommand(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#GetExecutable	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#GetExecutable(buffer) abort$/;"	f
ale_linters#gitcommit#gitlint#Handle	plugged/ale/ale_linters/gitcommit/gitlint.vim	/^function! ale_linters#gitcommit#gitlint#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslang#GetCommand	plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslang#Handle	plugged/ale/ale_linters/glsl/glslang.vim	/^function! ale_linters#glsl#glslang#Handle(buffer, lines) abort$/;"	f
ale_linters#glsl#glslls#GetCommand	plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetCommand(buffer) abort$/;"	f
ale_linters#glsl#glslls#GetProjectRoot	plugged/ale/ale_linters/glsl/glslls.vim	/^function! ale_linters#glsl#glslls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#go#bingo#FindProjectRoot	plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#bingo#GetCommand	plugged/ale/ale_linters/go/bingo.vim	/^function! ale_linters#go#bingo#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetCommand	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetCommand(buffer) abort$/;"	f
ale_linters#go#gobuild#GetMatches	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#GetMatches(lines) abort$/;"	f
ale_linters#go#gobuild#Handler	plugged/ale/ale_linters/go/gobuild.vim	/^function! ale_linters#go#gobuild#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gofmt#GetCommand	plugged/ale/ale_linters/go/gofmt.vim	/^function! ale_linters#go#gofmt#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetCommand	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetCommand(buffer) abort$/;"	f
ale_linters#go#golangci_lint#GetMatches	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#GetMatches(lines) abort$/;"	f
ale_linters#go#golangci_lint#Handler	plugged/ale/ale_linters/go/golangci_lint.vim	/^function! ale_linters#go#golangci_lint#Handler(buffer, lines) abort$/;"	f
ale_linters#go#golint#GetCommand	plugged/ale/ale_linters/go/golint.vim	/^function! ale_linters#go#golint#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetCommand	plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetCommand(buffer) abort$/;"	f
ale_linters#go#gometalinter#GetMatches	plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#GetMatches(lines) abort$/;"	f
ale_linters#go#gometalinter#Handler	plugged/ale/ale_linters/go/gometalinter.vim	/^function! ale_linters#go#gometalinter#Handler(buffer, lines) abort$/;"	f
ale_linters#go#gopls#FindProjectRoot	plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#go#gopls#GetCommand	plugged/ale/ale_linters/go/gopls.vim	/^function! ale_linters#go#gopls#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetCommand	plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetCommand(buffer) abort$/;"	f
ale_linters#go#gotype#GetExecutable	plugged/ale/ale_linters/go/gotype.vim	/^function! ale_linters#go#gotype#GetExecutable(buffer) abort$/;"	f
ale_linters#go#govet#GetCommand	plugged/ale/ale_linters/go/govet.vim	/^function! ale_linters#go#govet#GetCommand(buffer) abort$/;"	f
ale_linters#go#langserver#GetCommand	plugged/ale/ale_linters/go/langserver.vim	/^function! ale_linters#go#langserver#GetCommand(buffer) abort$/;"	f
ale_linters#go#revive#GetCommand	plugged/ale/ale_linters/go/revive.vim	/^function! ale_linters#go#revive#GetCommand(buffer) abort$/;"	f
ale_linters#go#staticcheck#GetCommand	plugged/ale/ale_linters/go/staticcheck.vim	/^function! ale_linters#go#staticcheck#GetCommand(buffer) abort$/;"	f
ale_linters#hack#hack#GetExecutable	plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hack#GetProjectRoot	plugged/ale/ale_linters/hack/hack.vim	/^function! ale_linters#hack#hack#GetProjectRoot(buffer) abort$/;"	f
ale_linters#hack#hhast#GetExecutable	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetExecutable(buffer) abort$/;"	f
ale_linters#hack#hhast#GetInitializationOptions	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#hack#hhast#GetProjectRoot	plugged/ale/ale_linters/hack/hhast.vim	/^function! ale_linters#hack#hhast#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetCommand	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetCommand(buffer) abort$/;"	f
ale_linters#haml#hamllint#GetExecutable	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#GetExecutable(buffer) abort$/;"	f
ale_linters#haml#hamllint#Handle	plugged/ale/ale_linters/haml/hamllint.vim	/^function! ale_linters#haml#hamllint#Handle(buffer, lines) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommand	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommand(buffer, version) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetCommandWithVersionCheck	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetCommandWithVersionCheck(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#GetExecutable	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#GetExecutable(buffer) abort$/;"	f
ale_linters#handlebars#embertemplatelint#Handle	plugged/ale/ale_linters/handlebars/embertemplatelint.vim	/^function! ale_linters#handlebars#embertemplatelint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#cabal_ghc#GetCommand	plugged/ale/ale_linters/haskell/cabal_ghc.vim	/^function! ale_linters#haskell#cabal_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc#GetCommand	plugged/ale/ale_linters/haskell/ghc.vim	/^function! ale_linters#haskell#ghc#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#ghc_mod#GetCommand	plugged/ale/ale_linters/haskell/ghc_mod.vim	/^function! ale_linters#haskell#ghc_mod#GetCommand (buffer) abort$/;"	f
ale_linters#haskell#hdevtools#GetCommand	plugged/ale/ale_linters/haskell/hdevtools.vim	/^function! ale_linters#haskell#hdevtools#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetCommand	plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hie#GetProjectRoot	plugged/ale/ale_linters/haskell/hie.vim	/^function! ale_linters#haskell#hie#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#hlint#GetCommand	plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hlint#Handle	plugged/ale/ale_linters/haskell/hlint.vim	/^function! ale_linters#haskell#hlint#Handle(buffer, lines) abort$/;"	f
ale_linters#haskell#hls#FindRootFile	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#FindRootFile(buffer) abort$/;"	f
ale_linters#haskell#hls#GetCommand	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#hls#GetProjectRoot	plugged/ale/ale_linters/haskell/hls.vim	/^function! ale_linters#haskell#hls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#haskell#stack_build#GetCommand	plugged/ale/ale_linters/haskell/stack_build.vim	/^function! ale_linters#haskell#stack_build#GetCommand(buffer) abort$/;"	f
ale_linters#haskell#stack_ghc#GetCommand	plugged/ale/ale_linters/haskell/stack_ghc.vim	/^function! ale_linters#haskell#stack_ghc#GetCommand(buffer) abort$/;"	f
ale_linters#html#angular#GetCommand	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetCommand(buffer) abort$/;"	f
ale_linters#html#angular#GetExecutable	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetExecutable(buffer) abort$/;"	f
ale_linters#html#angular#GetProjectRoot	plugged/ale/ale_linters/html/angular.vim	/^function! ale_linters#html#angular#GetProjectRoot(buffer) abort$/;"	f
ale_linters#html#htmlhint#GetCommand	plugged/ale/ale_linters/html/htmlhint.vim	/^function! ale_linters#html#htmlhint#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetCommand	plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#html#stylelint#GetExecutable	plugged/ale/ale_linters/html/stylelint.vim	/^function! ale_linters#html#stylelint#GetExecutable(buffer) abort$/;"	f
ale_linters#html#tidy#GetCommand	plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#GetCommand(buffer) abort$/;"	f
ale_linters#html#tidy#Handle	plugged/ale/ale_linters/html/tidy.vim	/^function! ale_linters#html#tidy#Handle(buffer, lines) abort$/;"	f
ale_linters#idris#idris#GetCommand	plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#GetCommand(buffer) abort$/;"	f
ale_linters#idris#idris#Handle	plugged/ale/ale_linters/idris/idris.vim	/^function! ale_linters#idris#idris#Handle(buffer, lines) abort$/;"	f
ale_linters#ink#ls#FindProjectRoot	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#ink#ls#GetCommand	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetCommand(buffer) abort$/;"	f
ale_linters#ink#ls#GetExecutable	plugged/ale/ale_linters/ink/ls.vim	/^function! ale_linters#ink#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#inko#inko#GetCommand	plugged/ale/ale_linters/inko/inko.vim	/^function! ale_linters#inko#inko#GetCommand(buffer) abort$/;"	f
ale_linters#ispc#ispc#GetCommand	plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#GetCommand(buffer) abort$/;"	f
ale_linters#ispc#ispc#Handle	plugged/ale/ale_linters/ispc/ispc.vim	/^function! ale_linters#ispc#ispc#Handle(buffer, lines) abort$/;"	f
ale_linters#java#checkstyle#GetCommand	plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#GetCommand(buffer) abort$/;"	f
ale_linters#java#checkstyle#Handle	plugged/ale/ale_linters/java/checkstyle.vim	/^function! ale_linters#java#checkstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#java#eclipselsp#Command	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Command(buffer, version) abort$/;"	f
ale_linters#java#eclipselsp#CommandWithVersion	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#CommandWithVersion(buffer, version_lines, meta) abort$/;"	f
ale_linters#java#eclipselsp#ConfigurationPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#ConfigurationPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Executable	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Executable(buffer) abort$/;"	f
ale_linters#java#eclipselsp#JarPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#JarPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#Javaagent	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#Javaagent(buffer) abort$/;"	f
ale_linters#java#eclipselsp#RunWithVersionCheck	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#java#eclipselsp#TargetPath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#TargetPath(buffer) abort$/;"	f
ale_linters#java#eclipselsp#VersionCheck	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#VersionCheck(version_lines) abort$/;"	f
ale_linters#java#eclipselsp#WorkspacePath	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! ale_linters#java#eclipselsp#WorkspacePath(buffer) abort$/;"	f
ale_linters#java#javac#GetCommand	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#java#javac#Handle	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#Handle(buffer, lines) abort$/;"	f
ale_linters#java#javac#RunWithImportPaths	plugged/ale/ale_linters/java/javac.vim	/^function! ale_linters#java#javac#RunWithImportPaths(buffer) abort$/;"	f
ale_linters#java#javalsp#Command	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Command(buffer) abort$/;"	f
ale_linters#java#javalsp#Config	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Config(buffer) abort$/;"	f
ale_linters#java#javalsp#Executable	plugged/ale/ale_linters/java/javalsp.vim	/^function! ale_linters#java#javalsp#Executable(buffer) abort$/;"	f
ale_linters#java#pmd#GetCommand	plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#GetCommand(buffer) abort$/;"	f
ale_linters#java#pmd#Handle	plugged/ale/ale_linters/java/pmd.vim	/^function! ale_linters#java#pmd#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow#GetCommand	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetCommand(buffer, version) abort$/;"	f
ale_linters#javascript#flow#GetExecutable	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#GetExecutable(buffer) abort$/;"	f
ale_linters#javascript#flow#Handle	plugged/ale/ale_linters/javascript/flow.vim	/^function! ale_linters#javascript#flow#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#flow_ls#FindProjectRoot	plugged/ale/ale_linters/javascript/flow_ls.vim	/^function! ale_linters#javascript#flow_ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#javascript#jscs#GetCommand	plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#jscs#Handle	plugged/ale/ale_linters/javascript/jscs.vim	/^function! ale_linters#javascript#jscs#Handle(buffer, lines) abort$/;"	f
ale_linters#javascript#jshint#GetCommand	plugged/ale/ale_linters/javascript/jshint.vim	/^function! ale_linters#javascript#jshint#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetCommand	plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#javascript#standard#GetExecutable	plugged/ale/ale_linters/javascript/standard.vim	/^function! ale_linters#javascript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jq#Handle	plugged/ale/ale_linters/json/jq.vim	/^function! ale_linters#json#jq#Handle(buffer, lines) abort$/;"	f
ale_linters#json#jsonlint#GetCommand	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetCommand(buffer) abort$/;"	f
ale_linters#json#jsonlint#GetExecutable	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#GetExecutable(buffer) abort$/;"	f
ale_linters#json#jsonlint#Handle	plugged/ale/ale_linters/json/jsonlint.vim	/^function! ale_linters#json#jsonlint#Handle(buffer, lines) abort$/;"	f
ale_linters#julia#languageserver#GetCommand	plugged/ale/ale_linters/julia/languageserver.vim	/^function! ale_linters#julia#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#kotlin#kotlinc#GetCommand	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#GetCommand(buffer, import_paths, meta) abort$/;"	f
ale_linters#kotlin#kotlinc#Handle	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#Handle(buffer, lines) abort$/;"	f
ale_linters#kotlin#kotlinc#RunWithImportPaths	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! ale_linters#kotlin#kotlinc#RunWithImportPaths(buffer) abort$/;"	f
ale_linters#kotlin#languageserver#GetProjectRoot	plugged/ale/ale_linters/kotlin/languageserver.vim	/^function! ale_linters#kotlin#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#less#lessc#GetCommand	plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#GetCommand(buffer) abort$/;"	f
ale_linters#less#lessc#Handle	plugged/ale/ale_linters/less/lessc.vim	/^function! ale_linters#less#lessc#Handle(buffer, lines) abort$/;"	f
ale_linters#less#stylelint#GetCommand	plugged/ale/ale_linters/less/stylelint.vim	/^function! ale_linters#less#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#llvm#llc#HandleErrors	plugged/ale/ale_linters/llvm/llc.vim	/^function! ale_linters#llvm#llc#HandleErrors(buffer, lines) abort$/;"	f
ale_linters#lua#luac#Handle	plugged/ale/ale_linters/lua/luac.vim	/^function! ale_linters#lua#luac#Handle(buffer, lines) abort$/;"	f
ale_linters#lua#luacheck#GetCommand	plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#GetCommand(buffer) abort$/;"	f
ale_linters#lua#luacheck#Handle	plugged/ale/ale_linters/lua/luacheck.vim	/^function! ale_linters#lua#luacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#make#checkmake#Handle	plugged/ale/ale_linters/make/checkmake.vim	/^function! ale_linters#make#checkmake#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#markdownlint#GetCommand	plugged/ale/ale_linters/markdown/markdownlint.vim	/^function! ale_linters#markdown#markdownlint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetCommand	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#mdl#GetExecutable	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#GetExecutable(buffer) abort$/;"	f
ale_linters#markdown#mdl#Handle	plugged/ale/ale_linters/markdown/mdl.vim	/^function! ale_linters#markdown#mdl#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#remark_lint#GetCommand	plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#GetCommand(buffer) abort$/;"	f
ale_linters#markdown#remark_lint#Handle	plugged/ale/ale_linters/markdown/remark_lint.vim	/^function! ale_linters#markdown#remark_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#markdown#vale#GetCommand	plugged/ale/ale_linters/markdown/vale.vim	/^function! ale_linters#markdown#vale#GetCommand(buffer) abort$/;"	f
ale_linters#matlab#mlint#Handle	plugged/ale/ale_linters/matlab/mlint.vim	/^function! ale_linters#matlab#mlint#Handle(buffer, lines) abort$/;"	f
ale_linters#mercury#mmc#GetCommand	plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#GetCommand(buffer) abort$/;"	f
ale_linters#mercury#mmc#Handle	plugged/ale/ale_linters/mercury/mmc.vim	/^function! ale_linters#mercury#mmc#Handle(buffer, lines) abort$/;"	f
ale_linters#nasm#nasm#GetCommand	plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#GetCommand(buffer) abort$/;"	f
ale_linters#nasm#nasm#Handle	plugged/ale/ale_linters/nasm/nasm.vim	/^function! ale_linters#nasm#nasm#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimcheck#GetCommand	plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimcheck#Handle	plugged/ale/ale_linters/nim/nimcheck.vim	/^function! ale_linters#nim#nimcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#nim#nimlsp#GetCommand	plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetCommand(buffer) abort$/;"	f
ale_linters#nim#nimlsp#GetProjectRoot	plugged/ale/ale_linters/nim/nimlsp.vim	/^function! ale_linters#nim#nimlsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#nix#nix#Command	plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Command(buffer, output, meta) abort$/;"	f
ale_linters#nix#nix#Handle	plugged/ale/ale_linters/nix/nix.vim	/^function! ale_linters#nix#nix#Handle(buffer, lines) abort$/;"	f
ale_linters#nix#rnix_lsp#GetProjectRoot	plugged/ale/ale_linters/nix/rnix_lsp.vim	/^function! ale_linters#nix#rnix_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#objc#clang#GetCommand	plugged/ale/ale_linters/objc/clang.vim	/^function! ale_linters#objc#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objc#clangd#GetCommand	plugged/ale/ale_linters/objc/clangd.vim	/^function! ale_linters#objc#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clang#GetCommand	plugged/ale/ale_linters/objcpp/clang.vim	/^function! ale_linters#objcpp#clang#GetCommand(buffer) abort$/;"	f
ale_linters#objcpp#clangd#GetCommand	plugged/ale/ale_linters/objcpp/clangd.vim	/^function! ale_linters#objcpp#clangd#GetCommand(buffer) abort$/;"	f
ale_linters#ocaml#merlin#Handle	plugged/ale/ale_linters/ocaml/merlin.vim	/^function! ale_linters#ocaml#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#ocamlinterface#merlin#Handle	plugged/ale/ale_linters/ocamlinterface/merlin.vim	/^function! ale_linters#ocamlinterface#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#openapi#ibm_validator#GetCommand	plugged/ale/ale_linters/openapi/ibm_validator.vim	/^function! ale_linters#openapi#ibm_validator#GetCommand(buffer) abort$/;"	f
ale_linters#openapi#ibm_validator#Handle	plugged/ale/ale_linters/openapi/ibm_validator.vim	/^function! ale_linters#openapi#ibm_validator#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perl#GetCommand	plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perl#Handle	plugged/ale/ale_linters/perl/perl.vim	/^function! ale_linters#perl#perl#Handle(buffer, lines) abort$/;"	f
ale_linters#perl#perlcritic#GetCommand	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetCommand(buffer) abort$/;"	f
ale_linters#perl#perlcritic#GetProfile	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#GetProfile(buffer) abort$/;"	f
ale_linters#perl#perlcritic#Handle	plugged/ale/ale_linters/perl/perlcritic.vim	/^function! ale_linters#perl#perlcritic#Handle(buffer, lines) abort$/;"	f
ale_linters#perl6#perl6#ExtractError	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#ExtractError(dict, item, type, buffer) abort$/;"	f
ale_linters#perl6#perl6#GetCommand	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetCommand(buffer) abort$/;"	f
ale_linters#perl6#perl6#GetExecutable	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#GetExecutable(buffer) abort$/;"	f
ale_linters#perl6#perl6#Handle	plugged/ale/ale_linters/perl6/perl6.vim	/^function! ale_linters#perl6#perl6#Handle(buffer, lines) abort$/;"	f
ale_linters#php#intelephense#GetInitializationOptions	plugged/ale/ale_linters/php/intelephense.vim	/^function! ale_linters#php#intelephense#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#php#intelephense#GetProjectRoot	plugged/ale/ale_linters/php/intelephense.vim	/^function! ale_linters#php#intelephense#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#langserver#GetProjectRoot	plugged/ale/ale_linters/php/langserver.vim	/^function! ale_linters#php#langserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#phan#GetCommand	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetCommand(buffer) abort$/;"	f
ale_linters#php#phan#GetExecutable	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#GetExecutable(buffer) abort$/;"	f
ale_linters#php#phan#Handle	plugged/ale/ale_linters/php/phan.vim	/^function! ale_linters#php#phan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#php#Handle	plugged/ale/ale_linters/php/php.vim	/^function! ale_linters#php#php#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpcs#GetCommand	plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpcs#Handle	plugged/ale/ale_linters/php/phpcs.vim	/^function! ale_linters#php#phpcs#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpmd#GetCommand	plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#GetCommand(buffer) abort$/;"	f
ale_linters#php#phpmd#Handle	plugged/ale/ale_linters/php/phpmd.vim	/^function! ale_linters#php#phpmd#Handle(buffer, lines) abort$/;"	f
ale_linters#php#phpstan#GetCommand	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#GetCommand(buffer, version) abort$/;"	f
ale_linters#php#phpstan#Handle	plugged/ale/ale_linters/php/phpstan.vim	/^function! ale_linters#php#phpstan#Handle(buffer, lines) abort$/;"	f
ale_linters#php#psalm#GetCommand	plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetCommand(buffer) abort$/;"	f
ale_linters#php#psalm#GetProjectRoot	plugged/ale/ale_linters/php/psalm.vim	/^function! ale_linters#php#psalm#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#tlint#GetCommand	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetCommand(buffer) abort$/;"	f
ale_linters#php#tlint#GetExecutable	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetExecutable(buffer) abort$/;"	f
ale_linters#php#tlint#GetProjectRoot	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#GetProjectRoot(buffer) abort$/;"	f
ale_linters#php#tlint#Handle	plugged/ale/ale_linters/php/tlint.vim	/^function! ale_linters#php#tlint#Handle(buffer, lines) abort$/;"	f
ale_linters#po#msgfmt#Handle	plugged/ale/ale_linters/po/msgfmt.vim	/^function! ale_linters#po#msgfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#pony#ponyc#GetCommand	plugged/ale/ale_linters/pony/ponyc.vim	/^function! ale_linters#pony#ponyc#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetCommand	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#powershell#GetExecutable	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#powershell#Handle	plugged/ale/ale_linters/powershell/powershell.vim	/^function! ale_linters#powershell#powershell#Handle(buffer, lines) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetCommand	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetCommand(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#GetExecutable	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#GetExecutable(buffer) abort$/;"	f
ale_linters#powershell#psscriptanalyzer#Handle	plugged/ale/ale_linters/powershell/psscriptanalyzer.vim	/^function! ale_linters#powershell#psscriptanalyzer#Handle(buffer, lines) abort$/;"	f
ale_linters#prolog#swipl#GetCommand	plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#GetCommand(buffer) abort$/;"	f
ale_linters#prolog#swipl#Handle	plugged/ale/ale_linters/prolog/swipl.vim	/^function! ale_linters#prolog#swipl#Handle(buffer, lines) abort$/;"	f
ale_linters#proto#protoc_gen_lint#GetCommand	plugged/ale/ale_linters/proto/protoc_gen_lint.vim	/^function! ale_linters#proto#protoc_gen_lint#GetCommand(buffer) abort$/;"	f
ale_linters#proto#protolint#GetCommand	plugged/ale/ale_linters/proto/protolint.vim	/^function! ale_linters#proto#protolint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#GetCommand	plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#GetCommand(buffer) abort$/;"	f
ale_linters#pug#puglint#Handle	plugged/ale/ale_linters/pug/puglint.vim	/^function! ale_linters#pug#puglint#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#languageserver#GetProjectRoot	plugged/ale/ale_linters/puppet/languageserver.vim	/^function! ale_linters#puppet#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#puppet#puppet#GetCommand	plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#GetCommand(buffer) abort$/;"	f
ale_linters#puppet#puppet#Handle	plugged/ale/ale_linters/puppet/puppet.vim	/^function! ale_linters#puppet#puppet#Handle(buffer, lines) abort$/;"	f
ale_linters#puppet#puppetlint#GetCommand	plugged/ale/ale_linters/puppet/puppetlint.vim	/^function! ale_linters#puppet#puppetlint#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#FindProjectRoot	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#purescript#ls#GetCommand	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetCommand(buffer) abort$/;"	f
ale_linters#purescript#ls#GetExecutable	plugged/ale/ale_linters/purescript/ls.vim	/^function! ale_linters#purescript#ls#GetExecutable(buffer) abort$/;"	f
ale_linters#pyrex#cython#GetCommand	plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#GetCommand(buffer) abort$/;"	f
ale_linters#pyrex#cython#Handle	plugged/ale/ale_linters/pyrex/cython.vim	/^function! ale_linters#pyrex#cython#Handle(buffer, lines) abort$/;"	f
ale_linters#python#bandit#GetCommand	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetCommand(buffer) abort$/;"	f
ale_linters#python#bandit#GetExecutable	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#GetExecutable(buffer) abort$/;"	f
ale_linters#python#bandit#Handle	plugged/ale/ale_linters/python/bandit.vim	/^function! ale_linters#python#bandit#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#GetCommand	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#flake8#GetCwd	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetCwd(buffer) abort$/;"	f
ale_linters#python#flake8#GetExecutable	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#GetExecutable(buffer) abort$/;"	f
ale_linters#python#flake8#Handle	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#Handle(buffer, lines) abort$/;"	f
ale_linters#python#flake8#RunWithVersionCheck	plugged/ale/ale_linters/python/flake8.vim	/^function! ale_linters#python#flake8#RunWithVersionCheck(buffer) abort$/;"	f
ale_linters#python#jedils#GetCommand	plugged/ale/ale_linters/python/jedils.vim	/^function! ale_linters#python#jedils#GetCommand(buffer) abort$/;"	f
ale_linters#python#jedils#GetExecutable	plugged/ale/ale_linters/python/jedils.vim	/^function! ale_linters#python#jedils#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#GetCommand	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCommand(buffer) abort$/;"	f
ale_linters#python#mypy#GetCwd	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetCwd(buffer) abort$/;"	f
ale_linters#python#mypy#GetExecutable	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#GetExecutable(buffer) abort$/;"	f
ale_linters#python#mypy#Handle	plugged/ale/ale_linters/python/mypy.vim	/^function! ale_linters#python#mypy#Handle(buffer, lines) abort$/;"	f
ale_linters#python#prospector#GetCommand	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetCommand(buffer) abort$/;"	f
ale_linters#python#prospector#GetExecutable	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#GetExecutable(buffer) abort$/;"	f
ale_linters#python#prospector#Handle	plugged/ale/ale_linters/python/prospector.vim	/^function! ale_linters#python#prospector#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pycodestyle#GetCommand	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pycodestyle#GetExecutable	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pycodestyle#Handle	plugged/ale/ale_linters/python/pycodestyle.vim	/^function! ale_linters#python#pycodestyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pydocstyle#GetCommand	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetCommand(buffer) abort$/;"	f
ale_linters#python#pydocstyle#GetExecutable	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pydocstyle#Handle	plugged/ale/ale_linters/python/pydocstyle.vim	/^function! ale_linters#python#pydocstyle#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyflakes#GetCommand	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyflakes#GetExecutable	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyflakes#Handle	plugged/ale/ale_linters/python/pyflakes.vim	/^function! ale_linters#python#pyflakes#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylama#GetCommand	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCommand(buffer) abort$/;"	f
ale_linters#python#pylama#GetCwd	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylama#GetExecutable	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylama#Handle	plugged/ale/ale_linters/python/pylama.vim	/^function! ale_linters#python#pylama#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pylint#GetCommand	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCommand(buffer, version) abort$/;"	f
ale_linters#python#pylint#GetCwd	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetCwd(buffer) abort$/;"	f
ale_linters#python#pylint#GetExecutable	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pylint#Handle	plugged/ale/ale_linters/python/pylint.vim	/^function! ale_linters#python#pylint#Handle(buffer, lines) abort$/;"	f
ale_linters#python#pyls#GetCommand	plugged/ale/ale_linters/python/pyls.vim	/^function! ale_linters#python#pyls#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyls#GetExecutable	plugged/ale/ale_linters/python/pyls.vim	/^function! ale_linters#python#pyls#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyre#GetCommand	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetCommand(buffer) abort$/;"	f
ale_linters#python#pyre#GetExecutable	plugged/ale/ale_linters/python/pyre.vim	/^function! ale_linters#python#pyre#GetExecutable(buffer) abort$/;"	f
ale_linters#python#pyright#GetConfig	plugged/ale/ale_linters/python/pyright.vim	/^function! ale_linters#python#pyright#GetConfig(buffer) abort$/;"	f
ale_linters#python#vulture#GetCommand	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCommand(buffer) abort$/;"	f
ale_linters#python#vulture#GetCwd	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetCwd(buffer) abort$/;"	f
ale_linters#python#vulture#GetExecutable	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#GetExecutable(buffer) abort$/;"	f
ale_linters#python#vulture#Handle	plugged/ale/ale_linters/python/vulture.vim	/^function! ale_linters#python#vulture#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmlfmt#Handle	plugged/ale/ale_linters/qml/qmlfmt.vim	/^function! ale_linters#qml#qmlfmt#Handle(buffer, lines) abort$/;"	f
ale_linters#qml#qmllint#Handle	plugged/ale/ale_linters/qml/qmllint.vim	/^function! ale_linters#qml#qmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#r#languageserver#GetCommand	plugged/ale/ale_linters/r/languageserver.vim	/^function! ale_linters#r#languageserver#GetCommand(buffer) abort$/;"	f
ale_linters#r#languageserver#GetProjectRoot	plugged/ale/ale_linters/r/languageserver.vim	/^function! ale_linters#r#languageserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#r#lintr#GetCommand	plugged/ale/ale_linters/r/lintr.vim	/^function! ale_linters#r#lintr#GetCommand(buffer) abort$/;"	f
ale_linters#racket#raco#Handle	plugged/ale/ale_linters/racket/raco.vim	/^function! ale_linters#racket#raco#Handle(buffer, lines) abort$/;"	f
ale_linters#reason#ls#FindProjectRoot	plugged/ale/ale_linters/reason/ls.vim	/^function! ale_linters#reason#ls#FindProjectRoot(buffer) abort$/;"	f
ale_linters#reason#merlin#Handle	plugged/ale/ale_linters/reason/merlin.vim	/^function! ale_linters#reason#merlin#Handle(buffer, lines) abort$/;"	f
ale_linters#rst#rstcheck#Handle	plugged/ale/ale_linters/rst/rstcheck.vim	/^function! ale_linters#rst#rstcheck#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#brakeman#GetCommand	plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#brakeman#Handle	plugged/ale/ale_linters/ruby/brakeman.vim	/^function! ale_linters#ruby#brakeman#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#debride#GetCommand	plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#debride#HandleOutput	plugged/ale/ale_linters/ruby/debride.vim	/^function! ale_linters#ruby#debride#HandleOutput(buffer, lines) abort$/;"	f
ale_linters#ruby#rails_best_practices#GetCommand	plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rails_best_practices#Handle	plugged/ale/ale_linters/ruby/rails_best_practices.vim	/^function! ale_linters#ruby#rails_best_practices#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#reek#GetCommand	plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#GetCommand(buffer, version) abort$/;"	f
ale_linters#ruby#reek#Handle	plugged/ale/ale_linters/ruby/reek.vim	/^function! ale_linters#ruby#reek#Handle(buffer, lines) abort$/;"	f
ale_linters#ruby#rubocop#GetCommand	plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#rubocop#GetType	plugged/ale/ale_linters/ruby/rubocop.vim	/^function! ale_linters#ruby#rubocop#GetType(severity) abort$/;"	f
ale_linters#ruby#solargraph#GetCommand	plugged/ale/ale_linters/ruby/solargraph.vim	/^function! ale_linters#ruby#solargraph#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#sorbet#GetCommand	plugged/ale/ale_linters/ruby/sorbet.vim	/^function! ale_linters#ruby#sorbet#GetCommand(buffer) abort$/;"	f
ale_linters#ruby#standardrb#GetCommand	plugged/ale/ale_linters/ruby/standardrb.vim	/^function! ale_linters#ruby#standardrb#GetCommand(buffer) abort$/;"	f
ale_linters#rust#analyzer#GetCommand	plugged/ale/ale_linters/rust/analyzer.vim	/^function! ale_linters#rust#analyzer#GetCommand(buffer) abort$/;"	f
ale_linters#rust#analyzer#GetProjectRoot	plugged/ale/ale_linters/rust/analyzer.vim	/^function! ale_linters#rust#analyzer#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#cargo#GetCargoExecutable	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCargoExecutable(bufnr) abort$/;"	f
ale_linters#rust#cargo#GetCommand	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCommand(buffer, version) abort$/;"	f
ale_linters#rust#cargo#GetCwd	plugged/ale/ale_linters/rust/cargo.vim	/^function! ale_linters#rust#cargo#GetCwd(buffer) abort$/;"	f
ale_linters#rust#rls#GetCommand	plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetCommand(buffer) abort$/;"	f
ale_linters#rust#rls#GetProjectRoot	plugged/ale/ale_linters/rust/rls.vim	/^function! ale_linters#rust#rls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#rust#rustc#RustcCommand	plugged/ale/ale_linters/rust/rustc.vim	/^function! ale_linters#rust#rustc#RustcCommand(buffer) abort$/;"	f
ale_linters#salt#salt_lint#GetCommand	plugged/ale/ale_linters/salt/salt_lint.vim	/^function! ale_linters#salt#salt_lint#GetCommand(buffer) abort$/;"	f
ale_linters#salt#salt_lint#Handle	plugged/ale/ale_linters/salt/salt_lint.vim	/^function! ale_linters#salt#salt_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#sass#sasslint#GetCommand	plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#sass#sasslint#GetExecutable	plugged/ale/ale_linters/sass/sasslint.vim	/^function! ale_linters#sass#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scala#metals#GetCommand	plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetCommand(buffer) abort$/;"	f
ale_linters#scala#metals#GetProjectRoot	plugged/ale/ale_linters/scala/metals.vim	/^function! ale_linters#scala#metals#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetAddress	plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetAddress(buffer) abort$/;"	f
ale_linters#scala#sbtserver#GetProjectRoot	plugged/ale/ale_linters/scala/sbtserver.vim	/^function! ale_linters#scala#sbtserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#scala#scalastyle#GetCommand	plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#GetCommand(buffer) abort$/;"	f
ale_linters#scala#scalastyle#Handle	plugged/ale/ale_linters/scala/scalastyle.vim	/^function! ale_linters#scala#scalastyle#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#sasslint#GetCommand	plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetCommand(buffer) abort$/;"	f
ale_linters#scss#sasslint#GetExecutable	plugged/ale/ale_linters/scss/sasslint.vim	/^function! ale_linters#scss#sasslint#GetExecutable(buffer) abort$/;"	f
ale_linters#scss#scsslint#Handle	plugged/ale/ale_linters/scss/scsslint.vim	/^function! ale_linters#scss#scsslint#Handle(buffer, lines) abort$/;"	f
ale_linters#scss#stylelint#GetCommand	plugged/ale/ale_linters/scss/stylelint.vim	/^function! ale_linters#scss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sh#bashate#GetCommand	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#GetCommand(buffer) abort$/;"	f
ale_linters#sh#bashate#GetExecutable	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#bashate#Handle	plugged/ale/ale_linters/sh/bashate.vim	/^function! ale_linters#sh#bashate#Handle(buffer, lines) abort$/;"	f
ale_linters#sh#language_server#GetCommand	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetCommand(buffer) abort$/;"	f
ale_linters#sh#language_server#GetExecutable	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#language_server#GetProjectRoot	plugged/ale/ale_linters/sh/language_server.vim	/^function! ale_linters#sh#language_server#GetProjectRoot(buffer) abort$/;"	f
ale_linters#sh#shell#GetCommand	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetCommand(buffer) abort$/;"	f
ale_linters#sh#shell#GetExecutable	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#GetExecutable(buffer) abort$/;"	f
ale_linters#sh#shell#Handle	plugged/ale/ale_linters/sh/shell.vim	/^function! ale_linters#sh#shell#Handle(buffer, lines) abort$/;"	f
ale_linters#slim#slimlint#GetCommand	plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#GetCommand(buffer) abort$/;"	f
ale_linters#slim#slimlint#Handle	plugged/ale/ale_linters/slim/slimlint.vim	/^function! ale_linters#slim#slimlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sml#smlnj_cm#GetCommand	plugged/ale/ale_linters/sml/smlnj_cm.vim	/^function! ale_linters#sml#smlnj_cm#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solc#GetCommand	plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#GetCommand(buffer) abort$/;"	f
ale_linters#solidity#solc#Handle	plugged/ale/ale_linters/solidity/solc.vim	/^function! ale_linters#solidity#solc#Handle(buffer, lines) abort$/;"	f
ale_linters#spec#rpmlint#GetCommand	plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#GetCommand(buffer) abort$/;"	f
ale_linters#spec#rpmlint#Handle	plugged/ale/ale_linters/spec/rpmlint.vim	/^function! ale_linters#spec#rpmlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqlint#Handle	plugged/ale/ale_linters/sql/sqlint.vim	/^function! ale_linters#sql#sqlint#Handle(buffer, lines) abort$/;"	f
ale_linters#sql#sqllint#Handle	plugged/ale/ale_linters/sql/sqllint.vim	/^function! ale_linters#sql#sqllint#Handle(buffer, lines) abort$/;"	f
ale_linters#stylus#stylelint#GetCommand	plugged/ale/ale_linters/stylus/stylelint.vim	/^function! ale_linters#stylus#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#sugarss#stylelint#GetCommand	plugged/ale/ale_linters/sugarss/stylelint.vim	/^function! ale_linters#sugarss#stylelint#GetCommand(buffer) abort$/;"	f
ale_linters#svelte#svelteserver#GetProjectRoot	plugged/ale/ale_linters/svelte/svelteserver.vim	/^function! ale_linters#svelte#svelteserver#GetProjectRoot(buffer) abort$/;"	f
ale_linters#swift#appleswiftformat#GetLinterCommand	plugged/ale/ale_linters/swift/appleswiftformat.vim	/^function! ale_linters#swift#appleswiftformat#GetLinterCommand(buffer) abort$/;"	f
ale_linters#swift#appleswiftformat#Handle	plugged/ale/ale_linters/swift/appleswiftformat.vim	/^function! ale_linters#swift#appleswiftformat#Handle(buffer, lines) abort$/;"	f
ale_linters#swift#swiftlint#GetCommand	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetCommand(buffer) abort$/;"	f
ale_linters#swift#swiftlint#GetExecutable	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#GetExecutable(buffer) abort$/;"	f
ale_linters#swift#swiftlint#Handle	plugged/ale/ale_linters/swift/swiftlint.vim	/^function! ale_linters#swift#swiftlint#Handle(buffer, lines) abort$/;"	f
ale_linters#systemd#systemd_analyze#Handle	plugged/ale/ale_linters/systemd/systemd_analyze.vim	/^function! ale_linters#systemd#systemd_analyze#Handle(buffer, lines) abort$/;"	f
ale_linters#tcl#nagelfar#GetCommand	plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#GetCommand(buffer) abort$/;"	f
ale_linters#tcl#nagelfar#Handle	plugged/ale/ale_linters/tcl/nagelfar.vim	/^function! ale_linters#tcl#nagelfar#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#terraform#GetCommand	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetDetail	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetDetail(error) abort$/;"	f
ale_linters#terraform#terraform#GetExecutable	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform#GetType	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#GetType(severity) abort$/;"	f
ale_linters#terraform#terraform#Handle	plugged/ale/ale_linters/terraform/terraform.vim	/^function! ale_linters#terraform#terraform#Handle(buffer, lines) abort$/;"	f
ale_linters#terraform#terraform_ls#GetCommand	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_ls#GetProjectRoot	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#terraform#terraform_ls#GetTerraformExecutable	plugged/ale/ale_linters/terraform/terraform_ls.vim	/^function! ale_linters#terraform#terraform_ls#GetTerraformExecutable(buffer) abort$/;"	f
ale_linters#terraform#terraform_lsp#GetCommand	plugged/ale/ale_linters/terraform/terraform_lsp.vim	/^function! ale_linters#terraform#terraform_lsp#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#terraform_lsp#GetProjectRoot	plugged/ale/ale_linters/terraform/terraform_lsp.vim	/^function! ale_linters#terraform#terraform_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#terraform#tflint#GetCommand	plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#GetCommand(buffer) abort$/;"	f
ale_linters#terraform#tflint#Handle	plugged/ale/ale_linters/terraform/tflint.vim	/^function! ale_linters#terraform#tflint#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#chktex#GetCommand	plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#GetCommand(buffer) abort$/;"	f
ale_linters#tex#chktex#Handle	plugged/ale/ale_linters/tex/chktex.vim	/^function! ale_linters#tex#chktex#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#lacheck#Handle	plugged/ale/ale_linters/tex/lacheck.vim	/^function! ale_linters#tex#lacheck#Handle(buffer, lines) abort$/;"	f
ale_linters#tex#texlab#GetCommand	plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetCommand(buffer) abort$/;"	f
ale_linters#tex#texlab#GetProjectRoot	plugged/ale/ale_linters/tex/texlab.vim	/^function! ale_linters#tex#texlab#GetProjectRoot(buffer) abort$/;"	f
ale_linters#thrift#thrift#GetCommand	plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#GetCommand(buffer) abort$/;"	f
ale_linters#thrift#thrift#Handle	plugged/ale/ale_linters/thrift/thrift.vim	/^function! ale_linters#thrift#thrift#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#deno#GetInitializationOptions	plugged/ale/ale_linters/typescript/deno.vim	/^function! ale_linters#typescript#deno#GetInitializationOptions(buffer) abort$/;"	f
ale_linters#typescript#standard#GetCommand	plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#standard#GetExecutable	plugged/ale/ale_linters/typescript/standard.vim	/^function! ale_linters#typescript#standard#GetExecutable(buffer) abort$/;"	f
ale_linters#typescript#tslint#GetCommand	plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#GetCommand(buffer) abort$/;"	f
ale_linters#typescript#tslint#Handle	plugged/ale/ale_linters/typescript/tslint.vim	/^function! ale_linters#typescript#tslint#Handle(buffer, lines) abort$/;"	f
ale_linters#typescript#typecheck#Handle	plugged/ale/ale_linters/typescript/typecheck.vim	/^function! ale_linters#typescript#typecheck#Handle(buffer, lines) abort$/;"	f
ale_linters#v#v#GetCommand	plugged/ale/ale_linters/v/v.vim	/^function! ale_linters#v#v#GetCommand(buffer) abort$/;"	f
ale_linters#v#v#Handler	plugged/ale/ale_linters/v/v.vim	/^function! ale_linters#v#v#Handler(buffer, lines) abort$/;"	f
ale_linters#vala#vala_lint#GetCommand	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#GetCommand(buffer) abort$/;"	f
ale_linters#vala#vala_lint#GetExecutable	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#GetExecutable(buffer) abort$/;"	f
ale_linters#vala#vala_lint#Handle	plugged/ale/ale_linters/vala/vala_lint.vim	/^function! ale_linters#vala#vala_lint#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#iverilog#GetCommand	plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#iverilog#Handle	plugged/ale/ale_linters/verilog/iverilog.vim	/^function! ale_linters#verilog#iverilog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#verilator#GetCommand	plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#verilator#Handle	plugged/ale/ale_linters/verilog/verilator.vim	/^function! ale_linters#verilog#verilator#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#vlog#GetCommand	plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#vlog#Handle	plugged/ale/ale_linters/verilog/vlog.vim	/^function! ale_linters#verilog#vlog#Handle(buffer, lines) abort$/;"	f
ale_linters#verilog#xvlog#GetCommand	plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#GetCommand(buffer) abort$/;"	f
ale_linters#verilog#xvlog#Handle	plugged/ale/ale_linters/verilog/xvlog.vim	/^function! ale_linters#verilog#xvlog#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#ghdl#GetCommand	plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#ghdl#Handle	plugged/ale/ale_linters/vhdl/ghdl.vim	/^function! ale_linters#vhdl#ghdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#vcom#GetCommand	plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#vcom#Handle	plugged/ale/ale_linters/vhdl/vcom.vim	/^function! ale_linters#vhdl#vcom#Handle(buffer, lines) abort$/;"	f
ale_linters#vhdl#xvhdl#GetCommand	plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#GetCommand(buffer) abort$/;"	f
ale_linters#vhdl#xvhdl#Handle	plugged/ale/ale_linters/vhdl/xvhdl.vim	/^function! ale_linters#vhdl#xvhdl#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCommand	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCommand(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetCwd	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetCwd(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#GetExecutable	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#GetExecutable(buffer) abort$/;"	f
ale_linters#vim#ale_custom_linting_rules#Handle	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! ale_linters#vim#ale_custom_linting_rules#Handle(buffer, lines) abort$/;"	f
ale_linters#vim#vimls#GetProjectRoot	plugged/ale/ale_linters/vim/vimls.vim	/^function! ale_linters#vim#vimls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#vim#vint#GetCommand	plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#GetCommand(buffer, version) abort$/;"	f
ale_linters#vim#vint#Handle	plugged/ale/ale_linters/vim/vint.vim	/^function! ale_linters#vim#vint#Handle(buffer, lines) abort$/;"	f
ale_linters#vue#vls#GetProjectRoot	plugged/ale/ale_linters/vue/vls.vim	/^function! ale_linters#vue#vls#GetProjectRoot(buffer) abort$/;"	f
ale_linters#xml#xmllint#GetCommand	plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#GetCommand(buffer) abort$/;"	f
ale_linters#xml#xmllint#Handle	plugged/ale/ale_linters/xml/xmllint.vim	/^function! ale_linters#xml#xmllint#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#circleci#Handle	plugged/ale/ale_linters/yaml/circleci.vim	/^function! ale_linters#yaml#circleci#Handle(buffer, lines) abort$/;"	f
ale_linters#yaml#swaglint#Handle	plugged/ale/ale_linters/yaml/swaglint.vim	/^function! ale_linters#yaml#swaglint#Handle(buffer, lines) abort$/;"	f
ale_linters#yang#yang_lsp#GetProjectRoot	plugged/ale/ale_linters/yang/yang_lsp.vim	/^function! ale_linters#yang#yang_lsp#GetProjectRoot(buffer) abort$/;"	f
ale_linters#zig#zls#GetProjectRoot	plugged/ale/ale_linters/zig/zls.vim	/^function! ale_linters#zig#zls#GetProjectRoot(buffer) abort$/;"	f
ale_module	plugged/ale/test/python/test_deoplete_source.py	/^ale_module = imp.load_source($/;"	v
algo	plugged/fzf/src/algo/algo.go	/^package algo$/;"	p
algo	plugged/fzf/src/algo/algo_test.go	/^package algo$/;"	p
algo	plugged/fzf/src/algo/normalize.go	/^package algo$/;"	p
all	plugged/delimitMate/Makefile	/^all: zip gzip$/;"	t
all	plugged/delimitMate/test/Makefile	/^all: build\/runVimTests$/;"	t
all	plugged/fzf/Makefile	/^all: target\/$(BINARY)$/;"	t
all	plugged/supertab/Makefile	/^all: dist$/;"	t
all_match	plugged/completion-nvim/lua/completion/matching.lua	/^local function all_match()$/;"	f
alloc16	plugged/fzf/src/algo/algo.go	/^func alloc16(offset int, slab *util.Slab, size int) (int, []int16) {$/;"	f	package:algo	typeref:typename:(int, []int16)
alloc32	plugged/fzf/src/algo/algo.go	/^func alloc32(offset int, slab *util.Slab, size int) (int, []int32) {$/;"	f	package:algo	typeref:typename:(int, []int32)
als	plugged/nvim-lspconfig/CONFIG.md	/^## als$/;"	s	chapter:Configurations
analysis_server_snapshot_path	plugged/nvim-lspconfig/lua/lspconfig/dartls.lua	/^local analysis_server_snapshot_path = function()$/;"	f
angularls	plugged/nvim-lspconfig/CONFIG.md	/^## angularls$/;"	s	chapter:Configurations
ansi	plugged/fzf/src/terminal.go	/^	ansi         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
ansiBenchmarkString	plugged/fzf/src/ansi_test.go	/^const ansiBenchmarkString = "\\x1b[38;5;81m\\x1b[01;31m\\x1b[Kkernel\/\\x1b[0m\\x1b[38;5;81mbpf\//;"	c	package:fzf
ansiOffset	plugged/fzf/src/ansi.go	/^type ansiOffset struct {$/;"	s	package:fzf
ansiRegexRefence	plugged/fzf/src/ansi_test.go	/^var ansiRegexRefence = regexp.MustCompile("(?:\\x1b[\\\\[()][0-9;]*[a-zA-Z@]|\\x1b][0-9];[[:prin/;"	v	package:fzf
ansiState	plugged/fzf/src/ansi.go	/^type ansiState struct {$/;"	s	package:fzf
answer	plugged/ale/test/test-files/json/testfile.json	/^{"answer":42}$/;"	n
any_include?	plugged/fzf/test/test_go.rb	/^          def any_include?(val)$/;"	f	method:Tmux.until
append	plugged/fzf/src/history.go	/^func (h *History) append(line string) error {$/;"	f	struct:fzf.History	typeref:typename:error
append_line	plugged/fzf/install	/^append_line() {$/;"	f
applyAddtionalTextEdits	plugged/completion-nvim/lua/completion.lua	/^local function applyAddtionalTextEdits(completed_item)$/;"	f
apply_defaults	plugged/nvim-lspconfig/lua/lspconfig/_lspui.lua	/^local function apply_defaults(original, defaults)$/;"	f
apprentice	plugged/lightline.vim/colorscheme.md	/^### apprentice$/;"	S	chapter:Available Colorschemes
args=	plugged/fzf/bin/fzf-tmux	/^      args=()$/;"	f
args=	plugged/fzf/bin/fzf-tmux	/^args=()$/;"	f
args=	plugged/fzf/shell/completion.bash	/^    args=()$/;"	f
args=	plugged/fzf/shell/completion.zsh	/^    args=()$/;"	f
asciiFuzzyIndex	plugged/fzf/src/algo/algo.go	/^func asciiFuzzyIndex(input *util.Chars, pattern []rune, caseSensitive bool) int {$/;"	f	package:algo	typeref:typename:int
ask	plugged/fzf/install	/^ask() {$/;"	f
ask	plugged/fzf/uninstall	/^ask() {$/;"	f
assert	plugged/fzf/src/merger_test.go	/^func assert(t *testing.T, cond bool, msg ...string) {$/;"	f	package:fzf
assertMatch	plugged/fzf/src/algo/algo_test.go	/^func assertMatch(t *testing.T, fun Algo, caseSensitive, forward bool, input, pattern string, sid/;"	f	package:algo
assertMatch2	plugged/fzf/src/algo/algo_test.go	/^func assertMatch2(t *testing.T, fun Algo, caseSensitive, normalize, forward bool, input, pattern/;"	f	package:algo
asyncomplete#sources#ale#completor	plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#completor(options, context) abort$/;"	f
asyncomplete#sources#ale#get_source_options	plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#get_source_options(...) abort$/;"	f
asyncomplete#sources#ale#get_triggers	plugged/ale/autoload/asyncomplete/sources/ale.vim	/^function! asyncomplete#sources#ale#get_triggers() abort$/;"	f
at	plugged/fzf/src/terminal.go	/^	at   time.Time$/;"	m	struct:fzf.selectedItem	typeref:typename:time.Time
atof	plugged/fzf/src/options.go	/^func atof(str string) float64 {$/;"	f	package:fzf	typeref:typename:float64
atoi	plugged/fzf/src/options.go	/^func atoi(str string) int {$/;"	f	package:fzf	typeref:typename:int
atoi	plugged/fzf/src/tui/light.go	/^func atoi(s string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
attr	plugged/fzf/src/ansi.go	/^	attr tui.Attr$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Attr
attr	plugged/fzf/src/tui/tui.go	/^	attr Attr$/;"	m	struct:tui.ColorPair	typeref:typename:Attr
attrCodes	plugged/fzf/src/tui/light.go	/^func attrCodes(attr Attr) []string {$/;"	f	package:tui	typeref:typename:[]string
autoAddParens	plugged/completion-nvim/lua/completion.lua	/^local function autoAddParens(completed_item)$/;"	f
awkBlack	plugged/fzf/src/tokenizer.go	/^	awkBlack$/;"	c	package:fzf
awkNil	plugged/fzf/src/tokenizer.go	/^	awkNil = iota$/;"	c	package:fzf
awkTokenizer	plugged/fzf/src/tokenizer.go	/^func awkTokenizer(input string) ([]string, int) {$/;"	f	package:fzf	typeref:typename:([]string, int)
awkWhite	plugged/fzf/src/tokenizer.go	/^	awkWhite$/;"	c	package:fzf
ayu_dark	plugged/lightline.vim/colorscheme.md	/^### ayu_dark$/;"	S	chapter:Available Colorschemes
ayu_light	plugged/lightline.vim/colorscheme.md	/^### ayu_light$/;"	S	chapter:Available Colorschemes
ayu_mirage	plugged/lightline.vim/colorscheme.md	/^### ayu_mirage$/;"	S	chapter:Available Colorschemes
b:AutoPairs	plugged/rust.vim/ftplugin/rust.vim	/^    let b:AutoPairs = {'(':')', '[':']', '{':'}','"':'"', '`':'`'}$/;"	v
b:SuperTabContextTextMemberPatterns	plugged/supertab/ftplugin/html.vim	/^  let b:SuperTabContextTextMemberPatterns = ['<\/']$/;"	v
b:SuperTabContextTextMemberPatterns	plugged/supertab/ftplugin/xml.vim	/^  let b:SuperTabContextTextMemberPatterns = ['<\/']$/;"	v
b:SuperTabContextTextOmniPrecedence	plugged/supertab/ftplugin/html.vim	/^    let b:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
b:SuperTabContextTextOmniPrecedence	plugged/supertab/ftplugin/xml.vim	/^  let b:SuperTabContextTextOmniPrecedence = ['&omnifunc', '&completefunc']$/;"	v
b:ale_enabled	ftplugin/arduino.vim	/^let b:ale_enabled = 0$/;"	v
b:current_syntax	plugged/ale/syntax/ale-fix-suggest.vim	/^let b:current_syntax = 'ale-fix-suggest'$/;"	v
b:current_syntax	plugged/ale/syntax/ale-preview-selection.vim	/^let b:current_syntax = 'ale-preview-selection'$/;"	v
b:current_syntax	plugged/rust.vim/syntax/rust.vim	/^let b:current_syntax = "rust"$/;"	v
b:current_syntax	plugged/vim-dirvish/syntax/dirvish.vim	/^let b:current_syntax = 'dirvish'$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitive.vim	/^let b:current_syntax = "fugitive"$/;"	v
b:current_syntax	plugged/vim-fugitive/syntax/fugitiveblame.vim	/^let b:current_syntax = "fugitiveblame"$/;"	v
b:current_syntax_embed	plugged/rust.vim/syntax/rust.vim	/^    let b:current_syntax_embed = 1$/;"	v
b:did_ftplugin	plugged/rust.vim/ftplugin/rust.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-dirvish/ftplugin/dirvish.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	plugged/vim-fugitive/ftplugin/fugitiveblame.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_indent	plugged/rust.vim/indent/rust.vim	/^let b:did_indent = 1$/;"	v
b:match_skip	plugged/rust.vim/ftplugin/rust.vim	/^let b:match_skip = 's:comment\\|string\\|rustCharacter\\|rustArrow'$/;"	v
b:rust_last_args	plugged/rust.vim/ftplugin/rust.vim	/^    let b:rust_last_args = []$/;"	v
b:rust_last_rustc_args	plugged/rust.vim/ftplugin/rust.vim	/^    let b:rust_last_rustc_args = []$/;"	v
b:rust_original_delimitMate_excluded_regions	plugged/rust.vim/ftplugin/rust.vim	/^        let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
b:rust_set_conceallevel	plugged/rust.vim/ftplugin/rust.vim	/^    let b:rust_set_conceallevel=1$/;"	v
b:rust_set_foldmethod	plugged/rust.vim/ftplugin/rust.vim	/^    let b:rust_set_foldmethod=1$/;"	v
b:rust_set_style	plugged/rust.vim/ftplugin/rust.vim	/^    let b:rust_set_style = 1$/;"	v
b:undo_ftplugin	plugged/rust.vim/ftplugin/rust.vim	/^let b:undo_ftplugin = "$/;"	v
bash	plugged/fzf/test/test_go.rb	/^    def bash$/;"	S	class:Shell
bashls	plugged/nvim-lspconfig/CONFIG.md	/^## bashls$/;"	s	chapter:Configurations
basicMatch	plugged/fzf/src/pattern.go	/^func (p *Pattern) basicMatch(item *Item, withPos bool, slab *util.Slab) (Offset, int, *[]int) {$/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
beancount	plugged/nvim-lspconfig/CONFIG.md	/^## beancount$/;"	s	chapter:Configurations
before_init	plugged/nvim-lspconfig/lua/lspconfig/codeqlls.lua	/^    before_init = function(initialize_params)$/;"	f
begin	plugged/fzf/src/tokenizer.go	/^	begin int$/;"	m	struct:fzf.Range	typeref:typename:int
bench	plugged/fzf/Makefile	/^bench:$/;"	t
bg	plugged/fzf/src/ansi.go	/^	bg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
bg	plugged/fzf/src/tui/light.go	/^	bg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
bg	plugged/fzf/src/tui/tui.go	/^	bg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
bin/fzf	plugged/fzf/Makefile	/^bin\/fzf: target\/$(BINARY) | bin$/;"	t
bold	plugged/nvim-lspconfig/scripts/docgen.lua	/^                        local function bold(s)$/;"	f
bonusAt	plugged/fzf/src/algo/algo.go	/^func bonusAt(input *util.Chars, idx int) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusBoundary	plugged/fzf/src/algo/algo.go	/^	bonusBoundary = scoreMatch \/ 2$/;"	c	package:algo
bonusCamel123	plugged/fzf/src/algo/algo.go	/^	bonusCamel123 = bonusBoundary + scoreGapExtention$/;"	c	package:algo
bonusConsecutive	plugged/fzf/src/algo/algo.go	/^	bonusConsecutive = -(scoreGapStart + scoreGapExtention)$/;"	c	package:algo
bonusFirstCharMultiplier	plugged/fzf/src/algo/algo.go	/^	bonusFirstCharMultiplier = 2$/;"	c	package:algo
bonusFor	plugged/fzf/src/algo/algo.go	/^func bonusFor(prevClass charClass, class charClass) int16 {$/;"	f	package:algo	typeref:typename:int16
bonusNonWord	plugged/fzf/src/algo/algo.go	/^	bonusNonWord = scoreMatch \/ 2$/;"	c	package:algo
border	plugged/fzf/src/options.go	/^	border      tui.BorderShape$/;"	m	struct:fzf.previewOpts	typeref:typename:tui.BorderShape
border	plugged/fzf/src/terminal.go	/^	border       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
border	plugged/fzf/src/tui/light.go	/^	border   BorderStyle$/;"	m	struct:tui.LightWindow	typeref:typename:BorderStyle
borderShape	plugged/fzf/src/terminal.go	/^	borderShape  tui.BorderShape$/;"	m	struct:fzf.Terminal	typeref:typename:tui.BorderShape
borderStyle	plugged/fzf/src/tui/tcell.go	/^	borderStyle BorderStyle$/;"	m	struct:tui.TcellWindow	typeref:typename:BorderStyle
bottomLeft	plugged/fzf/src/tui/tui.go	/^	bottomLeft  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
bottomRight	plugged/fzf/src/tui/tui.go	/^	bottomRight rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
buf_build	plugged/nvim-lspconfig/lua/lspconfig/texlab.lua	/^local function buf_build(bufnr)$/;"	f
buf_cache	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function buf_cache(bufnr)$/;"	f
buf_search	plugged/nvim-lspconfig/lua/lspconfig/texlab.lua	/^local function buf_search(bufnr)$/;"	f
buf_set_keymap	plugged/nvim-lspconfig/test/minimal_init.lua	/^    local function buf_set_keymap(...)$/;"	f
buf_set_option	plugged/nvim-lspconfig/test/minimal_init.lua	/^    local function buf_set_option(...)$/;"	f
buffer	plugged/fzf/src/tui/light.go	/^	buffer        []byte$/;"	m	struct:tui.LightRenderer	typeref:typename:[]byte
build	plugged/fzf/Makefile	/^build:$/;"	t
build/VimTAP	plugged/delimitMate/test/Makefile	/^build\/VimTAP:$/;"	t
build/runVimTests	plugged/delimitMate/test/Makefile	/^build\/runVimTests: build\/VimTAP$/;"	t
buildCacheKey	plugged/fzf/src/pattern.go	/^func (p *Pattern) buildCacheKey() string {$/;"	f	struct:fzf.Pattern	typeref:typename:string
buildLists	plugged/fzf/src/merger_test.go	/^func buildLists(partiallySorted bool) ([][]Result, []Result) {$/;"	f	package:fzf	typeref:typename:([][]Result, []Result)
buildPlusList	plugged/fzf/src/terminal.go	/^func (t *Terminal) buildPlusList(template string, forcePlus bool) (bool, []*Item) {$/;"	f	struct:fzf.Terminal	typeref:typename:(bool, []*Item)
buildResult	plugged/fzf/src/result.go	/^func buildResult(item *Item, offsets []Offset, score int) Result {$/;"	f	package:fzf	typeref:typename:Result
byBegin	plugged/fzf/src/options.go	/^	byBegin$/;"	c	package:fzf
byEnd	plugged/fzf/src/options.go	/^	byEnd$/;"	c	package:fzf
byLength	plugged/fzf/src/options.go	/^	byLength$/;"	c	package:fzf
byScore	plugged/fzf/src/options.go	/^	byScore criterion = iota$/;"	c	package:fzf	typeref:type:criterion
byTimeOrder	plugged/fzf/src/terminal.go	/^type byTimeOrder []selectedItem$/;"	t	package:fzf	typeref:typename:[]selectedItem
cS	plugged/vim-surround/plugin/surround.vim	/^  nmap cS  <Plug>CSurround$/;"	m
cache	plugged/fzf/src/cache.go	/^	cache map[*Chunk]*queryCache$/;"	m	struct:fzf.ChunkCache	typeref:typename:map[*Chunk]*queryCache
cacheKey	plugged/fzf/src/pattern.go	/^	cacheKey      string$/;"	m	struct:fzf.Pattern	typeref:typename:string
cacheable	plugged/fzf/src/merger.go	/^func (mg *Merger) cacheable() bool {$/;"	f	struct:fzf.Merger	typeref:typename:bool
cacheable	plugged/fzf/src/pattern.go	/^	cacheable     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
calculateScore	plugged/fzf/src/algo/algo.go	/^func calculateScore(caseSensitive bool, normalize bool, text *util.Chars, pattern []rune, sidx i/;"	f	package:algo	typeref:typename:(int, *[]int)
calculateSize	plugged/fzf/src/terminal.go	/^func calculateSize(base int, size sizeSpec, occupied int, minSize int, pad int) int {$/;"	f	package:fzf	typeref:typename:int
call	plugged/ale/test/python/test_deoplete_source.py	/^    def call(self, function, *args):$/;"	m	class:VimMock
cancelPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) cancelPreview() {$/;"	f	struct:fzf.Terminal
cancel_tests	plugged/ale/run-tests	/^cancel_tests() {$/;"	f
capture	plugged/fzf/test/test_go.rb	/^  def capture$/;"	f	class:Tmux
cargo#Load	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#Load()$/;"	f
cargo#bench	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#bench(args)$/;"	f
cargo#build	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#build(args)$/;"	f
cargo#check	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#check(args)$/;"	f
cargo#clean	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#clean(args)$/;"	f
cargo#cmd	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#cmd(args) abort$/;"	f
cargo#doc	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#doc(args)$/;"	f
cargo#init	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#init(args)$/;"	f
cargo#install	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#install(args)$/;"	f
cargo#nearestCargo	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#nearestCargo(is_getcwd) abort$/;"	f
cargo#nearestRootCargo	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#nearestRootCargo(is_getcwd) abort$/;"	f
cargo#nearestWorkspaceCargo	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#nearestWorkspaceCargo(is_getcwd) abort$/;"	f
cargo#new	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#new(args)$/;"	f
cargo#publish	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#publish(args)$/;"	f
cargo#quickfix#CmdPost	plugged/rust.vim/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPost() abort$/;"	f
cargo#quickfix#CmdPre	plugged/rust.vim/autoload/cargo/quickfix.vim	/^function! cargo#quickfix#CmdPre() abort$/;"	f
cargo#run	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#run(args)$/;"	f
cargo#runtarget	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#runtarget(args)$/;"	f
cargo#search	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#search(args)$/;"	f
cargo#test	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#test(args)$/;"	f
cargo#update	plugged/rust.vim/autoload/cargo.vim	/^function! cargo#update(args)$/;"	f
caseSensitive	plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
caseSensitive	plugged/fzf/src/pattern.go	/^	caseSensitive bool$/;"	m	struct:fzf.term	typeref:typename:bool
cb	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^    local function cb(dir, _)$/;"	f
ccls	plugged/nvim-lspconfig/CONFIG.md	/^## ccls$/;"	s	chapter:Configurations
cgc	plugged/vim-commentary/plugin/commentary.vim	/^    nmap cgc <Plug>ChangeCommentary$/;"	m
chain_list_to_tree	plugged/completion-nvim/lua/completion/chain_completion.lua	/^local function chain_list_to_tree(complete_list)$/;"	f
charClass	plugged/fzf/src/algo/algo.go	/^type charClass int$/;"	t	package:algo	typeref:typename:int
charClassOf	plugged/fzf/src/algo/algo.go	/^func charClassOf(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfAscii	plugged/fzf/src/algo/algo.go	/^func charClassOfAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charClassOfNonAscii	plugged/fzf/src/algo/algo.go	/^func charClassOfNonAscii(char rune) charClass {$/;"	f	package:algo	typeref:typename:charClass
charLetter	plugged/fzf/src/algo/algo.go	/^	charLetter$/;"	c	package:algo
charLower	plugged/fzf/src/algo/algo.go	/^	charLower$/;"	c	package:algo
charNonWord	plugged/fzf/src/algo/algo.go	/^	charNonWord charClass = iota$/;"	c	package:algo	typeref:type:charClass
charNumber	plugged/fzf/src/algo/algo.go	/^	charNumber$/;"	c	package:algo
charUpper	plugged/fzf/src/algo/algo.go	/^	charUpper$/;"	c	package:algo
checkAscii	plugged/fzf/src/util/chars.go	/^func checkAscii(bytes []byte) (bool, int) {$/;"	f	package:util	typeref:typename:(bool, int)
checkCallback	plugged/completion-nvim/lua/completion/complete.lua	/^local function checkCallback(callback_array)$/;"	f
checkCompletionSource	plugged/completion-nvim/lua/completion/health.lua	/^local checkCompletionSource = function()$/;"	f
checkEmptyCompletion	plugged/completion-nvim/lua/completion/source/ins_complete.lua	/^local checkEmptyCompletion = function()$/;"	f
checkSnippetSource	plugged/completion-nvim/lua/completion/health.lua	/^local checkSnippetSource = function()$/;"	f
check_binary	plugged/fzf/install	/^check_binary() {$/;"	f
check_binary	plugged/fzf/install.ps1	/^function check_binary () {$/;"	f
check_errors	plugged/ale/test/script/custom-linting-rules	/^check_errors() {$/;"	f
check_lines	plugged/ale/test/script/block-padding-checker	/^def check_lines(line_iter):$/;"	f
chunkSize	plugged/fzf/src/constants.go	/^	chunkSize int = 100$/;"	c	package:fzf	typeref:typename:int
chunks	plugged/fzf/src/chunklist.go	/^	chunks []*Chunk$/;"	m	struct:fzf.ChunkList	typeref:typename:[]*Chunk
chunks	plugged/fzf/src/matcher.go	/^	chunks     []*Chunk$/;"	m	struct:fzf.MatchRequest	typeref:typename:[]*Chunk
chunks	plugged/fzf/src/merger.go	/^	chunks  *[]*Chunk$/;"	m	struct:fzf.Merger	typeref:typename:*[]*Chunk
clangd	plugged/nvim-lspconfig/CONFIG.md	/^## clangd$/;"	s	chapter:Configurations
clean	plugged/delimitMate/Makefile	/^clean:$/;"	t
clean	plugged/fzf/Makefile	/^clean:$/;"	t
clean	plugged/supertab/Makefile	/^clean:$/;"	t
cleanExit	plugged/fzf/src/terminal.go	/^	cleanExit    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
cleanTemporaryFiles	plugged/fzf/src/terminal.go	/^func cleanTemporaryFiles() {$/;"	f	package:fzf
cleanse	plugged/fzf/src/tui/light.go	/^func cleanse(str string) string {$/;"	f	package:tui	typeref:typename:string
cleanup	plugged/fzf/bin/fzf-tmux	/^cleanup() {$/;"	f
clearCache	plugged/fzf/src/matcher.go	/^	clearCache bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
clearChunkCache	plugged/fzf/src/pattern.go	/^func clearChunkCache() {$/;"	f	package:fzf
clearCode	plugged/fzf/src/terminal.go	/^const clearCode string = "\\x1b[2J"$/;"	c	package:fzf	typeref:typename:string
clearOnExit	plugged/fzf/src/tui/light.go	/^	clearOnExit   bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
clearPatternCache	plugged/fzf/src/pattern.go	/^func clearPatternCache() {$/;"	f	package:fzf
clickY	plugged/fzf/src/tui/light.go	/^	clickY        []int$/;"	m	struct:tui.LightRenderer	typeref:typename:[]int
clickY	plugged/fzf/src/tui/tui.go	/^	clickY       []int$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:[]int
client.workspace_did_change_configuration	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^        function client.workspace_did_change_configuration(settings)$/;"	f
clojure_lsp	plugged/nvim-lspconfig/CONFIG.md	/^## clojure_lsp$/;"	s	chapter:Configurations
closePlatform	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
closePlatform	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) closePlatform() {$/;"	f	unknown:tui.LightRenderer
cmake	plugged/nvim-lspconfig/CONFIG.md	/^## cmake$/;"	s	chapter:Configurations
code	plugged/ale/run-tests.bat	/^set code=%ERRORLEVEL%$/;"	v
codeqlls	plugged/nvim-lspconfig/CONFIG.md	/^## codeqlls$/;"	s	chapter:Configurations
colBlack	plugged/fzf/src/tui/tui.go	/^	colBlack Color = iota$/;"	c	package:tui	typeref:type:Color
colBlue	plugged/fzf/src/tui/tui.go	/^	colBlue$/;"	c	package:tui
colCyan	plugged/fzf/src/tui/tui.go	/^	colCyan$/;"	c	package:tui
colDefault	plugged/fzf/src/tui/tui.go	/^	colDefault   Color = -1$/;"	c	package:tui	typeref:type:Color
colGreen	plugged/fzf/src/tui/tui.go	/^	colGreen$/;"	c	package:tui
colMagenta	plugged/fzf/src/tui/tui.go	/^	colMagenta$/;"	c	package:tui
colRed	plugged/fzf/src/tui/tui.go	/^	colRed$/;"	c	package:tui
colUndefined	plugged/fzf/src/tui/tui.go	/^	colUndefined Color = -2$/;"	c	package:tui	typeref:type:Color
colWhite	plugged/fzf/src/tui/tui.go	/^	colWhite$/;"	c	package:tui
colYellow	plugged/fzf/src/tui/tui.go	/^	colYellow$/;"	c	package:tui
color	plugged/fzf/src/ansi.go	/^	color  ansiState$/;"	m	struct:fzf.ansiOffset	typeref:typename:ansiState
color	plugged/fzf/src/result.go	/^	color  tui.ColorPair$/;"	m	struct:fzf.colorOffset	typeref:typename:tui.ColorPair
color	plugged/fzf/src/tui/tcell.go	/^	color       bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
color-vader-output	plugged/ale/test/script/run-vader-tests	/^function color-vader-output() {$/;"	f
colorCodes	plugged/fzf/src/tui/light.go	/^func colorCodes(fg Color, bg Color) []string {$/;"	f	package:tui	typeref:typename:[]string
colorOffset	plugged/fzf/src/result.go	/^type colorOffset struct {$/;"	s	package:fzf
colorOffsets	plugged/fzf/src/result.go	/^func (result *Result) colorOffsets(matchOffsets []Offset, theme *tui.ColorTheme, colBase tui.Col/;"	f	struct:fzf.Result	typeref:typename:[]colorOffset
colored	plugged/fzf/src/ansi.go	/^func (s *ansiState) colored() bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
colored	plugged/fzf/src/tui/light.go	/^	colored  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
colors	plugged/fzf/src/item.go	/^	colors      *[]ansiOffset \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]ansiOffset
comma	plugged/delimitMate/Makefile	/^comma    := ,$/;"	m
command	plugged/ale/test/python/test_deoplete_source.py	/^    def command(self, command):$/;"	m	class:VimMock
command	plugged/fzf/src/options.go	/^	command     string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
command	plugged/fzf/src/reader.go	/^	command  *string$/;"	m	struct:fzf.Reader	typeref:typename:*string
command	plugged/fzf/src/terminal.go	/^	command *string$/;"	m	struct:fzf.searchRequest	typeref:typename:*string
commands	plugged/delimitMate/test/expand_cr.vim	/^  let commands = []$/;"	v
commands	plugged/delimitMate/test/expand_cr.vim	/^let commands = []$/;"	v
commentary.vim	plugged/vim-commentary/README.markdown	/^# commentary.vim$/;"	c
compareRanks	plugged/fzf/src/result_others.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compareRanks	plugged/fzf/src/result_x86.go	/^func compareRanks(irank Result, jrank Result, tac bool) bool {$/;"	f	package:fzf	typeref:typename:bool
compare_scores_then_strings	plugged/completion-nvim/lua/completion/util.lua	/^local function compare_scores_then_strings(a, b)$/;"	f
compare_strings	plugged/completion-nvim/lua/completion/util.lua	/^local function compare_strings(a, b)$/;"	f
completion#completion_confirm	plugged/completion-nvim/autoload/completion.vim	/^function! completion#completion_confirm() abort$/;"	f
completion#completion_wrapper	plugged/completion-nvim/autoload/completion.vim	/^function! completion#completion_wrapper()$/;"	f
completion#enable_in_comment	plugged/completion-nvim/autoload/completion.vim	/^function! completion#enable_in_comment()$/;"	f
completion#get_buffer_variable	plugged/completion-nvim/autoload/completion.vim	/^function! completion#get_buffer_variable(str)$/;"	f
completion#trigger_completion	plugged/completion-nvim/autoload/completion.vim	/^function! completion#trigger_completion()$/;"	f
completion#wrap_completion	plugged/completion-nvim/autoload/completion.vim	/^function! completion#wrap_completion() abort$/;"	f
completion-nvim	plugged/completion-nvim/README.md	/^# completion-nvim$/;"	c
cond	plugged/fzf/src/util/eventbox.go	/^	cond   *sync.Cond$/;"	m	struct:util.EventBox	typeref:typename:*sync.Cond
configs.__newindex	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^function configs.__newindex(t, config_name, config_def)$/;"	f
consoleDevice	plugged/fzf/src/tui/light.go	/^const consoleDevice string = "\/dev\/tty"$/;"	c	package:tui	typeref:typename:string
consoleFlagsInput	plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsInput  = uint32(windows.ENABLE_VIRTUAL_TERMINAL_INPUT | windows.ENABLE_PROCESSED_IN/;"	v	package:tui
consoleFlagsOutput	plugged/fzf/src/tui/light_windows.go	/^	consoleFlagsOutput = uint32(windows.ENABLE_VIRTUAL_TERMINAL_PROCESSING | windows.ENABLE_PROCESS/;"	v	package:tui
constrain	plugged/fzf/src/terminal.go	/^func (t *Terminal) constrain() {$/;"	f	struct:fzf.Terminal
consts,static constants	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?(static|const)[ \\t]+([a-zA-Z0-9_]+)\/\\3\/c,consts,static c/;"	k	langdef:Rust
convertBoolToInt32	plugged/fzf/src/util/atomicbool.go	/^func convertBoolToInt32(b bool) int32 {$/;"	f	package:util	typeref:typename:int32
coordinatorDelayMax	plugged/fzf/src/constants.go	/^	coordinatorDelayMax  time.Duration = 100 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
coordinatorDelayStep	plugged/fzf/src/constants.go	/^	coordinatorDelayStep time.Duration = 10 * time.Millisecond$/;"	c	package:fzf	typeref:typename:time.Duration
copySlice	plugged/fzf/src/terminal.go	/^func copySlice(slice []rune) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
count	plugged/fzf/src/chunklist.go	/^	count int$/;"	m	struct:fzf.Chunk	typeref:typename:int
count	plugged/fzf/src/merger.go	/^	count   int$/;"	m	struct:fzf.Merger	typeref:typename:int
count	plugged/fzf/src/terminal.go	/^	count        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
counts	plugged/fzf/test/test_go.rb	/^          def counts$/;"	f	method:Tmux.until
cprint2	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) cprint2(fg Color, bg Color, attr Attr, text string) {$/;"	f	struct:tui.LightWindow
cr	plugged/supertab/plugin/supertab.vim	/^      let cr = !(map =~? '\\(^\\|[^)]\\)<cr>' || map =~ 'ExpandCr')$/;"	v
cr	plugged/vim-abolish/plugin/abolish.vim	/^  nmap cr  <Plug>(abolish-coerce-word)$/;"	m
create_file	plugged/fzf/install	/^create_file() {$/;"	f
criterion	plugged/fzf/src/options.go	/^type criterion int$/;"	t	package:fzf	typeref:typename:int
crystalline	plugged/nvim-lspconfig/CONFIG.md	/^## crystalline$/;"	s	chapter:Configurations
cs	plugged/vim-surround/plugin/surround.vim	/^  nmap cs  <Plug>Csurround$/;"	m
csi	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) csi(code string) {$/;"	f	unknown:tui.LightRenderer
csi	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csi(code string) {$/;"	f	struct:tui.LightWindow
csiColor	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) csiColor(fg Color, bg Color, attr Attr) bool {$/;"	f	struct:tui.LightWindow	typeref:typename:bool
cssls	plugged/nvim-lspconfig/CONFIG.md	/^## cssls$/;"	s	chapter:Configurations
current	plugged/fzf/src/history.go	/^func (h *History) current() string {$/;"	f	struct:fzf.History	typeref:typename:string
current	plugged/fzf/src/terminal.go	/^	current  bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
currentItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) currentItem() *Item {$/;"	f	struct:fzf.Terminal	typeref:typename:*Item
current_compiler	plugged/rust.vim/compiler/cargo.vim	/^let current_compiler = "cargo"$/;"	v
current_compiler	plugged/rust.vim/compiler/rustc.vim	/^let current_compiler = "rustc"$/;"	v
cursor	plugged/fzf/src/history.go	/^	cursor   int$/;"	m	struct:fzf.History	typeref:typename:int
cursors	plugged/fzf/src/merger.go	/^	cursors []int$/;"	m	struct:fzf.Merger	typeref:typename:[]int
cx	plugged/fzf/src/terminal.go	/^	cx           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cy	plugged/fzf/src/terminal.go	/^	cy           int$/;"	m	struct:fzf.Terminal	typeref:typename:int
cycle	plugged/fzf/src/options.go	/^	cycle       bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
cycle	plugged/fzf/src/terminal.go	/^	cycle        bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
d<C-A>	plugged/vim-speeddating/plugin/speeddating.vim	/^  nmap d<C-A>     <Plug>SpeedDatingNowUTC$/;"	m
d<C-X>	plugged/vim-speeddating/plugin/speeddating.vim	/^  nmap d<C-X>     <Plug>SpeedDatingNowLocal$/;"	m
darcula	plugged/lightline.vim/colorscheme.md	/^### darcula$/;"	S	chapter:Available Colorschemes
dartls	plugged/nvim-lspconfig/CONFIG.md	/^## dartls$/;"	s	chapter:Configurations
debugV2	plugged/fzf/src/algo/algo.go	/^func debugV2(T []rune, pattern []rune, F []int32, lastIdx int, H []int16, C []int16) {$/;"	f	package:algo
defaultCommand	plugged/fzf/src/constants.go	/^var defaultCommand string$/;"	v	package:fzf	typeref:typename:string
defaultEscDelay	plugged/fzf/src/tui/light.go	/^	defaultEscDelay = 100$/;"	c	package:tui
defaultHeight	plugged/fzf/src/tui/light.go	/^	defaultHeight = 24$/;"	c	package:tui
defaultHistoryMax	plugged/fzf/src/constants.go	/^	defaultHistoryMax int = 1000$/;"	c	package:fzf	typeref:typename:int
defaultJumpLabels	plugged/fzf/src/constants.go	/^	defaultJumpLabels string = "asdfghjklqwertyuiopzxcvbnm1234567890ASDFGHJKLQWERTYUIOPZXCVBNM`~;:,/;"	c	package:fzf	typeref:typename:string
defaultKeymap	plugged/fzf/src/terminal.go	/^func defaultKeymap() map[tui.Event][]action {$/;"	f	package:fzf	typeref:typename:map[tui.Event][]action
defaultMargin	plugged/fzf/src/options.go	/^func defaultMargin() [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
defaultOptions	plugged/fzf/src/options.go	/^func defaultOptions() *Options {$/;"	f	package:fzf	typeref:typename:*Options
defaultPreviewOpts	plugged/fzf/src/options.go	/^func defaultPreviewOpts(command string) previewOpts {$/;"	f	package:fzf	typeref:typename:previewOpts
defaultTheme	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.LightRenderer	typeref:typename:*ColorTheme
defaultTheme	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) defaultTheme() *ColorTheme {$/;"	f	unknown:tui.FullscreenRenderer	typeref:typename:*ColorTheme
defaultWidth	plugged/fzf/src/tui/light.go	/^	defaultWidth  = 80$/;"	c	package:tui
delChar	plugged/fzf/src/terminal.go	/^func (t *Terminal) delChar() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
delimNil	plugged/fzf/src/reader.go	/^	delimNil bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
delimitMate	plugged/delimitMate/plugin/delimitMate.vim	/^augroup delimitMate$/;"	a
delimitMate#BS	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#BS() " {{{$/;"	f
delimitMate#ExpandReturn	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandReturn() "{{{$/;"	f
delimitMate#ExpandSpace	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ExpandSpace() "{{{$/;"	f
delimitMate#Get	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Get(...) "{{{$/;"	f
delimitMate#IsEmptyPair	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#IsEmptyPair(str) "{{{$/;"	f
delimitMate#JumpAny	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpAny(...) " {{{$/;"	f
delimitMate#JumpMany	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpMany() " {{{$/;"	f
delimitMate#JumpOut	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#JumpOut(char) "{{{$/;"	f
delimitMate#ParenDelim	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ParenDelim(right) " {{{$/;"	f
delimitMate#QuoteDelim	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#QuoteDelim(char) "{{{$/;"	f
delimitMate#Set	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Set(...) "{{{$/;"	f
delimitMate#ShouldJump	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#ShouldJump(...) "{{{$/;"	f
delimitMate#SkipDelim	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#SkipDelim(char) "{{{$/;"	f
delimitMate#Test	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#Test() "{{{$/;"	f
delimitMate#WithinEmptyPair	plugged/delimitMate/autoload/delimitMate.vim	/^function! delimitMate#WithinEmptyPair() "{{{$/;"	f
delimitMate_version	plugged/delimitMate/plugin/delimitMate.vim	/^let delimitMate_version = "2.8"$/;"	v
delimiter	plugged/fzf/src/pattern.go	/^	delimiter     Delimiter$/;"	m	struct:fzf.Pattern	typeref:typename:Delimiter
delimiter	plugged/fzf/src/terminal.go	/^	delimiter    Delimiter$/;"	m	struct:fzf.Terminal	typeref:typename:Delimiter
delimiterRegexp	plugged/fzf/src/options.go	/^func delimiterRegexp(str string) Delimiter {$/;"	f	package:fzf	typeref:typename:Delimiter
deno_uri_to_uri	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function deno_uri_to_uri(uri)$/;"	f
denols	plugged/nvim-lspconfig/CONFIG.md	/^## denols$/;"	s	chapter:Configurations
denols_definition	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function denols_definition()$/;"	f
denols_handler	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function denols_handler(err, method, result)$/;"	f
denols_references	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function denols_references(context)$/;"	f
description	plugged/nvim-lspconfig/scripts/docgen.lua	/^                description = string.gsub(description, ".*function", "function")$/;"	f
deselectItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItem(item *Item) {$/;"	f	struct:fzf.Terminal
deselectItemChanged	plugged/fzf/src/terminal.go	/^func (t *Terminal) deselectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
deus	plugged/lightline.vim/colorscheme.md	/^### deus$/;"	S	chapter:Available Colorschemes
devPrefixes	plugged/fzf/src/tui/ttyname_unix.go	/^var devPrefixes = [...]string{"\/dev\/pts\/", "\/dev\/"}$/;"	v	package:tui
dhall_lsp_server	plugged/nvim-lspconfig/CONFIG.md	/^## dhall_lsp_server$/;"	s	chapter:Configurations
diagnosticls	plugged/nvim-lspconfig/CONFIG.md	/^## diagnosticls$/;"	s	chapter:Configurations
dirname	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^    dirname = function(path)$/;"	f
dirvish	plugged/vim-dirvish/plugin/dirvish.vim	/^augroup dirvish$/;"	a
dirvish#add_icon_fn	plugged/vim-dirvish/autoload/dirvish.vim	/^function! dirvish#add_icon_fn(fn) abort$/;"	f
dirvish#open	plugged/vim-dirvish/autoload/dirvish.vim	/^function! dirvish#open(...) range abort$/;"	f
dirvish#remove_icon_fn	plugged/vim-dirvish/autoload/dirvish.vim	/^function! dirvish#remove_icon_fn(fn_id) abort$/;"	f
dirvish#shdo	plugged/vim-dirvish/autoload/dirvish.vim	/^function! dirvish#shdo(paths, cmd) abort$/;"	f
dirvish.vim :zap:	plugged/vim-dirvish/README.md	/^dirvish.vim :zap:$/;"	c
dirvish_buflocal	plugged/vim-dirvish/autoload/dirvish.vim	/^  augroup dirvish_buflocal$/;"	a
dirvish_shcmd	plugged/vim-dirvish/autoload/dirvish.vim	/^  augroup dirvish_shcmd$/;"	a
displayWidth	plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidth(runes []rune) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
displayWidth	plugged/fzf/src/tui/light.go	/^	displayWidth int$/;"	m	struct:tui.wrappedLine	typeref:typename:int
displayWidthWithLimit	plugged/fzf/src/terminal.go	/^func (t *Terminal) displayWidthWithLimit(runes []rune, prefixWidth int, limit int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
dist	plugged/delimitMate/Makefile	/^dist: version all$/;"	t
dist	plugged/supertab/Makefile	/^dist:$/;"	t
distclean	plugged/delimitMate/Makefile	/^distclean: clean$/;"	t
docker	plugged/fzf/Makefile	/^docker:$/;"	t
docker-test	plugged/fzf/Makefile	/^docker-test:$/;"	t
docker_run	plugged/rust.vim/test/run-tests	/^def docker_run(cmd, interactive=False, ok_fail=False):$/;"	f
dockerls	plugged/nvim-lspconfig/CONFIG.md	/^## dockerls$/;"	s	chapter:Configurations
docs.generate	plugged/nvim-lspconfig/scripts/vimdocgen.lua	/^docs.generate = function()$/;"	f
dotls	plugged/nvim-lspconfig/CONFIG.md	/^## dotls$/;"	s	chapter:Configurations
doubleClickDuration	plugged/fzf/src/tui/tui.go	/^	doubleClickDuration = 500 * time.Millisecond$/;"	c	package:tui
download	plugged/fzf/install	/^download() {$/;"	f
download	plugged/fzf/install.ps1	/^function download {$/;"	f
drawBorder	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorder() {$/;"	f	struct:tui.LightWindow
drawBorder	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) drawBorder() {$/;"	f	struct:tui.TcellWindow
drawBorderAround	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderAround() {$/;"	f	struct:tui.LightWindow
drawBorderHorizontal	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderHorizontal(top, bottom bool) {$/;"	f	struct:tui.LightWindow
drawBorderVertical	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) drawBorderVertical(left, right bool) {$/;"	f	struct:tui.LightWindow
ds	plugged/vim-surround/plugin/surround.vim	/^  nmap ds  <Plug>Dsurround$/;"	m
dupeTheme	plugged/fzf/src/options.go	/^func dupeTheme(theme *tui.ColorTheme) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
eachLine	plugged/fzf/src/terminal.go	/^type eachLine struct {$/;"	s	package:fzf
efm	plugged/nvim-lspconfig/CONFIG.md	/^## efm$/;"	s	chapter:Configurations
elixirls	plugged/nvim-lspconfig/CONFIG.md	/^## elixirls$/;"	s	chapter:Configurations
ellipsis	plugged/fzf/src/terminal.go	/^const ellipsis string = ".."$/;"	c	package:fzf	typeref:typename:string
elm_ls#GetOptions	plugged/ale/ale_linters/elm/elm_ls.vim	/^function! elm_ls#GetOptions(buffer) abort$/;"	f
elm_ls#GetRootDir	plugged/ale/ale_linters/elm/elm_ls.vim	/^function! elm_ls#GetRootDir(buffer) abort$/;"	f
elmls	plugged/nvim-lspconfig/CONFIG.md	/^## elmls$/;"	s	chapter:Configurations
empty	plugged/delimitMate/Makefile	/^empty    :=$/;"	m
emptyLine	plugged/fzf/src/terminal.go	/^var emptyLine = itemLine{}$/;"	v	package:fzf
enabled	plugged/fzf/src/terminal.go	/^	enabled    bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
end	plugged/fzf/src/tokenizer.go	/^	end   int$/;"	m	struct:fzf.Range	typeref:typename:int
enum,enumeration names	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?enum[ \\t]+([a-zA-Z0-9_]+)\/\\2\/g,enum,enumeration names\/$/;"	k	langdef:Rust
envlist	plugged/ale/test/test-files/python/namespace_package_tox/tox.ini	/^envlist =$/;"	k	section:tox
equals	plugged/fzf/src/ansi.go	/^func (s *ansiState) equals(t *ansiState) bool {$/;"	f	struct:fzf.ansiState	typeref:typename:bool
erlangls	plugged/nvim-lspconfig/CONFIG.md	/^## erlangls$/;"	s	chapter:Configurations
err	plugged/fzf/src/terminal.go	/^	err  error$/;"	m	struct:fzf.eachLine	typeref:typename:error
errorExit	plugged/fzf/src/options.go	/^func errorExit(msg string) {$/;"	f	package:fzf
errorExit	plugged/fzf/src/tui/tui.go	/^func errorExit(message string) {$/;"	f	package:tui
escDelay	plugged/fzf/src/tui/light.go	/^	escDelay      int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
escPollInterval	plugged/fzf/src/tui/light.go	/^	escPollInterval = 5$/;"	c	package:tui
escSequence	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) escSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
escapedColon	plugged/fzf/src/options.go	/^	escapedColon = 0$/;"	c	package:fzf
escapedComma	plugged/fzf/src/options.go	/^	escapedComma = 1$/;"	c	package:fzf
escapedPlus	plugged/fzf/src/options.go	/^	escapedPlus  = 2$/;"	c	package:fzf
evaluate	plugged/delimitMate/test/expand_cr.vim	/^let evaluate = 0$/;"	v
evaluate	plugged/delimitMate/test/expand_space.vim	/^let evaluate = 0$/;"	v
evaluateScrollOffset	plugged/fzf/src/terminal.go	/^func (t *Terminal) evaluateScrollOffset(list []*Item, height int) int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
event	plugged/fzf/src/reader.go	/^	event    int32$/;"	m	struct:fzf.Reader	typeref:typename:int32
eventBox	plugged/fzf/src/matcher.go	/^	eventBox       *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
eventBox	plugged/fzf/src/reader.go	/^	eventBox *util.EventBox$/;"	m	struct:fzf.Reader	typeref:typename:*util.EventBox
eventBox	plugged/fzf/src/terminal.go	/^	eventBox     *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
events	plugged/fzf/src/util/eventbox.go	/^	events Events$/;"	m	struct:util.EventBox	typeref:typename:Events
exact_match	plugged/completion-nvim/lua/completion/matching.lua	/^local function exact_match(prefix, word)$/;"	f
excape_markdown_punctuations	plugged/nvim-lspconfig/scripts/docgen.lua	/^                        local function excape_markdown_punctuations(str)$/;"	f
exec	plugged/fzf/src/reader.go	/^	exec     *exec.Cmd$/;"	m	struct:fzf.Reader	typeref:typename:*exec.Cmd
executeCommand	plugged/fzf/src/terminal.go	/^func (t *Terminal) executeCommand(template string, forcePlus bool, background bool) {$/;"	f	struct:fzf.Terminal
executeRegexp	plugged/fzf/src/options.go	/^var executeRegexp *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
executing	plugged/fzf/src/terminal.go	/^	executing    *util.AtomicBool$/;"	m	struct:fzf.Terminal	typeref:typename:*util.AtomicBool
existing_stab	plugged/supertab/plugin/supertab.vim	/^      let existing_stab = maparg('<s-tab>', 'i', 0, 1)$/;"	v
existing_tab	plugged/supertab/plugin/supertab.vim	/^    let existing_tab = maparg('<tab>', 'i')$/;"	v
exists	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function exists(filename)$/;"	f
exitCancel	plugged/fzf/src/constants.go	/^	exitCancel    = -1$/;"	c	package:fzf
exitError	plugged/fzf/src/constants.go	/^	exitError     = 2$/;"	c	package:fzf
exitInterrupt	plugged/fzf/src/constants.go	/^	exitInterrupt = 130$/;"	c	package:fzf
exitNoMatch	plugged/fzf/src/constants.go	/^	exitNoMatch   = 1$/;"	c	package:fzf
exitOk	plugged/fzf/src/constants.go	/^	exitOk        = 0$/;"	c	package:fzf
expect	plugged/delimitMate/test/expand_cr.vim	/^    let expect = 0$/;"	v
expect	plugged/delimitMate/test/expand_cr.vim	/^    let expect = 1$/;"	v
expect	plugged/delimitMate/test/expand_cr.vim	/^let expect = 0$/;"	v
expect	plugged/delimitMate/test/expand_space.vim	/^    let expect = 0$/;"	v
expect	plugged/delimitMate/test/expand_space.vim	/^    let expect = 1$/;"	v
expect	plugged/delimitMate/test/expand_space.vim	/^let expect = 0$/;"	v
expect	plugged/fzf/src/terminal.go	/^	expect       map[tui.Event]string$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event]string
expected	plugged/delimitMate/test/expand_cr.vim	/^    let expected = []$/;"	v
expected	plugged/delimitMate/test/expand_space.vim	/^    let expected = []$/;"	v
expr_map	plugged/supertab/plugin/supertab.vim	/^      let expr_map = has_key(map_dict, 'expr') && map_dict.expr$/;"	v
expr_map	plugged/supertab/plugin/supertab.vim	/^      let expr_map = maparg('<cr>', 'i') =~? '\\<cr>'$/;"	v
expr_map	plugged/supertab/plugin/supertab.vim	/^    let expr_map = 0$/;"	v
extended	plugged/fzf/src/pattern.go	/^	extended      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
extendedMatch	plugged/fzf/src/pattern.go	/^func (p *Pattern) extendedMatch(item *Item, withPos bool, slab *util.Slab) ([]Offset, int, *[]in/;"	f	struct:fzf.Pattern	typeref:typename:([]Offset, int, *[]int)
extractColor	plugged/fzf/src/ansi.go	/^func extractColor(str string, state *ansiState, proc func(string, *ansiState) bool) (string, *[]/;"	f	package:fzf	typeref:typename:(string, *[]ansiOffset, *ansiState)
fail	plugged/fzf/bin/fzf-tmux	/^fail() {$/;"	f
failed	plugged/fzf/src/terminal.go	/^	failed       *string$/;"	m	struct:fzf.Terminal	typeref:typename:*string
fancy_floating_markdown	plugged/completion-nvim/lua/completion/hover.lua	/^local fancy_floating_markdown = function(contents, opts)$/;"	f
fd	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) fd() int {$/;"	f	unknown:tui.LightRenderer	typeref:typename:int
feed	plugged/fzf/src/reader.go	/^func (r *Reader) feed(src io.Reader) {$/;"	f	struct:fzf.Reader
fg	plugged/fzf/src/ansi.go	/^	fg   tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
fg	plugged/fzf/src/tui/light.go	/^	fg       Color$/;"	m	struct:tui.LightWindow	typeref:typename:Color
fg	plugged/fzf/src/tui/tui.go	/^	fg   Color$/;"	m	struct:tui.ColorPair	typeref:typename:Color
file	plugged/fzf/src/terminal.go	/^	file          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
fill	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) fill(str string, onMove func()) FillReturn {$/;"	f	struct:tui.LightWindow	typeref:typename:FillReturn
fill	plugged/fzf/src/tui/tcell.go	/^func fill(x, y, w, h int, n ColorPair, r rune) {$/;"	f	package:tui
fillString	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) fillString(text string, pair ColorPair) FillReturn {$/;"	f	struct:tui.TcellWindow	typeref:typename:FillReturn
filled	plugged/fzf/src/terminal.go	/^	filled   bool$/;"	m	struct:fzf.previewed	typeref:typename:bool
filter-vader-output	plugged/ale/test/script/run-vader-tests	/^function filter-vader-output() {$/;"	f
fin	plugged/fzf/src/reader.go	/^func (r *Reader) fin(success bool) {$/;"	f	struct:fzf.Reader
finChan	plugged/fzf/src/reader.go	/^	finChan  chan bool$/;"	m	struct:fzf.Reader	typeref:typename:chan bool
final	plugged/fzf/src/matcher.go	/^	final      bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
final	plugged/fzf/src/merger.go	/^	final   bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
final	plugged/fzf/src/terminal.go	/^	final      bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
findFirstMatch	plugged/fzf/src/terminal.go	/^func findFirstMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findLastMatch	plugged/fzf/src/terminal.go	/^func findLastMatch(pattern string, str string) int {$/;"	f	package:fzf	typeref:typename:int
findOffset	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
findOffset	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) findOffset() (row int, col int) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(row int, col int)
find_dart_sdk_root_path	plugged/nvim-lspconfig/lua/lspconfig/dartls.lua	/^local find_dart_sdk_root_path = function()$/;"	f
find_window_by_var	plugged/completion-nvim/lua/completion/hover.lua	/^local function find_window_by_var(name, value)$/;"	f
firstKey	plugged/fzf/src/options.go	/^func firstKey(keymap map[tui.Event]string) tui.Event {$/;"	f	package:fzf	typeref:typename:tui.Event
fish	plugged/fzf/test/test_go.rb	/^    def fish$/;"	S	class:Shell
fix_zero_version	plugged/nvim-lspconfig/lua/lspconfig/jdtls.lua	/^local function fix_zero_version(workspace_edit)$/;"	f
flow	plugged/nvim-lspconfig/CONFIG.md	/^## flow$/;"	s	chapter:Configurations
flush	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) flush() {$/;"	f	unknown:tui.LightRenderer
focus	plugged/fzf/test/test_go.rb	/^  def focus$/;"	f	class:Tmux
follow	plugged/fzf/src/options.go	/^	follow      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
following	plugged/fzf/src/terminal.go	/^	following  bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
forceBlack	plugged/fzf/src/tui/light.go	/^	forceBlack    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
forceBlack	plugged/fzf/src/tui/tui.go	/^	forceBlack   bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
fortls	plugged/nvim-lspconfig/CONFIG.md	/^## fortls$/;"	s	chapter:Configurations
forward	plugged/fzf/src/pattern.go	/^	forward       bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fsautocomplete	plugged/nvim-lspconfig/CONFIG.md	/^## fsautocomplete$/;"	s	chapter:Configurations
fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^augroup fugitive$/;"	a
fugitive#Autowrite	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Autowrite() abort$/;"	f
fugitive#BlameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameComplete(A, L, P) abort$/;"	f
fugitive#BlameFileType	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameFileType() abort$/;"	f
fugitive#BlameSyntax	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BlameSyntax() abort$/;"	f
fugitive#BrowseCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BrowseCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#BufReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadCmd(...) abort$/;"	f
fugitive#BufReadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufReadStatus() abort$/;"	f
fugitive#BufWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#BufWriteCmd(...) abort$/;"	f
fugitive#CanDiffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CanDiffoff(buf) abort$/;"	f
fugitive#Cd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cd(path, ...) abort$/;"	f
fugitive#CdComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CdComplete(A, L, P) abort$/;"	f
fugitive#Cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cfile() abort$/;"	f
fugitive#Command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Command(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#CommitComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommitComplete(A, L, P, ...) abort$/;"	f
fugitive#CommonDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CommonDir(dir) abort$/;"	f
fugitive#Complete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Complete(lead, ...) abort$/;"	f
fugitive#CompleteForWorkingDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteForWorkingDir(A, L, P, ...) abort$/;"	f
fugitive#CompleteObject	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompleteObject(base, ...) abort$/;"	f
fugitive#CompletePath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#CompletePath(base, ...) abort$/;"	f
fugitive#Config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Config(...) abort$/;"	f
fugitive#Cwindow	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Cwindow() abort$/;"	f
fugitive#DeleteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DeleteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#DiffClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#DiffClose() abort$/;"	f
fugitive#Diffsplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Diffsplit(autodir, keepfocus, mods, arg, args) abort$/;"	f
fugitive#EditComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EditComplete(A, L, P) abort$/;"	f
fugitive#EfmDir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#EfmDir(...) abort$/;"	f
fugitive#Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Expand(object) abort$/;"	f
fugitive#FetchComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FetchComplete(A, L, P, ...) abort$/;"	f
fugitive#FileReadCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileReadCmd(...) abort$/;"	f
fugitive#FileWriteCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#FileWriteCmd(...) abort$/;"	f
fugitive#Find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Find(object, ...) abort$/;"	f
fugitive#Foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Foldtext() abort$/;"	f
fugitive#GX	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GX() abort$/;"	f
fugitive#GitVersion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GitVersion(...) abort$/;"	f
fugitive#GrepCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepCommand(line1, line2, range, bang, mods, arg) abort$/;"	f
fugitive#GrepComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#GrepComplete(A, L, P) abort$/;"	f
fugitive#Head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Head(...) abort$/;"	f
fugitive#Init	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Init() abort$/;"	f
fugitive#LogCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogCommand(line1, count, range, bang, mods, args, type) abort$/;"	f
fugitive#LogComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#LogComplete(A, L, P) abort$/;"	f
fugitive#MapCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapCfile(...) abort$/;"	f
fugitive#MapJumps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MapJumps(...) abort$/;"	f
fugitive#MergeComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MergeComplete(A, L, P, ...) abort$/;"	f
fugitive#MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MessageCfile() abort$/;"	f
fugitive#MoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#MoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#Object	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Object(...) abort$/;"	f
fugitive#Open	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Open(cmd, bang, mods, arg, args) abort$/;"	f
fugitive#PagerFor	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PagerFor(argv, ...) abort$/;"	f
fugitive#Path	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Path(url, ...) abort$/;"	f
fugitive#PathComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PathComplete(...) abort$/;"	f
fugitive#Prepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Prepare(...) abort$/;"	f
fugitive#PrepareDirEnvGitArgv	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PrepareDirEnvGitArgv(...) abort$/;"	f
fugitive#PullComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PullComplete(A, L, P, ...) abort$/;"	f
fugitive#PushComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#PushComplete(A, L, P, ...) abort$/;"	f
fugitive#ReadCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadCommand(line1, count, range, bang, mods, arg, args) abort$/;"	f
fugitive#ReadComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReadComplete(A, L, P) abort$/;"	f
fugitive#Real	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Real(url) abort$/;"	f
fugitive#RebaseComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RebaseComplete(A, L, P, ...) abort$/;"	f
fugitive#ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ReloadStatus(...) abort$/;"	f
fugitive#RemoteUrl	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoteUrl(...) abort$/;"	f
fugitive#RemoveCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RemoveCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#RenameComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RenameComplete(A,L,P) abort$/;"	f
fugitive#ResolveRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#ResolveRemote(remote) abort$/;"	f
fugitive#Result	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Result(...) abort$/;"	f
fugitive#Resume	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Resume() abort$/;"	f
fugitive#RevParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevParse(rev, ...) abort$/;"	f
fugitive#RevertComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#RevertComplete(A, L, P, ...) abort$/;"	f
fugitive#SourceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SourceCmd(...) abort$/;"	f
fugitive#SshHostAlias	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#SshHostAlias(...) abort$/;"	f
fugitive#StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#StatusCfile() abort$/;"	f
fugitive#Statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#Statusline(...) abort$/;"	f
fugitive#WqCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WqCommand(...) abort$/;"	f
fugitive#WriteCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#WriteCommand(line1, line2, range, bang, mods, arg, args) abort$/;"	f
fugitive#buffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#delete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#delete(url, ...) abort$/;"	f
fugitive#detect	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#detect(path) abort$/;"	f
fugitive#extract_git_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#extract_git_dir(path) abort$/;"	f
fugitive#filereadable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filereadable(url) abort$/;"	f
fugitive#filewritable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#filewritable(url) abort$/;"	f
fugitive#foldtext	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#foldtext() abort$/;"	f
fugitive#getfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfperm(url) abort$/;"	f
fugitive#getfsize	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getfsize(url) abort$/;"	f
fugitive#getftime	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftime(url) abort$/;"	f
fugitive#getftype	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#getftype(url) abort$/;"	f
fugitive#glob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#glob(url, ...) abort$/;"	f
fugitive#head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#head(...) abort$/;"	f
fugitive#is_git_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#is_git_dir(path) abort$/;"	f
fugitive#isdirectory	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#isdirectory(url) abort$/;"	f
fugitive#readfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#readfile(url, ...) abort$/;"	f
fugitive#repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#repo(...) abort$/;"	f
fugitive#resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#resolve(url) abort$/;"	f
fugitive#setfperm	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#setfperm(url, perm) abort$/;"	f
fugitive#simplify	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#simplify(url) abort$/;"	f
fugitive#statusline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#statusline(...) abort$/;"	f
fugitive#writefile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! fugitive#writefile(lines, url, ...) abort$/;"	f
fugitive.vim	plugged/vim-fugitive/README.markdown	/^# fugitive.vim$/;"	c
fugitive_blame	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_diff	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_job	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_job$/;"	a
fugitive_status	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_status$/;"	a
fugitive_temp	plugged/vim-fugitive/autoload/fugitive.vim	/^augroup fugitive_temp$/;"	a
fullscreen	plugged/fzf/src/terminal.go	/^	fullscreen   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
fullscreen	plugged/fzf/src/tui/light.go	/^	fullscreen    bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
functions,function definitions	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(#\\[[^\\]]\\][ \\t]*)*(pub[ \\t]+)?(extern[ \\t]+)?("[^"]+"[ \\t]+)?(uns/;"	k	langdef:Rust
fuzzy	plugged/fzf/src/pattern.go	/^	fuzzy         bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
fuzzyAlgo	plugged/fzf/src/pattern.go	/^	fuzzyAlgo     algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:algo.Algo
fuzzy_match	plugged/completion-nvim/lua/completion/matching.lua	/^local function fuzzy_match(prefix, word)$/;"	f
fzf	plugged/fzf/man/man1/fzf.1	/^.TH fzf 1 "Jun 2021" "fzf 0.27.2" "fzf - a command-line fuzzy finder"$/;"	t
fzf	plugged/fzf/src/ansi.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/ansi_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/cache.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/cache_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/chunklist.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/chunklist_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/constants.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/core.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/history.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/history_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/item.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/item_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/matcher.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/merger.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/merger_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/options_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/pattern.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/pattern_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/reader.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/reader_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_others.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/result_x86.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_unix.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/terminal_windows.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tokenizer.go	/^package fzf$/;"	p
fzf	plugged/fzf/src/tokenizer_test.go	/^package fzf$/;"	p
fzf	plugged/fzf/test/test_go.rb	/^  def fzf(*opts)$/;"	f	class:TestBase
fzf :heart: vim	plugged/fzf.vim/README.md	/^fzf :heart: vim$/;"	c
fzf inside terminal buffer	plugged/fzf/README-VIM.md	/^### fzf inside terminal buffer$/;"	S	section:FZF Vim integration""Tips
fzf!	plugged/fzf/test/test_go.rb	/^  def fzf!(*opts)$/;"	f	class:TestBase
fzf#complete	plugged/fzf.vim/plugin/fzf.vim	/^function! fzf#complete(...)$/;"	f
fzf#exec	plugged/fzf/plugin/fzf.vim	/^function! fzf#exec(...)$/;"	f
fzf#install	plugged/fzf/plugin/fzf.vim	/^function! fzf#install()$/;"	f
fzf#run	plugged/fzf/plugin/fzf.vim	/^function! fzf#run(...) abort$/;"	f
fzf#shellescape	plugged/fzf/plugin/fzf.vim	/^function! fzf#shellescape(arg, ...)$/;"	f
fzf#vim#_buflisted_sorted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_buflisted_sorted()$/;"	f
fzf#vim#_format_buffer	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_format_buffer(b)$/;"	f
fzf#vim#_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_lines(all)$/;"	f
fzf#vim#_recent_files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_recent_files()$/;"	f
fzf#vim#_uniq	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#_uniq(list)$/;"	f
fzf#vim#ag	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag(query, ...)$/;"	f
fzf#vim#ag_raw	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#ag_raw(command_suffix, ...)$/;"	f
fzf#vim#buffer_commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_commits(...) range$/;"	f
fzf#vim#buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_lines(...)$/;"	f
fzf#vim#buffer_tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffer_tags(query, ...)$/;"	f
fzf#vim#buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#buffers(...)$/;"	f
fzf#vim#colors	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#colors(...)$/;"	f
fzf#vim#command_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#command_history(...)$/;"	f
fzf#vim#commands	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commands(...)$/;"	f
fzf#vim#commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#commits(...) range$/;"	f
fzf#vim#complete	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#complete(...)$/;"	f
fzf#vim#complete#buffer_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#buffer_line(...)$/;"	f
fzf#vim#complete#line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#line(...)$/;"	f
fzf#vim#complete#path	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#path(command, ...)$/;"	f
fzf#vim#complete#word	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! fzf#vim#complete#word(...)$/;"	f
fzf#vim#files	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#files(dir, ...)$/;"	f
fzf#vim#filetypes	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#filetypes(...)$/;"	f
fzf#vim#gitfiles	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#gitfiles(args, ...)$/;"	f
fzf#vim#grep	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#grep(grep_command, has_column, ...)$/;"	f
fzf#vim#helptags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#helptags(...)$/;"	f
fzf#vim#history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#history(...)$/;"	f
fzf#vim#lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#lines(...)$/;"	f
fzf#vim#locate	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#locate(query, ...)$/;"	f
fzf#vim#maps	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#maps(mode, ...)$/;"	f
fzf#vim#marks	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#marks(...)$/;"	f
fzf#vim#search_history	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#search_history(...)$/;"	f
fzf#vim#snippets	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#snippets(...)$/;"	f
fzf#vim#tags	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#tags(query, ...)$/;"	f
fzf#vim#windows	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#windows(...)$/;"	f
fzf#vim#with_preview	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! fzf#vim#with_preview(...)$/;"	f
fzf#wrap	plugged/fzf/plugin/fzf.vim	/^function! fzf#wrap(...)$/;"	f
fzf-cd-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-cd-widget() {$/;"	f
fzf-completion	plugged/fzf/shell/completion.zsh	/^fzf-completion() {$/;"	f
fzf-file-widget	plugged/fzf/shell/key-bindings.bash	/^fzf-file-widget() {$/;"	f
fzf-file-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-file-widget() {$/;"	f
fzf-history-widget	plugged/fzf/shell/key-bindings.zsh	/^fzf-history-widget() {$/;"	f
fzf-tmux	plugged/fzf/man/man1/fzf-tmux.1	/^.TH fzf-tmux 1 "Jun 2021" "fzf 0.27.2" "fzf-tmux - open fzf in tmux split pane"$/;"	t
fzf.on_exit	plugged/fzf/plugin/fzf.vim	/^      function! fzf.on_exit(job_id, exit_status, event) dict$/;"	f
fzf.on_exit	plugged/fzf/plugin/fzf.vim	/^  function! fzf.on_exit(id, code, ...)$/;"	f
fzf.switch_back	plugged/fzf/plugin/fzf.vim	/^  function! fzf.switch_back(inplace)$/;"	f
fzf_base	plugged/fzf/install.ps1	/^$fzf_base=Split-Path -Parent $MyInvocation.MyCommand.Definition$/;"	v
fzf_buffers	plugged/fzf.vim/plugin/fzf.vim	/^augroup fzf_buffers$/;"	a
fzf_popd	plugged/fzf/plugin/fzf.vim	/^augroup fzf_popd$/;"	a
fzf_swap	plugged/fzf/plugin/fzf.vim	/^    augroup fzf_swap$/;"	a
g#	plugged/vim-slash/plugin/slash.vim	/^map  <expr> g#   <sid>wrap(<sid>immobile('g#'))$/;"	m
g*	plugged/vim-slash/plugin/slash.vim	/^map  <expr> g*   <sid>wrap(<sid>immobile('g*'))$/;"	m
g:	plugged/ale/autoload/ale.vim	/^        let g:[l:full_name] = a:default$/;"	v
g:	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:[newname] = g:[key]$/;"	v
g:LanguageClient_diagnosticsDisplay	init.vim	/^    let g:LanguageClient_diagnosticsDisplay = {$/;"	v
g:LanguageClient_hideVirtualTextsOnInsert	init.vim	/^    let g:LanguageClient_hideVirtualTextsOnInsert = 1$/;"	v
g:LanguageClient_serverCommands	init.vim	/^    let g:LanguageClient_serverCommands = {$/;"	v
g:SuperTabClosePreviewOnPopupClose	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabClosePreviewOnPopupClose = 0$/;"	v
g:SuperTabCompleteCase	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabCompleteCase = 'inherit'$/;"	v
g:SuperTabCompletionContexts	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabCompletionContexts = ['s:ContextText']$/;"	v
g:SuperTabContextDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabContextDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabContextTextMemberPatterns	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabContextTextMemberPatterns = ['\\.', '>\\?::', '->']$/;"	v
g:SuperTabCrMapping	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabCrMapping	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabCrMapping = 0$/;"	v
g:SuperTabDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabDefaultCompletionType = "<c-p>"$/;"	v
g:SuperTabLongestEnhanced	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestEnhanced = 0$/;"	v
g:SuperTabLongestHighlight	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabLongestHighlight = 0$/;"	v
g:SuperTabMappingBackward	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingBackward = '<s-tab>'$/;"	v
g:SuperTabMappingForward	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingForward = '<tab>'$/;"	v
g:SuperTabMappingTabLiteral	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabMappingTabLiteral = '<c-tab>'$/;"	v
g:SuperTabNoCompleteAfter	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = ['^', '\\s']$/;"	v
g:SuperTabNoCompleteAfter	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteAfter = []$/;"	v
g:SuperTabNoCompleteBefore	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = ['\\k']$/;"	v
g:SuperTabNoCompleteBefore	plugged/supertab/plugin/supertab.vim	/^      let g:SuperTabNoCompleteBefore = []$/;"	v
g:SuperTabRetainCompletionDuration	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabRetainCompletionDuration = 'insert'$/;"	v
g:SuperTabUndoBreak	plugged/supertab/plugin/supertab.vim	/^    let g:SuperTabUndoBreak = 0$/;"	v
g:__ale_c_project_filenames	plugged/ale/autoload/ale/c.vim	/^let g:__ale_c_project_filenames = ['.git\/HEAD', 'configure', 'Makefile', 'CMakeLists.txt']$/;"	v
g:__fzf_command	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let g:__fzf_command = "normal ".prefix.item."\\<cr>"$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:__gutentags_vim_is_leaving = 1$/;"	v
g:__gutentags_vim_is_leaving	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:__gutentags_vim_is_leaving = 0$/;"	v
g:_fugitive_last_job	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:_fugitive_last_job = a:state$/;"	v
g:abolish_last_dict	plugged/vim-abolish/plugin/abolish.vim	/^  let g:abolish_last_dict = dict$/;"	v
g:abolish_save_file	plugged/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/.vim\/after\/plugin\/abolish.vim")$/;"	v
g:abolish_save_file	plugged/vim-abolish/plugin/abolish.vim	/^    let g:abolish_save_file = expand("~\/vimfiles\/after\/plugin\/abolish.vim")$/;"	v
g:ale#util#error_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#error_priority = 5$/;"	v
g:ale#util#info_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#info_priority = 3$/;"	v
g:ale#util#nul_file	plugged/ale/autoload/ale/util.vim	/^        let g:ale#util#nul_file = 'nul'$/;"	v
g:ale#util#nul_file	plugged/ale/autoload/ale/util.vim	/^    let g:ale#util#nul_file = '\/dev\/null'$/;"	v
g:ale#util#style_error_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#style_error_priority = 2$/;"	v
g:ale#util#style_warning_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#style_warning_priority = 1$/;"	v
g:ale#util#warning_priority	plugged/ale/autoload/ale/util.vim	/^let g:ale#util#warning_priority = 4$/;"	v
g:ale_buffer_info	plugged/ale/autoload/ale/engine.vim	/^        let g:ale_buffer_info[a:buffer] = {$/;"	v
g:ale_buffer_info	plugged/ale/autoload/ale/engine.vim	/^        let g:ale_buffer_info[a:buffer].loclist = l:loclist$/;"	v
g:ale_buffer_info	plugged/ale/autoload/ale/statusline.vim	/^    let g:ale_buffer_info[a:buffer].count = l:count$/;"	v
g:ale_buffer_info	plugged/ale/autoload/ale/statusline.vim	/^    let g:ale_buffer_info[a:buffer].first_problems = l:first_problems$/;"	v
g:ale_buffer_info	plugged/ale/plugin/ale.vim	/^let g:ale_buffer_info = {}$/;"	v
g:ale_c_build_dir_names	plugged/ale/autoload/ale/c.vim	/^let g:ale_c_build_dir_names = get(g:, 'ale_c_build_dir_names', [$/;"	v
g:ale_change_sign_column_color	plugged/ale/autoload/ale/sign.vim	/^let g:ale_change_sign_column_color = get(g:, 'ale_change_sign_column_color', 0)$/;"	v
g:ale_close_preview_on_insert	plugged/ale/plugin/ale.vim	/^let g:ale_close_preview_on_insert = get(g:, 'ale_close_preview_on_insert', 0)$/;"	v
g:ale_cmake_cmakelint_executable	plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_executable =$/;"	v
g:ale_cmake_cmakelint_options	plugged/ale/ale_linters/cmake/cmakelint.vim	/^let g:ale_cmake_cmakelint_options =$/;"	v
g:ale_command_wrapper	plugged/ale/autoload/ale/job.vim	/^let g:ale_command_wrapper = get(g:, 'ale_command_wrapper', '')$/;"	v
g:ale_completion_autoimport	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_autoimport = get(g:, 'ale_completion_autoimport', 0)$/;"	v
g:ale_completion_delay	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_delay = get(g:, 'ale_completion_delay', 100)$/;"	v
g:ale_completion_enabled	plugged/ale/autoload/ale/completion.vim	/^    let g:ale_completion_enabled = 0$/;"	v
g:ale_completion_enabled	plugged/ale/autoload/ale/completion.vim	/^    let g:ale_completion_enabled = 1$/;"	v
g:ale_completion_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_completion_enabled = get(g:, 'ale_completion_enabled', 0)$/;"	v
g:ale_completion_excluded_words	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_excluded_words = get(g:, 'ale_completion_excluded_words', [])$/;"	v
g:ale_completion_max_suggestions	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_max_suggestions = get(g:, 'ale_completion_max_suggestions', 50)$/;"	v
g:ale_completion_symbols	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_symbols = get(g:, 'ale_completion_symbols', {$/;"	v
g:ale_completion_tsserver_remove_warnings	plugged/ale/autoload/ale/completion.vim	/^let g:ale_completion_tsserver_remove_warnings = get(g:, 'ale_completion_tsserver_remove_warnings/;"	v
g:ale_create_dummy_temporary_file	plugged/ale/autoload/ale/assert.vim	/^    let g:ale_create_dummy_temporary_file = 1$/;"	v
g:ale_cs_mcs_options	plugged/ale/ale_linters/cs/mcs.vim	/^let g:ale_cs_mcs_options = get(g:, 'ale_cs_mcs_options', '')$/;"	v
g:ale_cursor_detail	plugged/ale/plugin/ale.vim	/^let g:ale_cursor_detail = get(g:, 'ale_cursor_detail', 0)$/;"	v
g:ale_default_navigation	plugged/ale/autoload/ale/definition.vim	/^let g:ale_default_navigation = get(g:, 'ale_default_navigation', 'buffer')$/;"	v
g:ale_default_navigation	plugged/ale/autoload/ale/references.vim	/^let g:ale_default_navigation = get(g:, 'ale_default_navigation', 'buffer')$/;"	v
g:ale_detail_to_floating_preview	plugged/ale/plugin/ale.vim	/^let g:ale_detail_to_floating_preview = get(g:, 'ale_detail_to_floating_preview', 0)$/;"	v
g:ale_disable_lsp	plugged/ale/autoload/ale.vim	/^let g:ale_disable_lsp = get(g:, 'ale_disable_lsp', 0)$/;"	v
g:ale_echo_cursor	plugged/ale/plugin/ale.vim	/^let g:ale_echo_cursor = get(g:, 'ale_echo_cursor', 1)$/;"	v
g:ale_echo_delay	plugged/ale/autoload/ale/cursor.vim	/^let g:ale_echo_delay = get(g:, 'ale_echo_delay', 10)$/;"	v
g:ale_echo_msg_error_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_error_str = get(g:, 'ale_echo_msg_error_str', 'Error')$/;"	v
g:ale_echo_msg_format	plugged/ale/autoload/ale/cursor.vim	/^let g:ale_echo_msg_format = get(g:, 'ale_echo_msg_format', '%code: %%s')$/;"	v
g:ale_echo_msg_info_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_info_str = get(g:, 'ale_echo_msg_info_str', 'Info')$/;"	v
g:ale_echo_msg_log_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_log_str = get(g:, 'ale_echo_msg_log_str', 'Log')$/;"	v
g:ale_echo_msg_warning_str	plugged/ale/autoload/ale.vim	/^let g:ale_echo_msg_warning_str = get(g:, 'ale_echo_msg_warning_str', 'Warning')$/;"	v
g:ale_enabled	plugged/ale/autoload/ale/toggle.vim	/^    let g:ale_enabled = !get(g:, 'ale_enabled')$/;"	v
g:ale_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_enabled = get(g:, 'ale_enabled', 1)$/;"	v
g:ale_erlang_dialyzer_executable	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_executable =$/;"	v
g:ale_erlang_dialyzer_options	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_options =$/;"	v
g:ale_erlang_dialyzer_plt_file	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_plt_file =$/;"	v
g:ale_erlang_dialyzer_rebar3_profile	plugged/ale/ale_linters/erlang/dialyzer.vim	/^let g:ale_erlang_dialyzer_rebar3_profile =$/;"	v
g:ale_erlang_erlc_executable	plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_executable = get(g:, 'ale_erlang_erlc_executable', 'erlc')$/;"	v
g:ale_erlang_erlc_options	plugged/ale/ale_linters/erlang/erlc.vim	/^let g:ale_erlang_erlc_options = get(g:, 'ale_erlang_erlc_options', '')$/;"	v
g:ale_exclude_highlights	plugged/ale/plugin/ale.vim	/^let g:ale_exclude_highlights = get(g:, 'ale_exclude_highlights', [])$/;"	v
g:ale_filename_mappings	plugged/ale/autoload/ale/engine.vim	/^let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})$/;"	v
g:ale_filename_mappings	plugged/ale/autoload/ale/fix.vim	/^let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})$/;"	v
g:ale_filename_mappings	plugged/ale/plugin/ale.vim	/^let g:ale_filename_mappings = get(g:, 'ale_filename_mappings', {})$/;"	v
g:ale_filetype_blacklist	plugged/ale/plugin/ale.vim	/^let g:ale_filetype_blacklist = [$/;"	v
g:ale_fix_buffer_data	plugged/ale/autoload/ale/fix.vim	/^        let g:ale_fix_buffer_data[a:buffer] = l:data$/;"	v
g:ale_fix_buffer_data	plugged/ale/autoload/ale/fix.vim	/^    let g:ale_fix_buffer_data[a:buffer] = {$/;"	v
g:ale_fix_buffer_data	plugged/ale/plugin/ale.vim	/^let g:ale_fix_buffer_data = {}$/;"	v
g:ale_fix_on_save	plugged/ale/plugin/ale.vim	/^let g:ale_fix_on_save = get(g:, 'ale_fix_on_save', 0)$/;"	v
g:ale_fix_on_save_ignore	plugged/ale/autoload/ale/fix.vim	/^let g:ale_fix_on_save_ignore = get(g:, 'ale_fix_on_save_ignore', {})$/;"	v
g:ale_fixers	plugged/ale/plugin/ale.vim	/^let g:ale_fixers = get(g:, 'ale_fixers', {})$/;"	v
g:ale_floating_preview	plugged/ale/plugin/ale.vim	/^let g:ale_floating_preview = get(g:, 'ale_floating_preview', 0)$/;"	v
g:ale_floating_window_border	plugged/ale/plugin/ale.vim	/^let g:ale_floating_window_border = get(g:, 'ale_floating_window_border', ['|', '-', '+', '+', '+/;"	v
g:ale_go_go111module	plugged/ale/plugin/ale.vim	/^let g:ale_go_go111module = get(g:, 'ale_go_go111module', '')$/;"	v
g:ale_history_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_history_enabled = get(g:, 'ale_history_enabled', 1)$/;"	v
g:ale_history_log_output	plugged/ale/plugin/ale.vim	/^let g:ale_history_log_output = get(g:, 'ale_history_log_output', 1)$/;"	v
g:ale_hover_cursor	plugged/ale/plugin/ale.vim	/^let g:ale_hover_cursor = get(g:, 'ale_hover_cursor', 1)$/;"	v
g:ale_hover_to_floating_preview	plugged/ale/plugin/ale.vim	/^let g:ale_hover_to_floating_preview = get(g:, 'ale_hover_to_floating_preview', 0)$/;"	v
g:ale_hover_to_preview	plugged/ale/plugin/ale.vim	/^let g:ale_hover_to_preview = get(g:, 'ale_hover_to_preview', 0)$/;"	v
g:ale_html_tidy_executable	plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_executable = get(g:, 'ale_html_tidy_executable', 'tidy')$/;"	v
g:ale_html_tidy_options	plugged/ale/ale_linters/html/tidy.vim	/^let g:ale_html_tidy_options = get(g:, 'ale_html_tidy_options', '-q -e -language en')$/;"	v
g:ale_ignore_2_4_warnings	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_ignore_2_4_warnings = 1$/;"	v
g:ale_ignore_2_4_warnings	plugged/ale/test/vimrc	/^let g:ale_ignore_2_4_warnings = 1$/;"	v
g:ale_java_pmd_options	plugged/ale/ale_linters/java/pmd.vim	/^    let g:ale_java_pmd_options = '-R category\/java\/bestpractices.xml'$/;"	v
g:ale_keep_list_window_open	plugged/ale/autoload/ale/list.vim	/^let g:ale_keep_list_window_open = get(g:, 'ale_keep_list_window_open', 0)$/;"	v
g:ale_kotlin_kotlinc_classpath	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_classpath = get(g:, 'ale_kotlin_kotlinc_classpath', '')$/;"	v
g:ale_kotlin_kotlinc_config_file	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_config_file = get(g:, 'ale_kotlin_kotlinc_config_file', '.ale_kotlinc_c/;"	v
g:ale_kotlin_kotlinc_enable_config	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_enable_config = get(g:, 'ale_kotlin_kotlinc_enable_config', 0)$/;"	v
g:ale_kotlin_kotlinc_module_filename	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_module_filename = get(g:, 'ale_kotlin_kotlinc_module_filename', 'module/;"	v
g:ale_kotlin_kotlinc_options	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_options = get(g:, 'ale_kotlin_kotlinc_options', '')$/;"	v
g:ale_kotlin_kotlinc_sourcepath	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_sourcepath = get(g:, 'ale_kotlin_kotlinc_sourcepath', '')$/;"	v
g:ale_kotlin_kotlinc_use_module_file	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let g:ale_kotlin_kotlinc_use_module_file = get(g:, 'ale_kotlin_kotlinc_use_module_file', 0)$/;"	v
g:ale_lint_delay	plugged/ale/plugin/ale.vim	/^let g:ale_lint_delay = get(g:, 'ale_lint_delay', 200)$/;"	v
g:ale_lint_on_enter	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_enter = get(g:, 'ale_lint_on_enter', 1)$/;"	v
g:ale_lint_on_filetype_changed	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_filetype_changed = get(g:, 'ale_lint_on_filetype_changed', 1)$/;"	v
g:ale_lint_on_insert_leave	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_insert_leave = get(g:, 'ale_lint_on_insert_leave', 1)$/;"	v
g:ale_lint_on_save	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_save = get(g:, 'ale_lint_on_save', 1)$/;"	v
g:ale_lint_on_text_changed	plugged/ale/plugin/ale.vim	/^let g:ale_lint_on_text_changed = get(g:, 'ale_lint_on_text_changed', 'normal')$/;"	v
g:ale_linter_aliases	plugged/ale/plugin/ale.vim	/^let g:ale_linter_aliases = get(g:, 'ale_linter_aliases', {})$/;"	v
g:ale_linters	init.vim	/^let g:ale_linters = {'rust': []}$/;"	v
g:ale_linters	plugged/ale/plugin/ale.vim	/^let g:ale_linters = get(g:, 'ale_linters', {})$/;"	v
g:ale_linters_explicit	plugged/ale/plugin/ale.vim	/^let g:ale_linters_explicit = get(g:, 'ale_linters_explicit', 0)$/;"	v
g:ale_linters_ignore	plugged/ale/autoload/ale.vim	/^let g:ale_linters_ignore = get(g:, 'ale_linters_ignore', {})$/;"	v
g:ale_list_vertical	plugged/ale/autoload/ale/list.vim	/^let g:ale_list_vertical = get(g:, 'ale_list_vertical', 0)$/;"	v
g:ale_list_window_size	plugged/ale/autoload/ale/list.vim	/^let g:ale_list_window_size = get(g:, 'ale_list_window_size', 10)$/;"	v
g:ale_loclist_msg_format	plugged/ale/autoload/ale/list.vim	/^let g:ale_loclist_msg_format = get(g:, 'ale_loclist_msg_format',$/;"	v
g:ale_lsp_error_messages	plugged/ale/autoload/ale/lsp_linter.vim	/^        let g:ale_lsp_error_messages[a:linter_name] = []$/;"	v
g:ale_lsp_error_messages	plugged/ale/autoload/ale/lsp_linter.vim	/^    let g:ale_lsp_error_messages = get(g:, 'ale_lsp_error_messages', {})$/;"	v
g:ale_lsp_next_message_id	plugged/ale/autoload/ale/lsp.vim	/^        let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_message_id	plugged/ale/autoload/ale/lsp.vim	/^    let g:ale_lsp_next_message_id += 1$/;"	v
g:ale_lsp_next_message_id	plugged/ale/autoload/ale/lsp.vim	/^let g:ale_lsp_next_message_id = 1$/;"	v
g:ale_lsp_next_version_id	plugged/ale/autoload/ale/lsp/message.vim	/^        let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lsp_next_version_id	plugged/ale/autoload/ale/lsp/message.vim	/^    let g:ale_lsp_next_version_id += 1$/;"	v
g:ale_lsp_next_version_id	plugged/ale/autoload/ale/lsp/message.vim	/^let g:ale_lsp_next_version_id = 1$/;"	v
g:ale_lsp_show_message_format	plugged/ale/autoload/ale.vim	/^let g:ale_lsp_show_message_format = get(g:, 'ale_lsp_show_message_format', '%severity%:%linter%:/;"	v
g:ale_lsp_show_message_severity	plugged/ale/autoload/ale.vim	/^let g:ale_lsp_show_message_severity = get(g:, 'ale_lsp_show_message_severity', 'error')$/;"	v
g:ale_lsp_suggestions	plugged/ale/plugin/ale.vim	/^let g:ale_lsp_suggestions = get(g:, 'ale_lsp_suggestions', 0)$/;"	v
g:ale_lsp_types	plugged/ale/autoload/ale/completion.vim	/^let g:ale_lsp_types = {$/;"	v
g:ale_max_buffer_history_size	plugged/ale/autoload/ale/history.vim	/^let g:ale_max_buffer_history_size = get(g:, 'ale_max_buffer_history_size', 20)$/;"	v
g:ale_max_signs	plugged/ale/autoload/ale/sign.vim	/^let g:ale_max_signs = get(g:, 'ale_max_signs', -1)$/;"	v
g:ale_objc_clang_options	plugged/ale/ale_linters/objc/clang.vim	/^    let g:ale_objc_clang_options = '-std=c11 -Wall'$/;"	v
g:ale_objcpp_clang_options	plugged/ale/ale_linters/objcpp/clang.vim	/^    let g:ale_objcpp_clang_options = '-std=c++14 -Wall'$/;"	v
g:ale_open_list	plugged/ale/autoload/ale/list.vim	/^let g:ale_open_list = get(g:, 'ale_open_list', 0)$/;"	v
g:ale_perl6_perl6_executable	plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_executable =$/;"	v
g:ale_perl6_perl6_options	plugged/ale/ale_linters/perl6/perl6.vim	/^let g:ale_perl6_perl6_options =$/;"	v
g:ale_php_phan_executable	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_executable = get(g:, 'ale_php_phan_executable', 'phan')$/;"	v
g:ale_php_phan_minimum_severity	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_minimum_severity = get(g:, 'ale_php_phan_minimum_severity', 0)$/;"	v
g:ale_php_phan_use_client	plugged/ale/ale_linters/php/phan.vim	/^let g:ale_php_phan_use_client = get(g:, 'ale_php_phan_use_client', 0)$/;"	v
g:ale_php_phpcs_standard	plugged/ale/ale_linters/php/phpcs.vim	/^let g:ale_php_phpcs_standard = get(g:, 'ale_php_phpcs_standard', '')$/;"	v
g:ale_php_phpmd_executable	plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_executable = get(g:, 'ale_php_phpmd_executable', 'phpmd')$/;"	v
g:ale_php_phpmd_ruleset	plugged/ale/ale_linters/php/phpmd.vim	/^let g:ale_php_phpmd_ruleset = get(g:, 'ale_php_phpmd_ruleset', 'cleancode,codesize,controversial/;"	v
g:ale_php_phpstan_autoload	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_autoload = get(g:, 'ale_php_phpstan_autoload', '')$/;"	v
g:ale_php_phpstan_configuration	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_configuration = get(g:, 'ale_php_phpstan_configuration', '')$/;"	v
g:ale_php_phpstan_executable	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_executable = get(g:, 'ale_php_phpstan_executable', 'phpstan')$/;"	v
g:ale_php_phpstan_level	plugged/ale/ale_linters/php/phpstan.vim	/^let g:ale_php_phpstan_level = get(g:, 'ale_php_phpstan_level', '')$/;"	v
g:ale_popup_menu_enabled	plugged/ale/plugin/ale.vim	/^let g:ale_popup_menu_enabled = get(g:, 'ale_popup_menu_enabled', has('gui_running'))$/;"	v
g:ale_puppet_puppetlint_executable	plugged/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_executable = 'puppet-lint'$/;"	v
g:ale_puppet_puppetlint_options	plugged/ale/autoload/ale/fixers/puppetlint.vim	/^    let g:ale_puppet_puppetlint_options = ''$/;"	v
g:ale_python_auto_pipenv	plugged/ale/plugin/ale.vim	/^let g:ale_python_auto_pipenv = get(g:, 'ale_python_auto_pipenv', 0)$/;"	v
g:ale_python_prospector_executable	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_executable =$/;"	v
g:ale_python_prospector_options	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_options =$/;"	v
g:ale_python_prospector_use_global	plugged/ale/ale_linters/python/prospector.vim	/^let g:ale_python_prospector_use_global = get(g:, 'ale_python_prospector_use_global', get(g:, 'al/;"	v
g:ale_r_lintr_lint_package	plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_lint_package = get(g:, 'ale_r_lintr_lint_package', 0)$/;"	v
g:ale_r_lintr_options	plugged/ale/ale_linters/r/lintr.vim	/^let g:ale_r_lintr_options = get(g:, 'ale_r_lintr_options', 'with_defaults()')$/;"	v
g:ale_rename_tsserver_find_in_comments	plugged/ale/autoload/ale/rename.vim	/^let g:ale_rename_tsserver_find_in_comments = get(g:, 'ale_rename_tsserver_find_in_comments')$/;"	v
g:ale_rename_tsserver_find_in_strings	plugged/ale/autoload/ale/rename.vim	/^let g:ale_rename_tsserver_find_in_strings = get(g:, 'ale_rename_tsserver_find_in_strings')$/;"	v
g:ale_root	plugged/ale/autoload/ale/assert.vim	/^    let g:ale_root = {}$/;"	v
g:ale_root	plugged/ale/plugin/ale.vim	/^let g:ale_root = get(g:, 'ale_root', {})$/;"	v
g:ale_run_synchronously	plugged/ale/autoload/ale/assert.vim	/^    let g:ale_run_synchronously = 1$/;"	v
g:ale_run_synchronously_callbacks	plugged/ale/autoload/ale/command.vim	/^            let g:ale_run_synchronously_callbacks = []$/;"	v
g:ale_run_synchronously_emulate_commands	plugged/ale/autoload/ale/assert.vim	/^    let g:ale_run_synchronously_emulate_commands = 1$/;"	v
g:ale_rust_ignore_error_codes	plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_error_codes = []$/;"	v
g:ale_rust_ignore_secondary_spans	plugged/ale/autoload/ale/handlers/rust.vim	/^    let g:ale_rust_ignore_secondary_spans = 0$/;"	v
g:ale_set_balloons	plugged/ale/plugin/ale.vim	/^let g:ale_set_balloons = get(g:, 'ale_set_balloons', has('balloon_eval') && has('gui_running'))$/;"	v
g:ale_set_highlights	plugged/ale/plugin/ale.vim	/^let g:ale_set_highlights = get(g:, 'ale_set_highlights', has('syntax'))$/;"	v
g:ale_set_lists_synchronously	plugged/ale/test/.config/nvim/init.vim	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_lists_synchronously	plugged/ale/test/vimrc	/^let g:ale_set_lists_synchronously = 1$/;"	v
g:ale_set_loclist	plugged/ale/plugin/ale.vim	/^let g:ale_set_loclist = get(g:, 'ale_set_loclist', 1)$/;"	v
g:ale_set_quickfix	plugged/ale/plugin/ale.vim	/^let g:ale_set_quickfix = get(g:, 'ale_set_quickfix', 0)$/;"	v
g:ale_set_signs	plugged/ale/plugin/ale.vim	/^let g:ale_set_signs = get(g:, 'ale_set_signs', has('signs'))$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^        let g:ale_sh_shell_default_shell = 'bash'$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = fnamemodify($SHELL, ':t')$/;"	v
g:ale_sh_shell_default_shell	plugged/ale/ale_linters/sh/shell.vim	/^    let g:ale_sh_shell_default_shell = g:ale_linters_sh_shell_default_shell$/;"	v
g:ale_sign_column_always	init.vim	/^let g:ale_sign_column_always = 1$/;"	v
g:ale_sign_column_always	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_column_always = get(g:, 'ale_sign_column_always', 0)$/;"	v
g:ale_sign_error	init.vim	/^let g:ale_sign_error = '●'$/;"	v
g:ale_sign_error	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_error = get(g:, 'ale_sign_error', '>>')$/;"	v
g:ale_sign_highlight_linenrs	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_highlight_linenrs = get(g:, 'ale_sign_highlight_linenrs', 0)$/;"	v
g:ale_sign_info	init.vim	/^let g:ale_sign_info = '𝒊'$/;"	v
g:ale_sign_info	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_info = get(g:, 'ale_sign_info', g:ale_sign_warning)$/;"	v
g:ale_sign_offset	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_offset = get(g:, 'ale_sign_offset', 1000000)$/;"	v
g:ale_sign_priority	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_priority = get(g:, 'ale_sign_priority', 30)$/;"	v
g:ale_sign_style_error	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_style_error = get(g:, 'ale_sign_style_error', g:ale_sign_error)$/;"	v
g:ale_sign_style_warning	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_style_warning = get(g:, 'ale_sign_style_warning', g:ale_sign_warning)$/;"	v
g:ale_sign_warning	init.vim	/^let g:ale_sign_warning = '○'$/;"	v
g:ale_sign_warning	plugged/ale/autoload/ale/sign.vim	/^let g:ale_sign_warning = get(g:, 'ale_sign_warning', '--')$/;"	v
g:ale_tex_chktex_executable	plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_executable =$/;"	v
g:ale_tex_chktex_options	plugged/ale/ale_linters/tex/chktex.vim	/^let g:ale_tex_chktex_options =$/;"	v
g:ale_tsserver_types	plugged/ale/autoload/ale/completion.vim	/^let g:ale_tsserver_types = {$/;"	v
g:ale_type_map	plugged/ale/autoload/ale/engine.vim	/^let g:ale_type_map = get(g:, 'ale_type_map', {})$/;"	v
g:ale_update_tagstack	plugged/ale/autoload/ale/definition.vim	/^let g:ale_update_tagstack = get(g:, 'ale_update_tagstack', 1)$/;"	v
g:ale_verilog_verilator_options	plugged/ale/ale_linters/verilog/verilator.vim	/^    let g:ale_verilog_verilator_options = ''$/;"	v
g:ale_virtualenv_dir_names	plugged/ale/autoload/ale/python.vim	/^let g:ale_virtualenv_dir_names = get(g:, 'ale_virtualenv_dir_names', [$/;"	v
g:ale_virtualtext_cursor	plugged/ale/plugin/ale.vim	/^let g:ale_virtualtext_cursor = get(g:, 'ale_virtualtext_cursor', 0)$/;"	v
g:ale_virtualtext_delay	plugged/ale/autoload/ale/virtualtext.vim	/^let g:ale_virtualtext_delay = get(g:, 'ale_virtualtext_delay', 10)$/;"	v
g:ale_want_results_buffer	plugged/ale/autoload/ale.vim	/^    let g:ale_want_results_buffer = a:buffer$/;"	v
g:ale_warn_about_trailing_blank_lines	plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_blank_lines = get(g:, 'ale_warn_about_trailing_blank_lines', 1)$/;"	v
g:ale_warn_about_trailing_whitespace	plugged/ale/plugin/ale.vim	/^let g:ale_warn_about_trailing_whitespace = get(g:, 'ale_warn_about_trailing_whitespace', 1)$/;"	v
g:ale_xml_xmllint_executable	plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_executable = get(g:, 'ale_xml_xmllint_executable', 'xmllint')$/;"	v
g:ale_xml_xmllint_options	plugged/ale/ale_linters/xml/xmllint.vim	/^let g:ale_xml_xmllint_options = get(g:, 'ale_xml_xmllint_options', '')$/;"	v
g:autoloaded_fugitive	plugged/vim-fugitive/autoload/fugitive.vim	/^let g:autoloaded_fugitive = 1$/;"	v
g:colors_name	colors/nofrils-dark.vim	/^let g:colors_name = "nofrils-dark"$/;"	v
g:completion_abbr_length	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_abbr_length = 0$/;"	v
g:completion_auto_change_source	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_auto_change_source = 0$/;"	v
g:completion_chain_complete_list	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_chain_complete_list = {$/;"	v
g:completion_confirm_key	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_confirm_key = "\\<CR>"$/;"	v
g:completion_confirm_key_rhs	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_confirm_key_rhs = ''$/;"	v
g:completion_customize_lsp_label	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_customize_lsp_label = {}$/;"	v
g:completion_disable_filetypes	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_disable_filetypes = []$/;"	v
g:completion_docked_hover	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_docked_hover = 0$/;"	v
g:completion_docked_maximum_size	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_docked_maximum_size = 20$/;"	v
g:completion_docked_minimum_size	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_docked_minimum_size = 5$/;"	v
g:completion_enable_auto_hover	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_auto_hover = 1$/;"	v
g:completion_enable_auto_paren	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_auto_paren = 0$/;"	v
g:completion_enable_auto_popup	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_auto_popup = 1$/;"	v
g:completion_enable_auto_signature	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_auto_signature = 1$/;"	v
g:completion_enable_focusable_hover	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_focusable_hover = 0$/;"	v
g:completion_enable_fuzzy_match	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_fuzzy_match = 0$/;"	v
g:completion_enable_server_trigger	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_server_trigger = 1$/;"	v
g:completion_enable_snippet	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_enable_snippet = v:null$/;"	v
g:completion_expand_characters	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_expand_characters = [' ', '\\t', '>', ';']$/;"	v
g:completion_items_duplicate	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_items_duplicate = {}$/;"	v
g:completion_items_priority	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_items_priority = {}$/;"	v
g:completion_matching_ignore_case	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_matching_ignore_case = &ignorecase$/;"	v
g:completion_matching_smart_case	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_matching_smart_case = &smartcase$/;"	v
g:completion_matching_strategy_list	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_matching_strategy_list = ['exact']$/;"	v
g:completion_menu_length	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_menu_length = 0$/;"	v
g:completion_sorting	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_sorting = 'alphabet'$/;"	v
g:completion_timer_cycle	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_timer_cycle = 80$/;"	v
g:completion_trigger_character	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_trigger_character = []$/;"	v
g:completion_trigger_keyword_length	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_trigger_keyword_length = 1$/;"	v
g:completion_trigger_on_delete	plugged/completion-nvim/plugin/completion.vim	/^    let g:completion_trigger_on_delete = 0$/;"	v
g:delimitMate_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_eol_marker	plugged/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_eol_marker = ';'$/;"	v
g:delimitMate_expand_cr	init.vim	/^let g:delimitMate_expand_cr=1$/;"	v
g:delimitMate_expand_cr	plugged/delimitMate/plugin/delimitMate.vim	/^    let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	plugged/delimitMate/test/expand_cr.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_cr	plugged/delimitMate/test/first_buffer_no_ft.vim	/^let g:delimitMate_expand_cr = 1$/;"	v
g:delimitMate_expand_space	plugged/delimitMate/plugin/delimitMate.vim	/^    let g:delimitMate_expand_space = 1$/;"	v
g:delimitMate_expand_space	plugged/delimitMate/test/expand_space.vim	/^let g:delimitMate_expand_space = 1$/;"	v
g:delimitMate_insert_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 0$/;"	v
g:delimitMate_insert_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 1$/;"	v
g:delimitMate_insert_eol_marker	plugged/delimitMate/test/eol_marker.vim	/^let g:delimitMate_insert_eol_marker = 2$/;"	v
g:delimitMate_matchpairs	init.vim	/^let g:delimitMate_matchpairs = '(:),[:],{:}'$/;"	v
g:delimitMate_matchpairs	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let g:delimitMate_matchpairs = '(:),{:},[:],<:>,¿:?,¡:!,,::'$/;"	v
g:delimitMate_quotes	init.vim	/^let g:delimitMate_quotes = ''$/;"	v
g:delimitMate_quotes	plugged/delimitMate/test/autoclose_quotes.vim	/^let g:delimitMate_quotes = '" '' ` « |'$/;"	v
g:delimitMate_smart_quotes	plugged/delimitMate/plugin/delimitMate.vim	/^      let g:delimitMate_smart_quotes = ''$/;"	v
g:deoplete#enable_at_startup	init.vim	/^    let g:deoplete#enable_at_startup = 1$/;"	v
g:dir	plugged/ale/autoload/ale/test.vim	/^    let g:dir = getcwd() " no-custom-checks$/;"	v
g:fugitive_event	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:fugitive_event = dir$/;"	v
g:fugitive_result	plugged/vim-fugitive/autoload/fugitive.vim	/^      let g:fugitive_result = a:dir$/;"	v
g:fugitive_summary_format	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:fzf#vim#buffers	plugged/fzf.vim/plugin/fzf.vim	/^  let g:fzf#vim#buffers = {}$/;"	v
g:gutentags_add_ctrlp_root_markers	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_ctrlp_root_markers = get(g:, 'gutentags_add_ctrlp_root_markers', 1)$/;"	v
g:gutentags_add_default_project_roots	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_add_default_project_roots = get(g:, 'gutentags_add_default_project_roots', 1)$/;"	v
g:gutentags_auto_add_cscope	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_auto_add_cscope = 1$/;"	v
g:gutentags_auto_add_gtags_cscope	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_auto_add_gtags_cscope = 1$/;"	v
g:gutentags_background_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_background_update = get(g:, 'gutentags_background_update', 1)$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = ''$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':p')$/;"	v
g:gutentags_cache_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_cache_dir = fnamemodify(g:gutentags_cache_dir, ':s?[\/\\\\]$??')$/;"	v
g:gutentags_cscope_build_inverted_index	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_build_inverted_index = 0$/;"	v
g:gutentags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_cscope_executable = 'cscope'$/;"	v
g:gutentags_ctags_auto_set_tags	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_auto_set_tags = get(g:, 'gutentags_ctags_auto_set_tags', 1)$/;"	v
g:gutentags_ctags_check_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_check_tagfile = get(g:, 'gutentags_ctags_check_tagfile', 0)$/;"	v
g:gutentags_ctags_exclude	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude = get(g:, 'gutentags_ctags_exclude', [])$/;"	v
g:gutentags_ctags_exclude_wildignore	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_exclude_wildignore = get(g:, 'gutentags_ctags_exclude_wildignore', 1)$/;"	v
g:gutentags_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_executable = get(g:, 'gutentags_ctags_executable', 'ctags')$/;"	v
g:gutentags_ctags_extra_args	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_extra_args = get(g:, 'gutentags_ctags_extra_args', [])$/;"	v
g:gutentags_ctags_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_options_file = get(g:, 'gutentags_ctags_options_file', '.gutctags')$/;"	v
g:gutentags_ctags_post_process_cmd	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_post_process_cmd = get(g:, 'gutentags_ctags_post_process_cmd', '')$/;"	v
g:gutentags_ctags_tagfile	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let g:gutentags_ctags_tagfile = get(g:, 'gutentags_ctags_tagfile', 'tags')$/;"	v
g:gutentags_debug	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_debug = get(g:, 'gutentags_debug', 0)$/;"	v
g:gutentags_define_advanced_commands	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_define_advanced_commands = get(g:, 'gutentags_define_advanced_commands', 0)$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^            let g:gutentags_enabled = 0$/;"	v
g:gutentags_enabled	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_enabled = get(g:, 'gutentags_enabled', 1)$/;"	v
g:gutentags_exclude_filetypes	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_filetypes = get(g:, 'gutentags_exclude_filetypes', [])$/;"	v
g:gutentags_exclude_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_exclude_project_root = get(g:, 'gutentags_exclude_project_root', ['\/usr\/local'/;"	v
g:gutentags_fake	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_fake = a:1$/;"	v
g:gutentags_fake	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_fake = !g:gutentags_fake$/;"	v
g:gutentags_fake	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_fake = get(g:, 'gutentags_fake', 0)$/;"	v
g:gutentags_file_list_command	ftplugin/rust.vim	/^let g:gutentags_file_list_command = 'rg --files'$/;"	v
g:gutentags_file_list_command	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_file_list_command = get(g:, 'gutentags_file_list_command', '')$/;"	v
g:gutentags_generate_on_empty_buffer	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_empty_buffer = get(g:, 'gutentags_generate_on_empty_buffer', 0)$/;"	v
g:gutentags_generate_on_missing	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_missing = get(g:, 'gutentags_generate_on_missing', 1)$/;"	v
g:gutentags_generate_on_new	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_new = get(g:, 'gutentags_generate_on_new', 1)$/;"	v
g:gutentags_generate_on_write	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_generate_on_write = get(g:, 'gutentags_generate_on_write', 1)$/;"	v
g:gutentags_gtags_cscope_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_cscope_executable = 'gtags-cscope'$/;"	v
g:gutentags_gtags_dbpath	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_dbpath = ''$/;"	v
g:gutentags_gtags_executable	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_executable = 'gtags'$/;"	v
g:gutentags_gtags_options_file	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^    let g:gutentags_gtags_options_file = '.gutgtags'$/;"	v
g:gutentags_init_user_func	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_init_user_func = get(g:, 'gutentags_init_user_func', $/;"	v
g:gutentags_modules	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_modules = get(g:, 'gutentags_modules', ['ctags'])$/;"	v
g:gutentags_pause_after_update	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_pause_after_update = get(g:, 'gutentags_pause_after_update', 0)$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . "\\\\plat\\\\win32\\\\"$/;"	v
g:gutentags_plat_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_plat_dir = expand('<sfile>:h:h:p') . '\/plat\/unix\/'$/;"	v
g:gutentags_project_info	init.vim	/^  let g:gutentags_project_info = []$/;"	v
g:gutentags_project_info	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_info = get(g:, 'gutentags_project_info', [])$/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_project_root += ['.git', '.hg', '.svn', '.bzr', '_darcs', '_FOSSIL_', '.fslc/;"	v
g:gutentags_project_root	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root = get(g:, 'gutentags_project_root', [])$/;"	v
g:gutentags_project_root_finder	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_project_root_finder = get(g:, 'gutentags_project_root_finder', '')$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . "\\\\res\\\\"$/;"	v
g:gutentags_res_dir	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_res_dir = expand('<sfile>:h:h:p') . '\/res\/'$/;"	v
g:gutentags_resolve_symlinks	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_resolve_symlinks = get(g:, 'gutentags_resolve_symlinks', 0)$/;"	v
g:gutentags_scopefile	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^    let g:gutentags_scopefile = 'cscope.out'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.cmd'$/;"	v
g:gutentags_script_ext	plugged/vim-gutentags/plugin/gutentags.vim	/^    let g:gutentags_script_ext = '.sh'$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^            let g:gutentags_trace = l:prev_trace$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = 1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = a:1$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^        let g:gutentags_trace = l:trace_backup$/;"	v
g:gutentags_trace	plugged/vim-gutentags/autoload/gutentags.vim	/^    let g:gutentags_trace = !g:gutentags_trace$/;"	v
g:gutentags_trace	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_trace = get(g:, 'gutentags_trace', 0)$/;"	v
g:gutentags_use_jobs	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:gutentags_use_jobs = get(g:, 'gutentags_use_jobs', has('job'))$/;"	v
g:io_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:io_fugitive = {$/;"	v
g:lightline	init.vim	/^let g:lightline = {$/;"	v
g:lightline	plugged/lightline.vim/test/autocmd.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/concatenate.vim	/^  let g:lightline = { 'subseparator': { 'left': '>', 'right': '<' } }$/;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' } }$/;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom' }, 'component_type': { 'custom': /;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'Custom', 'modified': 'Modified' } }$/;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'NotFound' } }$/;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'NotFound' }, 'component_type': { 'custom'/;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = { 'component_expand': { 'custom': 'g:lightline.Custom' } }$/;"	v
g:lightline	plugged/lightline.vim/test/expand.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/highlight.vim	/^  let g:lightline = { 'component_type': { 'error': 'error', 'warning': 'warning' } }$/;"	v
g:lightline	plugged/lightline.vim/test/highlight.vim	/^  let g:lightline = {$/;"	v
g:lightline	plugged/lightline.vim/test/highlight.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/link.vim	/^  let g:lightline = { 'component_type': { 'error': 'error', 'warning': 'warning' } }$/;"	v
g:lightline	plugged/lightline.vim/test/link.vim	/^  let g:lightline = {$/;"	v
g:lightline	plugged/lightline.vim/test/link.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/mode.vim	/^  let g:lightline = { 'mode_map': { 'n': 'N' } }$/;"	v
g:lightline	plugged/lightline.vim/test/mode.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component': { 'custom': 'custom' }/;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom' ] }, 'tab_component_function': { 'custom': '/;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'custom', 'filename' ], 'inactive': [ 'custom', 'cust/;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'tabnum', 'custom' ], 'inactive': [ 'tabnum', 'custom/;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'tabnum', 'custom', 'filename' ], 'inactive': [ 'tabn/;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = { 'tab': { 'active': [ 'tabnum', 'filename' ], 'inactive': [ 'filename' ] } /;"	v
g:lightline	plugged/lightline.vim/test/onetab.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/popup.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/quickfix.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component': { 'custom1': 'custom1', 'custom2': 'custom2', 'custom3': 'cus/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1' }, 'component_function': { 'cus/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'compo/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_expand': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custom3/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1' } }$/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' } }$/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2' }, 'com/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom1': 'Custom1', 'custom2': 'Custom2', 'custo/;"	v
g:lightline	plugged/lightline.vim/test/subseparator.vim	/^  let g:lightline = { 'component_function': { 'custom2': 'Custom2' } }$/;"	v
g:lightline	plugged/lightline.vim/test/tabline.vim	/^  let g:lightline = { 'enable': { 'tabline': 0 } }$/;"	v
g:lightline	plugged/lightline.vim/test/tabline.vim	/^  let g:lightline = { 'enable': { 'tabline': 1 } }$/;"	v
g:lightline	plugged/lightline.vim/test/tabline.vim	/^  let g:lightline = {}$/;"	v
g:lightline	plugged/lightline.vim/test/toggle.vim	/^  let g:lightline = {}$/;"	v
g:lightline#colorscheme#16color#palette	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let g:lightline#colorscheme#16color#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#OldHope#palette	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let g:lightline#colorscheme#OldHope#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#PaperColor#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_dark#palet/;"	v
g:lightline#colorscheme#PaperColor#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor.vim	/^  let g:lightline#colorscheme#PaperColor#palette = g:lightline#colorscheme#PaperColor_light#pale/;"	v
g:lightline#colorscheme#PaperColor_dark#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let g:lightline#colorscheme#PaperColor_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#PaperColor_light#palette	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let g:lightline#colorscheme#PaperColor_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let g:lightline#colorscheme#Tomorrow#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let g:lightline#colorscheme#Tomorrow_Night#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Blue#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Blue#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Bright#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Bright#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#Tomorrow_Night_Eighties#palette	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let g:lightline#colorscheme#Tomorrow_Night_Eighties#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#apprentice#palette	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let g:lightline#colorscheme#apprentice#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#ayu_dark#palette	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let g:lightline#colorscheme#ayu_dark#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#ayu_light#palette	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let g:lightline#colorscheme#ayu_light#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#ayu_mirage#palette	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let g:lightline#colorscheme#ayu_mirage#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#darcula#palette	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let g:lightline#colorscheme#darcula#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#default#palette	plugged/lightline.vim/autoload/lightline/colorscheme/default.vim	/^let g:lightline#colorscheme#default#palette = g:lightline#colorscheme#powerline#palette$/;"	v
g:lightline#colorscheme#deus#palette	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let g:lightline#colorscheme#deus#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#jellybeans#palette	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let g:lightline#colorscheme#jellybeans#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#landscape#palette	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let g:lightline#colorscheme#landscape#palette = s:p$/;"	v
g:lightline#colorscheme#materia#palette	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let g:lightline#colorscheme#materia#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#material#palette	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let g:lightline#colorscheme#material#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#molokai#palette	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let g:lightline#colorscheme#molokai#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#nord#palette	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let g:lightline#colorscheme#nord#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#one#palette	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let g:lightline#colorscheme#one#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#powerline#palette	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let g:lightline#colorscheme#powerline#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#powerlineish#palette	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let g:lightline#colorscheme#powerlineish#palette = lightline#colorscheme#fill(s:p)$/;"	v
g:lightline#colorscheme#selenized_black#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let g:lightline#colorscheme#selenized_black#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#selenized_dark#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let g:lightline#colorscheme#selenized_dark#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#selenized_light#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let g:lightline#colorscheme#selenized_light#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#selenized_white#palette	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let g:lightline#colorscheme#selenized_white#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#seoul256#palette	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let g:lightline#colorscheme#seoul256#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#simpleblack#palette	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let g:lightline#colorscheme#simpleblack#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#solarized#palette	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let g:lightline#colorscheme#solarized#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#srcery_drk#palette	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let g:lightline#colorscheme#srcery_drk#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:lightline#colorscheme#wombat#palette	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let g:lightline#colorscheme#wombat#palette = lightline#colorscheme#flatten(s:p)$/;"	v
g:loaded_abolish	plugged/vim-abolish/plugin/abolish.vim	/^let g:loaded_abolish = 1$/;"	v
g:loaded_ale	plugged/ale/plugin/ale.vim	/^let g:loaded_ale = 1$/;"	v
g:loaded_ale_dont_use_this_in_other_plugins_please	plugged/ale/plugin/ale.vim	/^let g:loaded_ale_dont_use_this_in_other_plugins_please = 1$/;"	v
g:loaded_commentary	plugged/vim-commentary/plugin/commentary.vim	/^let g:loaded_commentary = 1$/;"	v
g:loaded_completion	plugged/completion-nvim/plugin/completion.vim	/^let g:loaded_completion = 1$/;"	v
g:loaded_delimitMate	plugged/delimitMate/plugin/delimitMate.vim	/^let g:loaded_delimitMate = 1$/;"	v
g:loaded_dirvish	plugged/vim-dirvish/plugin/dirvish.vim	/^let g:loaded_dirvish = 1$/;"	v
g:loaded_fugitive	plugged/vim-fugitive/plugin/fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_fzf	plugged/fzf/plugin/fzf.vim	/^let g:loaded_fzf = 1$/;"	v
g:loaded_fzf_vim	plugged/fzf.vim/plugin/fzf.vim	/^let g:loaded_fzf_vim = 1$/;"	v
g:loaded_gutentags	plugged/vim-gutentags/plugin/gutentags.vim	/^let g:loaded_gutentags = 1$/;"	v
g:loaded_lightline	plugged/lightline.vim/plugin/lightline.vim	/^let g:loaded_lightline = 1$/;"	v
g:loaded_repeat	plugged/vim-repeat/autoload/repeat.vim	/^let g:loaded_repeat = 1$/;"	v
g:loaded_rust_vim	plugged/rust.vim/plugin/rust.vim	/^let g:loaded_rust_vim = 1$/;"	v
g:loaded_rust_vim_plugin_cargo	plugged/rust.vim/plugin/cargo.vim	/^let g:loaded_rust_vim_plugin_cargo = 1$/;"	v
g:loaded_sneak_plugin	plugged/vim-sneak/plugin/sneak.vim	/^let g:loaded_sneak_plugin = 1$/;"	v
g:loaded_speeddating	plugged/vim-speeddating/plugin/speeddating.vim	/^let g:loaded_speeddating = 1$/;"	v
g:loaded_surround	plugged/vim-surround/plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_syntastic_rust_cargo_checker	plugged/rust.vim/syntax_checkers/rust/cargo.vim	/^let g:loaded_syntastic_rust_cargo_checker = 1$/;"	v
g:loaded_syntastic_rust_rustc_checker	plugged/rust.vim/syntax_checkers/rust/rustc.vim	/^let g:loaded_syntastic_rust_rustc_checker = 1$/;"	v
g:lspconfig	plugged/nvim-lspconfig/plugin/lspconfig.vim	/^let g:lspconfig = 1$/;"	v
g:mapleader	plugged/ale/test/.config/nvim/init.vim	/^let g:mapleader=','$/;"	v
g:mapleader	plugged/ale/test/vimrc	/^let g:mapleader=','$/;"	v
g:nofrils_heavycomments	colors/nofrils-dark.vim	/^    let g:nofrils_heavycomments = 0$/;"	v
g:nofrils_heavylinenumbers	colors/nofrils-dark.vim	/^    let g:nofrils_heavylinenumbers = 0$/;"	v
g:nofrils_strbackgrounds	colors/nofrils-dark.vim	/^    let g:nofrils_strbackgrounds = 0$/;"	v
g:qf_disable_statusline	plugged/lightline.vim/plugin/lightline.vim	/^let g:qf_disable_statusline = 1$/;"	v
g:repeat_count	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_count = a:0 ? a:1 : v:count$/;"	v
g:repeat_reg	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_reg = [a:sequence, a:register]$/;"	v
g:repeat_reg	plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_reg = ['', '']$/;"	v
g:repeat_sequence	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_sequence = a:sequence$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^        let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = -1$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^    let g:repeat_tick = b:changedtick$/;"	v
g:repeat_tick	plugged/vim-repeat/autoload/repeat.vim	/^let g:repeat_tick = -1$/;"	v
g:rustfmt_autosave	ftplugin/rust.vim	/^let g:rustfmt_autosave = 1$/;"	v
g:rustfmt_autosave	plugged/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_command	plugged/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_emit_files	plugged/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_emit_files = s:rustfmt_version >= "0.8.2"$/;"	v
g:rustfmt_fail_silently	plugged/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_fail_silently = 0$/;"	v
g:rustfmt_file_lines	plugged/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_file_lines = s:rustfmt_help =~# "--file-lines JSON"$/;"	v
g:rustfmt_options	plugged/rust.vim/autoload/rustfmt.vim	/^    let g:rustfmt_options = ""$/;"	v
g:sneak#opt	plugged/vim-sneak/plugin/sneak.vim	/^      let g:sneak#opt[k.'_reset'] = 0$/;"	v
g:sneak#opt	plugged/vim-sneak/plugin/sneak.vim	/^  let g:sneak#opt = { 'f_reset' : get(g:, 'sneak#nextprev_f', get(g:, 'sneak#f_reset', 1))$/;"	v
g:sneak#search#instance	plugged/vim-sneak/autoload/sneak/search.vim	/^let g:sneak#search#instance = sneak#search#new()$/;"	v
g:sneak#target_labels	plugged/vim-sneak/autoload/sneak/label.vim	/^        let g:sneak#target_labels = k . g:sneak#target_labels$/;"	v
g:sneak#target_labels	plugged/vim-sneak/autoload/sneak/label.vim	/^      let g:sneak#target_labels = substitute(g:sneak#target_labels, '\\%'.(i+1).'c.', '', '')$/;"	v
g:sneak#target_labels	plugged/vim-sneak/autoload/sneak/label.vim	/^let g:sneak#target_labels = get(g:, 'sneak#target_labels', ";sftunq\/SFGHLTUNRMQZ?0")$/;"	v
g:speeddating_formats	plugged/vim-speeddating/plugin/speeddating.vim	/^    let g:speeddating_formats += [[a:master,a:count,a:bang]]$/;"	v
g:speeddating_formats	plugged/vim-speeddating/plugin/speeddating.vim	/^let g:speeddating_formats = []$/;"	v
g:speeddating_handlers	plugged/vim-speeddating/autoload/speeddating.vim	/^let g:speeddating_handlers += [{'regexp': '-\\=\\<\\d\\+\\%(st\\|nd\\|rd\\|th\\)\\>', 'increment/;"	v
g:speeddating_handlers	plugged/vim-speeddating/plugin/speeddating.vim	/^let g:speeddating_handlers = []$/;"	v
g:speeddating_loaded_formats	plugged/vim-speeddating/autoload/speeddating.vim	/^  let g:speeddating_loaded_formats = 1$/;"	v
g:speeddating_zone	plugged/vim-speeddating/autoload/speeddating.vim	/^    let g:speeddating_zone = get({-8:'PST',-7:'MST',-6:'CST',-5:'EST',0:'WET',1:'CET',2:'EET'},s/;"	v
g:speeddating_zone	plugged/vim-speeddating/autoload/speeddating.vim	/^  let g:speeddating_zone = strftime("%Z",30*365*86400)$/;"	v
g:speeddating_zone_dst	plugged/vim-speeddating/autoload/speeddating.vim	/^      let g:speeddating_zone_dst = g:speeddating_zone$/;"	v
g:speeddating_zone_dst	plugged/vim-speeddating/autoload/speeddating.vim	/^      let g:speeddating_zone_dst = get({-7:'PDT',-6:'MDT',-5:'CDT',-4:'EDT',1:'WEST',2:'CEST',3:/;"	v
g:speeddating_zone_dst	plugged/vim-speeddating/autoload/speeddating.vim	/^  let g:speeddating_zone_dst = strftime("%Z",(180+30*365)*86400)$/;"	v
g:syntastic_extra_filetypes	plugged/rust.vim/plugin/rust.vim	/^    let g:syntastic_extra_filetypes = ['rust']$/;"	v
g:syntastic_rust_cargo_fname	plugged/rust.vim/syntax_checkers/rust/cargo.vim	/^let g:syntastic_rust_cargo_fname = ""$/;"	v
g:syntastic_rust_checkers	plugged/rust.vim/plugin/rust.vim	/^    let g:syntastic_rust_checkers = ['cargo']$/;"	v
g:tagbar_type_rust	plugged/rust.vim/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust = {$/;"	v
g:tagbar_type_rust	plugged/rust.vim/ftplugin/rust/tagbar.vim	/^    let g:tagbar_type_rust.deffile = expand('<sfile>:p:h:h:h') . '\/ctags\/rust.ctags'$/;"	v
g:terminal_color_0	colors/nofrils-dark.vim	/^let g:terminal_color_0  = "#151515"$/;"	v
g:terminal_color_1	colors/nofrils-dark.vim	/^let g:terminal_color_1  = "#AC4142"$/;"	v
g:terminal_color_10	colors/nofrils-dark.vim	/^let g:terminal_color_10 = "#202020"$/;"	v
g:terminal_color_11	colors/nofrils-dark.vim	/^let g:terminal_color_11 = "#303030"$/;"	v
g:terminal_color_12	colors/nofrils-dark.vim	/^let g:terminal_color_12 = "#B0B0B0"$/;"	v
g:terminal_color_13	colors/nofrils-dark.vim	/^let g:terminal_color_13 = "#E0E0E0"$/;"	v
g:terminal_color_14	colors/nofrils-dark.vim	/^let g:terminal_color_14 = "#8F5536"$/;"	v
g:terminal_color_15	colors/nofrils-dark.vim	/^let g:terminal_color_15 = "#F5F5F5"$/;"	v
g:terminal_color_2	colors/nofrils-dark.vim	/^let g:terminal_color_2  = "#90A959"$/;"	v
g:terminal_color_3	colors/nofrils-dark.vim	/^let g:terminal_color_3  = "#F4BF75"$/;"	v
g:terminal_color_4	colors/nofrils-dark.vim	/^let g:terminal_color_4  = "#6A9FB5"$/;"	v
g:terminal_color_5	colors/nofrils-dark.vim	/^let g:terminal_color_5  = "#AA759F"$/;"	v
g:terminal_color_6	colors/nofrils-dark.vim	/^let g:terminal_color_6  = "#75BFAA"$/;"	v
g:terminal_color_7	colors/nofrils-dark.vim	/^let g:terminal_color_7  = "#D0D0D0"$/;"	v
g:terminal_color_8	colors/nofrils-dark.vim	/^let g:terminal_color_8  = "#505050"$/;"	v
g:terminal_color_9	colors/nofrils-dark.vim	/^let g:terminal_color_9  = "#D28445"$/;"	v
g:virtual_scriptnames	plugged/vim-fugitive/autoload/fugitive.vim	/^    let g:virtual_scriptnames = {}$/;"	v
g:virtual_scriptnames	plugged/vim-fugitive/autoload/fugitive.vim	/^  let g:virtual_scriptnames[temp] = amatch$/;"	v
g?	plugged/vim-dirvish/ftplugin/dirvish.vim	/^nnoremap <buffer><silent>   g?    :help dirvish-mappings<CR>$/;"	m
gD	plugged/vim-slash/plugin/slash.vim	/^map  <expr> gD   <sid>wrap('gD')$/;"	m
gS	plugged/vim-surround/plugin/surround.vim	/^  xmap gS  <Plug>VgSurround$/;"	m
gather_candidates	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def gather_candidates(self, context):$/;"	m	class:Source
gc	plugged/vim-commentary/plugin/commentary.vim	/^  nmap gc  <Plug>Commentary$/;"	m
gc	plugged/vim-commentary/plugin/commentary.vim	/^  omap gc  <Plug>Commentary$/;"	m
gc	plugged/vim-commentary/plugin/commentary.vim	/^  xmap gc  <Plug>Commentary$/;"	m
gcc	plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcc <Plug>CommentaryLine$/;"	m
gcu	plugged/vim-commentary/plugin/commentary.vim	/^  nmap gcu <Plug>Commentary<Plug>Commentary$/;"	m
gd	init.vim	/^            nmap <buffer> <silent> gd <Plug>(lcn-definition)$/;"	m
gd	plugged/vim-slash/plugin/slash.vim	/^map  <expr> gd   <sid>wrap('gd')$/;"	m
gdscript	plugged/nvim-lspconfig/CONFIG.md	/^## gdscript$/;"	s	chapter:Configurations
generate_readme	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function generate_readme(template_file, params)$/;"	f
getBytes	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytes() []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getBytesInternal	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) getBytesInternal(buffer []byte, nonblock bool) []byte {$/;"	f	struct:tui.LightRenderer	typeref:typename:[]byte
getCompletionItems	plugged/completion-nvim/lua/completion/complete.lua	/^local function getCompletionItems(items_array, prefix)$/;"	f
getEnv	plugged/fzf/src/tui/light.go	/^func getEnv(name string, defaultValue int) int {$/;"	f	package:tui	typeref:typename:int
getPositionParam	plugged/completion-nvim/lua/completion/source.lua	/^local getPositionParam = function()$/;"	f
getScopedChain	plugged/completion-nvim/lua/completion/chain_completion.lua	/^local function getScopedChain(ft_subtree)$/;"	f
getTriggerCharacter	plugged/completion-nvim/lua/completion/source.lua	/^local getTriggerCharacter = function()$/;"	f
get_complete_position	plugged/ale/rplugin/python3/deoplete/sources/ale.py	/^    def get_complete_position(self, context):$/;"	m	class:Source
get_completion_word	plugged/completion-nvim/lua/completion/source/lsp.lua	/^local function get_completion_word(item, prefix, suffix)$/;"	f
get_context_aware_snippets	plugged/completion-nvim/lua/completion/source/lsp.lua	/^local function get_context_aware_snippets(item, completion_item, line_to_cursor)$/;"	f
get_language_id	plugged/nvim-lspconfig/lua/lspconfig/ocamllsp.lua	/^local get_language_id = function(_, ftype)$/;"	f
get_probe_dir	plugged/nvim-lspconfig/lua/lspconfig/angularls.lua	/^local function get_probe_dir(root_dir)$/;"	f
getch	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
getch	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) getch(nonblock bool) (int, bool) {$/;"	f	unknown:tui.LightRenderer	typeref:typename:(int, bool)
ghcide	plugged/nvim-lspconfig/CONFIG.md	/^## ghcide$/;"	s	chapter:Configurations
go	plugged/fzf/test/test_go.rb	/^  def go(args)$/;"	f	class:Tmux
gopls	plugged/nvim-lspconfig/CONFIG.md	/^## gopls$/;"	s	chapter:Configurations
graphql	plugged/nvim-lspconfig/CONFIG.md	/^## graphql$/;"	s	chapter:Configurations
groovyls	plugged/nvim-lspconfig/CONFIG.md	/^## groovyls$/;"	s	chapter:Configurations
gutentags#add_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#add_job(module, tags_file, data) abort$/;"	f
gutentags#build_default_job_options	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#build_default_job_options(module) abort$/;"	f
gutentags#chdir	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#chdir(path)$/;"	f
gutentags#cscope#generate	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#cscope#init	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#init(project_root) abort$/;"	f
gutentags#cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^function! gutentags#cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#ctags#generate	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#ctags#init	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#init(project_root) abort$/;"	f
gutentags#ctags#on_job_exit	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! gutentags#ctags#on_job_exit(job, exit_val) abort$/;"	f
gutentags#default_get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_get_project_root(path) abort$/;"	f
gutentags#default_stderr_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stderr_cb(chan, msg) abort$/;"	f
gutentags#default_stdout_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#default_stdout_cb(chan, msg) abort$/;"	f
gutentags#error	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#error(message)$/;"	f
gutentags#fake	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#fake(...)$/;"	f
gutentags#find_job_index_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_data(module, data) abort$/;"	f
gutentags#find_job_index_by_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#find_job_index_by_tags_file(module, tags_file) abort$/;"	f
gutentags#get_cachefile	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_cachefile(root_dir, filename) abort$/;"	f
gutentags#get_job_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_data(module, job_idx) abort$/;"	f
gutentags#get_job_tags_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_job_tags_file(module, job_idx) abort$/;"	f
gutentags#get_plat_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_plat_file(filename) abort$/;"	f
gutentags#get_project_file_list_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_file_list_cmd(path) abort$/;"	f
gutentags#get_project_info	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_info(path) abort$/;"	f
gutentags#get_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_project_root(path) abort$/;"	f
gutentags#get_res_file	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#get_res_file(filename) abort$/;"	f
gutentags#gtags_cscope#generate	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#generate(proj_dir, tags_file, gen_opts) abort$/;"	f
gutentags#gtags_cscope#init	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#init(project_root) abort$/;"	f
gutentags#gtags_cscope#on_job_exit	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! gutentags#gtags_cscope#on_job_exit(job, exit_val) abort$/;"	f
gutentags#inprogress	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#inprogress()$/;"	f
gutentags#is_path_rooted	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#is_path_rooted(path) abort$/;"	f
gutentags#make_args	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#make_args(cmd) abort$/;"	f
gutentags#normalizepath	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#normalizepath(path)$/;"	f
gutentags#on_vim_leave_pre	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#on_vim_leave_pre() abort$/;"	f
gutentags#remove_job	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job(module, job_idx) abort$/;"	f
gutentags#remove_job_by_data	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#remove_job_by_data(module, data) abort$/;"	f
gutentags#rescan	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#rescan(...)$/;"	f
gutentags#setup_gutentags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#setup_gutentags() abort$/;"	f
gutentags#shellslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#shellslash(path)$/;"	f
gutentags#start_job	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! gutentags#start_job(cmd, opts) abort$/;"	f
gutentags#statusline	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline(...) abort$/;"	f
gutentags#statusline_cb	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#statusline_cb(fmt_cb, ...) abort$/;"	f
gutentags#stripslash	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#stripslash(path)$/;"	f
gutentags#throw	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#throw(message)$/;"	f
gutentags#toggletrace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#toggletrace(...)$/;"	f
gutentags#trace	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#trace(message, ...)$/;"	f
gutentags#validate_cmd	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#validate_cmd(cmd) abort$/;"	f
gutentags#warning	plugged/vim-gutentags/autoload/gutentags.vim	/^function! gutentags#warning(message)$/;"	f
gutentags_detect	plugged/vim-gutentags/plugin/gutentags.vim	/^augroup gutentags_detect$/;"	a
gzip	plugged/delimitMate/Makefile	/^gzip: $(FILENAME).tar.gz $(FILENAME).vmb.gz$/;"	t
handler_function	plugged/completion-nvim/lua/completion/hover.lua	/^local function handler_function(_, method, result)$/;"	f
hasConfirmedCompletion	plugged/completion-nvim/lua/completion.lua	/^local function hasConfirmedCompletion()$/;"	f
hasPreviewAction	plugged/fzf/src/terminal.go	/^func hasPreviewAction(opts *Options) bool {$/;"	f	package:fzf	typeref:typename:bool
hasPreviewFlags	plugged/fzf/src/terminal.go	/^func hasPreviewFlags(template string) (slot bool, plus bool, query bool) {$/;"	f	package:fzf	typeref:typename:(slot bool, plus bool, query bool)
hasPreviewWindow	plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewWindow() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
hasPreviewer	plugged/fzf/src/terminal.go	/^func (t *Terminal) hasPreviewer() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
haxe_language_server	plugged/nvim-lspconfig/CONFIG.md	/^## haxe_language_server$/;"	s	chapter:Configurations
header	plugged/delimitMate/test/expand_cr.vim	/^    let header = empty(header) ? item[1:] : 'Lines should match.'$/;"	v
header	plugged/delimitMate/test/expand_cr.vim	/^  let header = ''$/;"	v
header	plugged/delimitMate/test/expand_cr.vim	/^let header = ''$/;"	v
header	plugged/fzf/src/terminal.go	/^	header       []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
header0	plugged/fzf/src/terminal.go	/^	header0      []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
headerLines	plugged/fzf/src/options.go	/^	headerLines int$/;"	m	struct:fzf.previewOpts	typeref:typename:int
health#completion_nvim#check	plugged/completion-nvim/autoload/health/completion_nvim.vim	/^function! health#completion_nvim#check()$/;"	f
health#lspconfig#check	plugged/nvim-lspconfig/autoload/health/lspconfig.vim	/^function! health#lspconfig#check()$/;"	f
height	plugged/fzf/src/tui/light.go	/^	height        int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
height	plugged/fzf/src/tui/light.go	/^	height   int$/;"	m	struct:tui.LightWindow	typeref:typename:int
height	plugged/fzf/src/tui/tcell.go	/^	height      int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
help	plugged/fzf/bin/fzf-tmux	/^help() {$/;"	f
help	plugged/fzf/install	/^help() {$/;"	f
help	plugged/fzf/src/options.go	/^func help(code int) {$/;"	f	package:fzf
help	plugged/fzf/uninstall	/^help() {$/;"	f
helpers	plugged/nvim-lspconfig/test/lspconfig_spec.lua	/^local helpers = require "test.functional.helpers"(after_each)$/;"	f
hidden	plugged/fzf/src/options.go	/^	hidden      bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
hie	plugged/nvim-lspconfig/CONFIG.md	/^## hie$/;"	s	chapter:Configurations
highlight_region	plugged/completion-nvim/lua/completion/hover.lua	/^  local function highlight_region(ft, start, finish)$/;"	f
history	plugged/fzf/src/terminal.go	/^	history      *History$/;"	m	struct:fzf.Terminal	typeref:typename:*History
hls	plugged/nvim-lspconfig/CONFIG.md	/^## hls$/;"	s	chapter:Configurations
horizontal	plugged/fzf/src/tui/tui.go	/^	horizontal  rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
hscroll	plugged/fzf/src/terminal.go	/^	hscroll      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
hscrollOff	plugged/fzf/src/terminal.go	/^	hscrollOff   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
html	plugged/nvim-lspconfig/CONFIG.md	/^## html$/;"	s	chapter:Configurations
i	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> i <NOP>$/;"	m
iabbrev_map	plugged/supertab/plugin/supertab.vim	/^    let iabbrev_map = iabbrevs =~? '\\<cr>'$/;"	v
ignore	plugged/fzf/src/util/eventbox.go	/^	ignore map[EventType]bool$/;"	m	struct:util.EventBox	typeref:typename:map[EventType]bool
image_exists	plugged/rust.vim/test/run-tests	/^def image_exists():$/;"	f
impls,trait implementations	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?impl([ \\t\\n]*<[^>]*>)?[ \\t]+(([a-zA-Z0-9_:]+)[ \\t]*(<[^>/;"	k	langdef:Rust
inBytes	plugged/fzf/src/util/chars.go	/^	inBytes         bool$/;"	m	struct:util.Chars	typeref:typename:bool
inHandle	plugged/fzf/src/tui/light.go	/^	inHandle        uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
indent	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function indent(n, s)$/;"	f
index	plugged/fzf/src/matcher.go	/^	index   int$/;"	m	struct:fzf.partialResult	typeref:typename:int
indexAt	plugged/fzf/src/algo/algo.go	/^func indexAt(index int, max int, forward bool) int {$/;"	f	package:algo	typeref:typename:int
infoDefault	plugged/fzf/src/options.go	/^	infoDefault infoStyle = iota$/;"	c	package:fzf	typeref:type:infoStyle
infoHidden	plugged/fzf/src/options.go	/^	infoHidden$/;"	c	package:fzf
infoInline	plugged/fzf/src/options.go	/^	infoInline$/;"	c	package:fzf
infoStyle	plugged/fzf/src/options.go	/^type infoStyle int$/;"	t	package:fzf	typeref:typename:int
infoStyle	plugged/fzf/src/terminal.go	/^	infoStyle    infoStyle$/;"	m	struct:fzf.Terminal	typeref:typename:infoStyle
init	plugged/fzf/src/constants.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/options.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/pattern.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/pattern_test.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/terminal.go	/^func init() {$/;"	f	package:fzf
init	plugged/fzf/src/tui/tui.go	/^func init() {$/;"	f	package:tui
initDelay	plugged/fzf/src/terminal.go	/^	initDelay    time.Duration$/;"	m	struct:fzf.Terminal	typeref:typename:time.Duration
initFunc	plugged/fzf/src/terminal.go	/^	initFunc     func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
initPalette	plugged/fzf/src/tui/tui.go	/^func initPalette(theme *ColorTheme) {$/;"	f	package:tui
initPlatform	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initPlatform	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) initPlatform() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
initScreen	plugged/fzf/src/tui/tcell.go	/^func (r *FullscreenRenderer) initScreen() {$/;"	f	unknown:tui.FullscreenRenderer
initTheme	plugged/fzf/src/tui/tui.go	/^func initTheme(theme *ColorTheme, baseTheme *ColorTheme, forceBlack bool) {$/;"	f	package:tui
initialDelay	plugged/fzf/src/constants.go	/^	initialDelay      = 20 * time.Millisecond$/;"	c	package:fzf
initialDelayTac	plugged/fzf/src/constants.go	/^	initialDelayTac   = 100 * time.Millisecond$/;"	c	package:fzf
initialize	plugged/fzf/test/test_go.rb	/^  def initialize(shell = :bash)$/;"	f	class:Tmux
input	plugged/fzf/src/terminal.go	/^	input        []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
input2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input, '(', s:l, 'g')$/;"	v
input2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let input2 = substitute(input2, ')', s:r, 'g')$/;"	v
input_q	plugged/delimitMate/test/autoclose_quotes.vim	/^    let input_q = substitute(input,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
inside_docker	plugged/rust.vim/test/run-tests	/^def inside_docker():$/;"	f
install	plugged/delimitMate/Makefile	/^install: $(SOURCES)$/;"	t
install	plugged/fzf/Makefile	/^install: bin\/fzf$/;"	t
install	plugged/supertab/Makefile	/^install: supertab.vmb$/;"	t
intelephense	plugged/nvim-lspconfig/CONFIG.md	/^## intelephense$/;"	s	chapter:Configurations
interpretCode	plugged/fzf/src/ansi.go	/^func interpretCode(ansiCode string, prevState *ansiState) ansiState {$/;"	f	package:fzf	typeref:typename:ansiState
inv	plugged/fzf/src/pattern.go	/^	inv           bool$/;"	m	struct:fzf.term	typeref:typename:bool
is24	plugged/fzf/src/tui/tui.go	/^func (c Color) is24() bool {$/;"	f	type:tui.Color	typeref:typename:bool
isAlphabet	plugged/fzf/src/options.go	/^func isAlphabet(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isAscii	plugged/fzf/src/algo/algo.go	/^func isAscii(runes []rune) bool {$/;"	f	package:algo	typeref:typename:bool
isCtrlSeqStart	plugged/fzf/src/ansi.go	/^func isCtrlSeqStart(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isExecuteAction	plugged/fzf/src/options.go	/^func isExecuteAction(str string) actionType {$/;"	f	package:fzf	typeref:typename:actionType
isNumeric	plugged/fzf/src/options.go	/^func isNumeric(char uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
isPreviewEnabled	plugged/fzf/src/terminal.go	/^func (t *Terminal) isPreviewEnabled() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
isPrint	plugged/fzf/src/ansi.go	/^func isPrint(c uint8) bool {$/;"	f	package:fzf	typeref:typename:bool
is_absolute	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function is_absolute(filename)$/;"	f
is_descendant	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function is_descendant(root, path)$/;"	f
is_dir	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function is_dir(filename)$/;"	f
is_file	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function is_file(filename)$/;"	f
is_fs_root	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^    is_fs_root = function(path)$/;"	f
it	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^    local function it(s, v)$/;"	f
item	plugged/fzf/src/result.go	/^	item   *Item$/;"	m	struct:fzf.Result	typeref:typename:*Item
item	plugged/fzf/src/terminal.go	/^	item *Item$/;"	m	struct:fzf.selectedItem	typeref:typename:*Item
itemLine	plugged/fzf/src/terminal.go	/^type itemLine struct {$/;"	s	package:fzf
item_count	plugged/fzf/test/test_go.rb	/^          def item_count$/;"	f	method:Tmux.until
items	plugged/completion-nvim/lua/completion/hover.lua	/^    local items = api.nvim_call_function('complete_info', {{"eval", "selected", "items", "user_d/;"	f
items	plugged/fzf/src/chunklist.go	/^	items [chunkSize]Item$/;"	m	struct:fzf.Chunk	typeref:typename:[chunkSize]Item
itemsnumber	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let itemsnumber = len(split(g:delimitMate_matchpairs, '.:.\\zs,\\ze.:.'))$/;"	v
itemsnumber	plugged/delimitMate/test/autoclose_quotes.vim	/^let itemsnumber = len(split(g:delimitMate_quotes, ' '))$/;"	v
iter	plugged/completion-nvim/lua/completion/source/path.lua	/^    local function iter()$/;"	f
iter	plugged/fzf/src/pattern.go	/^func (p *Pattern) iter(pfun algo.Algo, tokens []Token, caseSensitive bool, normalize bool, forwa/;"	f	struct:fzf.Pattern	typeref:typename:(Offset, int, *[]int)
iterate_parents	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function iterate_parents(path)$/;"	f
j	ftplugin/todo.vim	/^nnoremap <buffer> j gj$/;"	m
java_language_server	plugged/nvim-lspconfig/CONFIG.md	/^## java_language_server$/;"	s	chapter:Configurations
jdtls	plugged/nvim-lspconfig/CONFIG.md	/^## jdtls$/;"	s	chapter:Configurations
jedi_language_server	plugged/nvim-lspconfig/CONFIG.md	/^## jedi_language_server$/;"	s	chapter:Configurations
jellybeans	plugged/lightline.vim/colorscheme.md	/^### jellybeans$/;"	S	chapter:Available Colorschemes
joinTokens	plugged/fzf/src/tokenizer.go	/^func joinTokens(tokens []Token) string {$/;"	f	package:fzf	typeref:typename:string
jsonls	plugged/nvim-lspconfig/CONFIG.md	/^## jsonls$/;"	s	chapter:Configurations
julials	plugged/nvim-lspconfig/CONFIG.md	/^## julials$/;"	s	chapter:Configurations
jumpAcceptEnabled	plugged/fzf/src/terminal.go	/^	jumpAcceptEnabled$/;"	c	package:fzf
jumpDisabled	plugged/fzf/src/terminal.go	/^	jumpDisabled jumpMode = iota$/;"	c	package:fzf	typeref:type:jumpMode
jumpEnabled	plugged/fzf/src/terminal.go	/^	jumpEnabled$/;"	c	package:fzf
jumpLabels	plugged/fzf/src/terminal.go	/^	jumpLabels   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
jumpMode	plugged/fzf/src/terminal.go	/^type jumpMode int$/;"	t	package:fzf	typeref:typename:int
jumping	plugged/fzf/src/terminal.go	/^	jumping      jumpMode$/;"	m	struct:fzf.Terminal	typeref:typename:jumpMode
k	ftplugin/todo.vim	/^nnoremap <buffer> k gk$/;"	m
keepRight	plugged/fzf/src/terminal.go	/^	keepRight    bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
keyMatch	plugged/fzf/src/terminal.go	/^func keyMatch(key tui.Event, event tui.Event) bool {$/;"	f	package:fzf	typeref:typename:bool
keymap	plugged/fzf/src/terminal.go	/^	keymap       map[tui.Event][]action$/;"	m	struct:fzf.Terminal	typeref:typename:map[tui.Event][]action
kill	plugged/fzf/test/test_go.rb	/^  def kill$/;"	f	class:Tmux
killChan	plugged/fzf/src/terminal.go	/^	killChan     chan int$/;"	m	struct:fzf.Terminal	typeref:typename:chan int
killPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) killPreview(code int) {$/;"	f	struct:fzf.Terminal
killed	plugged/fzf/src/reader.go	/^	killed   bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
kotlin_language_server	plugged/nvim-lspconfig/CONFIG.md	/^## kotlin_language_server$/;"	s	chapter:Configurations
label	plugged/fzf/src/terminal.go	/^	label    string$/;"	m	struct:fzf.itemLine	typeref:typename:string
landscape	plugged/lightline.vim/colorscheme.md	/^### landscape$/;"	S	chapter:Available Colorschemes
lastChunk	plugged/fzf/src/chunklist.go	/^func (cl *ChunkList) lastChunk() *Chunk {$/;"	f	struct:fzf.ChunkList	typeref:typename:*Chunk
lastX	plugged/fzf/src/tui/tcell.go	/^	lastX       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lastY	plugged/fzf/src/tui/tcell.go	/^	lastY       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
layout	plugged/fzf/src/terminal.go	/^	layout       layoutType$/;"	m	struct:fzf.Terminal	typeref:typename:layoutType
layoutDefault	plugged/fzf/src/options.go	/^	layoutDefault layoutType = iota$/;"	c	package:fzf	typeref:type:layoutType
layoutReverse	plugged/fzf/src/options.go	/^	layoutReverse$/;"	c	package:fzf
layoutReverseList	plugged/fzf/src/options.go	/^	layoutReverseList$/;"	c	package:fzf
layoutType	plugged/fzf/src/options.go	/^type layoutType int$/;"	t	package:fzf	typeref:typename:int
lbg	plugged/fzf/src/ansi.go	/^	lbg  tui.Color$/;"	m	struct:fzf.ansiState	typeref:typename:tui.Color
lean3ls	plugged/nvim-lspconfig/CONFIG.md	/^## lean3ls$/;"	s	chapter:Configurations
leanls	plugged/nvim-lspconfig/CONFIG.md	/^## leanls$/;"	s	chapter:Configurations
left	plugged/fzf/src/tui/light.go	/^	left     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
left	plugged/fzf/src/tui/tcell.go	/^	left        int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
lightline	plugged/lightline.vim/autoload/lightline.vim	/^  augroup lightline$/;"	a
lightline	plugged/lightline.vim/autoload/lightline.vim	/^  augroup lightline-disable$/;"	a
lightline	plugged/lightline.vim/plugin/lightline.vim	/^augroup lightline$/;"	a
lightline#colorscheme	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#colorscheme() abort$/;"	f
lightline#colorscheme#background	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^  function! lightline#colorscheme#background() abort$/;"	f
lightline#colorscheme#fill	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#fill(p) abort$/;"	f
lightline#colorscheme#flatten	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! lightline#colorscheme#flatten(p) abort$/;"	f
lightline#colortable#gui2cui	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui(rgb, fallback) abort$/;"	f
lightline#colortable#gui2cui_palette	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#gui2cui_palette(palette) abort$/;"	f
lightline#colortable#name_to_rgb	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! lightline#colortable#name_to_rgb(name) abort$/;"	f
lightline#concatenate	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#concatenate(xs, right) abort$/;"	f
lightline#disable	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#disable() abort$/;"	f
lightline#enable	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#enable() abort$/;"	f
lightline#error	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#error(msg) abort$/;"	f
lightline#highlight	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#highlight(...) abort$/;"	f
lightline#init	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#init() abort$/;"	f
lightline#link	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#link(...) abort$/;"	f
lightline#mode	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#mode() abort$/;"	f
lightline#onetab	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#onetab(n, active) abort$/;"	f
lightline#palette	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#palette() abort$/;"	f
lightline#statusline	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#statusline(inactive) abort$/;"	f
lightline#tab#filename	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#filename(n) abort$/;"	f
lightline#tab#modified	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#modified(n) abort$/;"	f
lightline#tab#readonly	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#readonly(n) abort$/;"	f
lightline#tab#tabnum	plugged/lightline.vim/autoload/lightline/tab.vim	/^function! lightline#tab#tabnum(n) abort$/;"	f
lightline#tabline	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#tabline() abort$/;"	f
lightline#tabs	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#tabs() abort$/;"	f
lightline#toggle	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#toggle() abort$/;"	f
lightline#update	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#update() abort$/;"	f
lightline#update_disable	plugged/lightline.vim/autoload/lightline.vim	/^function! lightline#update_disable() abort$/;"	f
lightline.Custom	plugged/lightline.vim/test/expand.vim	/^  function! g:lightline.Custom()$/;"	f
lightline.vim	plugged/lightline.vim/README.md	/^# lightline.vim$/;"	c
line	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let line = getline('.')$/;"	v
line	plugged/fzf/src/terminal.go	/^	line string$/;"	m	struct:fzf.eachLine	typeref:typename:string
linenr	plugged/delimitMate/test/autoclose_quotes.vim	/^  let linenr += 1$/;"	v
linenr	plugged/delimitMate/test/autoclose_quotes.vim	/^let linenr = 0$/;"	v
lines	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	plugged/delimitMate/test/autoclose_quotes.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	plugged/delimitMate/test/expand_cr.vim	/^  let lines = getline(1, line('$'))$/;"	v
lines	plugged/delimitMate/test/expand_cr.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	plugged/delimitMate/test/expand_space.vim	/^  let lines = getline(1, line('$'))$/;"	v
lines	plugged/delimitMate/test/expand_space.vim	/^let lines = readfile(expand('<sfile>:t:r').'.txt')$/;"	v
lines	plugged/fzf/src/history.go	/^	lines    []string$/;"	m	struct:fzf.History	typeref:typename:[]string
lines	plugged/fzf/src/terminal.go	/^	lines      []string$/;"	m	struct:fzf.previewer	typeref:typename:[]string
lines	plugged/fzf/src/terminal.go	/^	lines   []string$/;"	m	struct:fzf.previewResult	typeref:typename:[]string
link_fzf_in_path	plugged/fzf/install	/^link_fzf_in_path() {$/;"	f
lint	plugged/nvim-lspconfig/Makefile	/^lint:$/;"	t
list	plugged/fzf/src/terminal.go	/^	list     []*Item$/;"	m	struct:fzf.previewRequest	typeref:typename:[]*Item
lists	plugged/fzf/src/merger.go	/^	lists   [][]Result$/;"	m	struct:fzf.Merger	typeref:typename:[][]Result
load_plugins	plugged/nvim-lspconfig/test/minimal_init.lua	/^local function load_plugins()$/;"	f
loaded_supertab	plugged/supertab/plugin/supertab.vim	/^let loaded_supertab = 1$/;"	v
lspinfo	plugged/nvim-lspconfig/lua/lspconfig/hls.lua	/^    lspinfo = function(cfg)$/;"	f
macros,macro definitions	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*macro_rules![ \\t]+([a-zA-Z0-9_]+)\/\\1\/d,macros,macro definitions\/$/;"	k	langdef:Rust
main	plugged/ale/test/script/block-padding-checker	/^def main():$/;"	f
main	plugged/ale/test/script/dumb_named_pipe_server.py	/^def main():$/;"	f
main	plugged/ale/test/script/dumb_tcp_client.py	/^def main():$/;"	f
main	plugged/ale/test/script/dumb_tcp_server.py	/^def main():$/;"	f
main	plugged/fzf/main.go	/^func main() {$/;"	f	package:main
main	plugged/fzf/main.go	/^package main$/;"	p
main	plugged/rust.vim/test/run-tests	/^def main():$/;"	f
makeSpace	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) makeSpace() {$/;"	f	struct:tui.LightRenderer
makeSpinner	plugged/fzf/src/terminal.go	/^func makeSpinner(unicode bool) []string {$/;"	f	package:fzf	typeref:typename:[]string
make_client_info	plugged/nvim-lspconfig/lua/lspconfig/lspinfo.lua	/^  local function make_client_info(client)$/;"	f
make_cmd	plugged/nvim-lspconfig/lua/lspconfig/powershell_es.lua	/^local function make_cmd(bundle_path)$/;"	f
make_config	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^    local make_config = function(_root_dir)$/;"	f
make_floating_popup_options	plugged/completion-nvim/lua/completion/hover.lua	/^local make_floating_popup_options = function(width, height, opts)$/;"	f
make_implemented_servers_list	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function make_implemented_servers_list()$/;"	f
make_lsp_sections	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function make_lsp_sections()$/;"	f
make_parts	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function make_parts(fns)$/;"	f
make_section	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function make_section(indentlvl, sep, parts)$/;"	f
manager	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^    local manager = util.server_per_root_dir_manager(function(_root_dir)$/;"	f
manager.add	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  function manager.add(root_dir)$/;"	f
manager.clients	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  function manager.clients()$/;"	f
manager.debug	plugged/completion-nvim/lua/completion/manager.lua	/^function manager.debug()$/;"	f
manager.init	plugged/completion-nvim/lua/completion/manager.lua	/^function manager.init()$/;"	f
manager.try_add	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^    function manager.try_add(bufnr)$/;"	f
manager.try_add_wrapper	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^    function manager.try_add_wrapper(bufnr)$/;"	f
map	init.lua	/^local function map(mode, lhs, rhs, opts)$/;"	f
map	plugged/supertab/plugin/supertab.vim	/^      let map = maparg('<cr>', 'i')$/;"	v
map	plugged/supertab/plugin/supertab.vim	/^      let map = s:ExpandMap(map)$/;"	v
map_dict	plugged/supertab/plugin/supertab.vim	/^      let map_dict = maparg('<cr>', 'i', 0, 1)$/;"	v
map_list	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function map_list(t, func)$/;"	f
mapleader	init.vim	/^let mapleader = " "$/;"	v
margin	plugged/fzf/src/terminal.go	/^	margin       [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
marker	plugged/fzf/src/terminal.go	/^	marker       string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerEmpty	plugged/fzf/src/terminal.go	/^	markerEmpty  string$/;"	m	struct:fzf.Terminal	typeref:typename:string
markerLen	plugged/fzf/src/terminal.go	/^	markerLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
matchChunk	plugged/fzf/src/pattern.go	/^func (p *Pattern) matchChunk(chunk *Chunk, space []Result, slab *util.Slab) []Result {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Result
matchControlSequence	plugged/fzf/src/ansi.go	/^func matchControlSequence(s string) int {$/;"	f	package:fzf	typeref:typename:int
matchOperatingSystemCommand	plugged/fzf/src/ansi.go	/^func matchOperatingSystemCommand(s string) int {$/;"	f	package:fzf	typeref:typename:int
match_count	plugged/fzf/test/test_go.rb	/^          def match_count$/;"	f	method:Tmux.until
matcher	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function matcher(path)$/;"	f
matches	plugged/fzf/src/matcher.go	/^	matches []Result$/;"	m	struct:fzf.partialResult	typeref:typename:[]Result
materia	plugged/lightline.vim/colorscheme.md	/^### materia$/;"	S	chapter:Available Colorschemes
material	plugged/lightline.vim/colorscheme.md	/^### material$/;"	S	chapter:Available Colorschemes
maxHeightFunc	plugged/fzf/src/tui/light.go	/^	maxHeightFunc func(int) int$/;"	m	struct:tui.LightRenderer	typeref:typename:func(int) int
maxInputBuffer	plugged/fzf/src/tui/light.go	/^	maxInputBuffer  = 10 * 1024$/;"	c	package:tui
maxItems	plugged/fzf/src/terminal.go	/^func (t *Terminal) maxItems() int {$/;"	f	struct:fzf.Terminal	typeref:typename:int
maxMulti	plugged/fzf/src/constants.go	/^	maxMulti          = math.MaxInt32$/;"	c	package:fzf
maxPartitions	plugged/fzf/src/constants.go	/^	maxPartitions           = 32$/;"	c	package:fzf
maxPatternLength	plugged/fzf/src/constants.go	/^	maxPatternLength  = 300$/;"	c	package:fzf
maxSize	plugged/fzf/src/history.go	/^	maxSize  int$/;"	m	struct:fzf.History	typeref:typename:int
merge	plugged/fzf/src/tui/tui.go	/^func (p ColorPair) merge(other ColorPair, except Color) ColorPair {$/;"	f	struct:tui.ColorPair	typeref:typename:ColorPair
merged	plugged/fzf/src/merger.go	/^	merged  []Result$/;"	m	struct:fzf.Merger	typeref:typename:[]Result
mergedGet	plugged/fzf/src/merger.go	/^func (mg *Merger) mergedGet(idx int) Result {$/;"	f	struct:fzf.Merger	typeref:typename:Result
merger	plugged/fzf/src/terminal.go	/^	merger       *Merger$/;"	m	struct:fzf.Terminal	typeref:typename:*Merger
mergerCache	plugged/fzf/src/matcher.go	/^	mergerCache    map[string]*Merger$/;"	m	struct:fzf.Matcher	typeref:typename:map[string]*Merger
mergerCacheMax	plugged/fzf/src/constants.go	/^	mergerCacheMax int = 100000$/;"	c	package:fzf	typeref:typename:int
meson_matcher	plugged/nvim-lspconfig/lua/lspconfig/vala_ls.lua	/^local meson_matcher = function(path)$/;"	f
metals	plugged/nvim-lspconfig/CONFIG.md	/^## metals$/;"	s	chapter:Configurations
minHeight	plugged/fzf/src/terminal.go	/^	minHeight = 4$/;"	c	package:fzf
minItem	plugged/fzf/src/item.go	/^var minItem = Item{text: util.Chars{Index: -1}}$/;"	v	package:fzf
minRank	plugged/fzf/src/result.go	/^func minRank() Result {$/;"	f	package:fzf	typeref:typename:Result
minWidth	plugged/fzf/src/terminal.go	/^	minWidth  = 4$/;"	c	package:fzf
modified	plugged/fzf/src/history.go	/^	modified map[int]string$/;"	m	struct:fzf.History	typeref:typename:map[int]string
modules,module names	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?mod[ \\t]+([a-zA-Z0-9_]+)\/\\2\/m,modules,module names\/$/;"	k	langdef:Rust
molokai	plugged/lightline.vim/colorscheme.md	/^### molokai$/;"	S	chapter:Available Colorschemes
more tips	plugged/lightline.vim/README.md	/^### more tips$/;"	S	section:lightline.vim""Advanced configuration
mouse	plugged/fzf/src/tui/light.go	/^	mouse         bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
mouse	plugged/fzf/src/tui/tui.go	/^	mouse        bool$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:bool
mouseSequence	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) mouseSequence(sz *int) Event {$/;"	f	struct:tui.LightRenderer	typeref:typename:Event
move	plugged/fzf/src/terminal.go	/^func (t *Terminal) move(y int, x int, clear bool) {$/;"	f	struct:fzf.Terminal
move	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) move(y int, x int) {$/;"	f	struct:tui.LightRenderer
moveCursor	plugged/fzf/src/tui/tcell.go	/^	moveCursor  bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
mt:__index	plugged/nvim-lspconfig/lua/lspconfig.lua	/^function mt:__index(k)$/;"	f
multi	plugged/fzf/src/terminal.go	/^	multi        int$/;"	m	struct:fzf.Terminal	typeref:typename:int
mutex	plugged/fzf/src/cache.go	/^	mutex sync.Mutex$/;"	m	struct:fzf.ChunkCache	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/chunklist.go	/^	mutex  sync.Mutex$/;"	m	struct:fzf.ChunkList	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/reader.go	/^	mutex    sync.Mutex$/;"	m	struct:fzf.Reader	typeref:typename:sync.Mutex
mutex	plugged/fzf/src/terminal.go	/^	mutex        sync.Mutex$/;"	m	struct:fzf.Terminal	typeref:typename:sync.Mutex
n	plugged/vim-slash/plugin/slash.vim	/^map  <expr> n    <sid>wrap('n')$/;"	m
natures	plugged/supertab/ftplugin/html.vim	/^        let natures = eclim#project#util#GetProjectNatureAliases(project)$/;"	v
newItem	plugged/fzf/src/terminal_test.go	/^func newItem(str string) *Item {$/;"	f	package:fzf	typeref:typename:*Item
newRange	plugged/fzf/src/tokenizer.go	/^func newRange(begin int, end int) Range {$/;"	f	package:fzf	typeref:typename:Range
new_config.on_attach	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^      new_config.on_attach = vim.schedule_wrap(function(client, bufnr)$/;"	f
new_config.on_exit	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^      new_config.on_exit = M.add_hook_before(new_config.on_exit, function()$/;"	f
new_config.on_init	plugged/nvim-lspconfig/lua/lspconfig/configs.lua	/^      new_config.on_init = util.add_hook_after(new_config.on_init, function(client, _result)$/;"	f
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestBash
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestFish
new_shell	plugged/fzf/test/test_go.rb	/^  def new_shell$/;"	f	class:TestZsh
next	plugged/fzf/src/history.go	/^func (h *History) next() string {$/;"	f	struct:fzf.History	typeref:typename:string
nextAnsiEscapeSequence	plugged/fzf/src/ansi.go	/^func nextAnsiEscapeSequence(s string) (int, int) {$/;"	f	package:fzf	typeref:typename:(int, int)
nextInt	plugged/fzf/src/options.go	/^func nextInt(args []string, i *int, message string) int {$/;"	f	package:fzf	typeref:typename:int
nextString	plugged/fzf/src/options.go	/^func nextString(args []string, i *int, message string) string {$/;"	f	package:fzf	typeref:typename:string
nimls	plugged/nvim-lspconfig/CONFIG.md	/^## nimls$/;"	s	chapter:Configurations
noInfoLine	plugged/fzf/src/terminal.go	/^func (t *Terminal) noInfoLine() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
nord	plugged/lightline.vim/colorscheme.md	/^### nord$/;"	S	chapter:Available Colorschemes
normal	plugged/fzf/src/tui/tcell.go	/^	normal      ColorPair$/;"	m	struct:tui.TcellWindow	typeref:typename:ColorPair
normalize	plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
normalize	plugged/fzf/src/pattern.go	/^	normalize     bool$/;"	m	struct:fzf.term	typeref:typename:bool
normalizeRune	plugged/fzf/src/algo/algo.go	/^func normalizeRune(r rune) rune {$/;"	f	package:algo	typeref:typename:rune
normalized	plugged/fzf/src/algo/normalize.go	/^var normalized map[rune]rune = map[rune]rune{$/;"	v	package:algo	typeref:typename:map[rune]rune
notifyOnCont	plugged/fzf/src/terminal_unix.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnCont	plugged/fzf/src/terminal_windows.go	/^func notifyOnCont(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	plugged/fzf/src/terminal_unix.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyOnResize	plugged/fzf/src/terminal_windows.go	/^func notifyOnResize(resizeChan chan<- os.Signal) {$/;"	f	package:fzf
notifyStop	plugged/fzf/src/terminal_unix.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
notifyStop	plugged/fzf/src/terminal_windows.go	/^func notifyStop(p *os.Process) {$/;"	f	package:fzf
npcall	plugged/completion-nvim/lua/completion/hover.lua	/^local function npcall(fn, ...)$/;"	f
nth	plugged/fzf/src/pattern.go	/^	nth           []Range$/;"	m	struct:fzf.Pattern	typeref:typename:[]Range
numLines	plugged/fzf/src/terminal.go	/^	numLines int$/;"	m	struct:fzf.previewed	typeref:typename:int
numPartitionsMultiplier	plugged/fzf/src/constants.go	/^	numPartitionsMultiplier = 8$/;"	c	package:fzf
number	plugged/fzf/src/terminal.go	/^	number        bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
nvim-lspconfig	plugged/nvim-lspconfig/README.md	/^# nvim-lspconfig$/;"	c
o	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> o <NOP>$/;"	m
ocamlls	plugged/nvim-lspconfig/CONFIG.md	/^## ocamlls$/;"	s	chapter:Configurations
ocamllsp	plugged/nvim-lspconfig/CONFIG.md	/^## ocamllsp$/;"	s	chapter:Configurations
offset	plugged/fzf/src/ansi.go	/^	offset [2]int32$/;"	m	struct:fzf.ansiOffset	typeref:typename:[2]int32
offset	plugged/fzf/src/result.go	/^	offset [2]int32$/;"	m	struct:fzf.colorOffset	typeref:typename:[2]int32
offset	plugged/fzf/src/terminal.go	/^	offset       int$/;"	m	struct:fzf.Terminal	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset     int$/;"	m	struct:fzf.previewer	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset   int$/;"	m	struct:fzf.previewed	typeref:typename:int
offset	plugged/fzf/src/terminal.go	/^	offset  int$/;"	m	struct:fzf.previewResult	typeref:typename:int
offsetComponentRegex	plugged/fzf/src/terminal.go	/^var offsetComponentRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
offsetPollTries	plugged/fzf/src/tui/light.go	/^	offsetPollTries = 10$/;"	c	package:tui
offsetRegexp	plugged/fzf/src/tui/light.go	/^var offsetRegexp *regexp.Regexp = regexp.MustCompile("(.*)\\x1b\\\\[([0-9]+);([0-9]+)R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetRegexpBegin	plugged/fzf/src/tui/light.go	/^var offsetRegexpBegin *regexp.Regexp = regexp.MustCompile("^\\x1b\\\\[[0-9]+;[0-9]+R")$/;"	v	package:tui	typeref:typename:*regexp.Regexp
offsetTrimCharsRegex	plugged/fzf/src/terminal.go	/^var offsetTrimCharsRegex *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
ok_or_nil	plugged/completion-nvim/lua/completion/hover.lua	/^local function ok_or_nil(status, ...)$/;"	f
omnisharp	plugged/nvim-lspconfig/CONFIG.md	/^## omnisharp$/;"	s	chapter:Configurations
onDirScanned	plugged/completion-nvim/lua/completion/source/path.lua	/^local function onDirScanned(_, data)$/;"	f
on_attach	init.lua	/^local on_attach = function(client, bufnr)$/;"	f
on_attach	plugged/nvim-lspconfig/test/minimal_init.lua	/^  local on_attach = function(_, bufnr)$/;"	f
on_init	plugged/nvim-lspconfig/lua/lspconfig/clangd.lua	/^      on_init = [[function to handle changing offsetEncoding]],$/;"	f
on_init	plugged/nvim-lspconfig/lua/lspconfig/clangd.lua	/^    on_init = function(client, result)$/;"	f
on_language_status	plugged/nvim-lspconfig/lua/lspconfig/jdtls.lua	/^local function on_language_status(_, _, result)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/angularls.lua	/^  on_new_config = function(new_config, new_root_dir)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/angularls.lua	/^  on_new_config = function(new_config,new_root_dir)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/codeqlls.lua	/^  on_new_config = function(config)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/julials.lua	/^    on_new_config = function(new_config, _)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/julials.lua	/^    on_new_config = function(new_config,new_root_dir)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/lean3ls.lua	/^    on_new_config = function(config, root)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/leanls.lua	/^    on_new_config = function(config, root)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/powershell_es.lua	/^    on_new_config = function(new_config, _)$/;"	f
on_new_config	plugged/nvim-lspconfig/lua/lspconfig/tailwindcss.lua	/^    on_new_config = function(new_config)$/;"	f
one (`background=dark`)	plugged/lightline.vim/README.md	/^### one (`background=dark`)$/;"	S	chapter:lightline.vim
one (`background=dark`)	plugged/lightline.vim/colorscheme.md	/^### one (`background=dark`)$/;"	S	chapter:Available Colorschemes
one (`background=light`)	plugged/lightline.vim/README.md	/^### one (`background=light`)$/;"	S	chapter:lightline.vim
one (`background=light`)	plugged/lightline.vim/colorscheme.md	/^### one (`background=light`)$/;"	S	chapter:Available Colorschemes
openTtyIn	plugged/fzf/src/tui/light_unix.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
openTtyIn	plugged/fzf/src/tui/light_windows.go	/^func openTtyIn() *os.File {$/;"	f	package:tui	typeref:typename:*os.File
optString	plugged/fzf/src/options.go	/^func optString(arg string, prefixes ...string) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNextString	plugged/fzf/src/options.go	/^func optionalNextString(args []string, i *int) (bool, string) {$/;"	f	package:fzf	typeref:typename:(bool, string)
optionalNumeric	plugged/fzf/src/options.go	/^func optionalNumeric(args []string, i *int, defaultValue int) int {$/;"	f	package:fzf	typeref:typename:int
optionalRunes	plugged/fzf/src/util/chars.go	/^func (chars *Chars) optionalRunes() []rune {$/;"	f	struct:util.Chars	typeref:typename:[]rune
opts.sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! opts.sink(lines)$/;"	f
opts.sinklist	plugged/fzf/plugin/fzf.vim	/^    function! opts.sinklist(lines) abort$/;"	f
optsFor	plugged/fzf/src/options_test.go	/^func optsFor(words ...string) *Options {$/;"	f	package:fzf	typeref:typename:*Options
organize_imports	plugged/nvim-lspconfig/lua/lspconfig/pyright.lua	/^local function organize_imports()$/;"	f
origState	plugged/fzf/src/tui/light.go	/^	origState     *term.State$/;"	m	struct:tui.LightRenderer	typeref:typename:*term.State
origStateInput	plugged/fzf/src/tui/light.go	/^	origStateInput  uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origStateOutput	plugged/fzf/src/tui/light.go	/^	origStateOutput uint32$/;"	m	struct:tui.LightRenderer	typeref:typename:uint32
origText	plugged/fzf/src/item.go	/^	origText    *[]byte       \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]byte
origin	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) origin() {$/;"	f	struct:tui.LightRenderer
outHandle	plugged/fzf/src/tui/light.go	/^	outHandle       uintptr$/;"	m	struct:tui.LightRenderer	typeref:typename:uintptr
output	plugged/fzf/src/terminal.go	/^func (t *Terminal) output() bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
output2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output, '(', s:l, 'g')$/;"	v
output2	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let output2 = substitute(output2, ')', s:r, 'g')$/;"	v
output_q	plugged/delimitMate/test/autoclose_quotes.vim	/^    let output_q = substitute(output,"'" , escape(escape(quote, '"'), '\\'), 'g')$/;"	v
overflow	plugged/fzf/src/terminal.go	/^func (t *Terminal) overflow(runes []rune, max int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
overflow32	plugged/fzf/src/util/chars.go	/^	overflow32 uint32 = 0x80808080$/;"	c	package:util	typeref:typename:uint32
overflow64	plugged/fzf/src/util/chars.go	/^	overflow64 uint64 = 0x8080808080808080$/;"	c	package:util	typeref:typename:uint64
override	plugged/fzf/src/history.go	/^func (h *History) override(str string) {$/;"	f	struct:fzf.History
overview	plugged/supertab/README.rst	/^.. _overview:$/;"	T
padding	plugged/fzf/src/terminal.go	/^	padding      [4]sizeSpec$/;"	m	struct:fzf.Terminal	typeref:typename:[4]sizeSpec
parseAlgo	plugged/fzf/src/options.go	/^func parseAlgo(str string) algo.Algo {$/;"	f	package:fzf	typeref:typename:algo.Algo
parseAnsiCode	plugged/fzf/src/ansi.go	/^func parseAnsiCode(s string) (int, string) {$/;"	f	package:fzf	typeref:typename:(int, string)
parseBorder	plugged/fzf/src/options.go	/^func parseBorder(str string, optional bool) tui.BorderShape {$/;"	f	package:fzf	typeref:typename:tui.BorderShape
parseHeight	plugged/fzf/src/options.go	/^func parseHeight(str string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseInfoStyle	plugged/fzf/src/options.go	/^func parseInfoStyle(str string) infoStyle {$/;"	f	package:fzf	typeref:typename:infoStyle
parseKeyChords	plugged/fzf/src/options.go	/^func parseKeyChords(str string, message string) map[tui.Event]string {$/;"	f	package:fzf	typeref:typename:map[tui.Event]string
parseKeymap	plugged/fzf/src/options.go	/^func parseKeymap(keymap map[tui.Event][]action, str string) {$/;"	f	package:fzf
parseLayout	plugged/fzf/src/options.go	/^func parseLayout(str string) layoutType {$/;"	f	package:fzf	typeref:typename:layoutType
parseMargin	plugged/fzf/src/options.go	/^func parseMargin(opt string, margin string) [4]sizeSpec {$/;"	f	package:fzf	typeref:typename:[4]sizeSpec
parseOptions	plugged/fzf/src/options.go	/^func parseOptions(opts *Options, allArgs []string) {$/;"	f	package:fzf
parsePlaceholder	plugged/fzf/src/terminal.go	/^func parsePlaceholder(match string) (bool, string, placeholderFlags) {$/;"	f	package:fzf	typeref:typename:(bool, string, placeholderFlags)
parsePreviewWindow	plugged/fzf/src/options.go	/^func parsePreviewWindow(opts *previewOpts, input string) {$/;"	f	package:fzf
parsePrompt	plugged/fzf/src/terminal.go	/^func (t *Terminal) parsePrompt(prompt string) (func(), int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(func(), int)
parseSize	plugged/fzf/src/options.go	/^func parseSize(str string, maxPercent float64, label string) sizeSpec {$/;"	f	package:fzf	typeref:typename:sizeSpec
parseTerms	plugged/fzf/src/pattern.go	/^func parseTerms(fuzzy bool, caseMode Case, normalize bool, str string) []termSet {$/;"	f	package:fzf	typeref:typename:[]termSet
parseTheme	plugged/fzf/src/options.go	/^func parseTheme(defaultTheme *tui.ColorTheme, str string) *tui.ColorTheme {$/;"	f	package:fzf	typeref:typename:*tui.ColorTheme
parseTiebreak	plugged/fzf/src/options.go	/^func parseTiebreak(str string) []criterion {$/;"	f	package:fzf	typeref:typename:[]criterion
parseToggleSort	plugged/fzf/src/options.go	/^func parseToggleSort(keymap map[tui.Event][]action, str string) {$/;"	f	package:fzf
partialResult	plugged/fzf/src/matcher.go	/^type partialResult struct {$/;"	s	package:fzf
partitions	plugged/fzf/src/matcher.go	/^	partitions     int$/;"	m	struct:fzf.Matcher	typeref:typename:int
passed	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let passed = line == eval(output2)$/;"	v
passed	plugged/delimitMate/test/expand_cr.vim	/^  let passed = lines == expected$/;"	v
passed	plugged/delimitMate/test/expand_space.vim	/^  let passed = lines == expected$/;"	v
paste	plugged/fzf/test/test_go.rb	/^  def paste(str)$/;"	f	class:Tmux
path	plugged/fzf/src/history.go	/^	path     string$/;"	m	struct:fzf.History	typeref:typename:string
path_join	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function path_join(...)$/;"	f
pattern	plugged/fzf/src/matcher.go	/^	pattern    *Pattern$/;"	m	struct:fzf.MatchRequest	typeref:typename:*Pattern
pattern	plugged/fzf/src/merger.go	/^	pattern *Pattern$/;"	m	struct:fzf.Merger	typeref:typename:*Pattern
patternBuilder	plugged/fzf/src/matcher.go	/^	patternBuilder func([]rune) *Pattern$/;"	m	struct:fzf.Matcher	typeref:typename:func([]rune) *Pattern
paused	plugged/fzf/src/terminal.go	/^	paused       bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
pborder	plugged/fzf/src/terminal.go	/^	pborder      tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
percent	plugged/fzf/src/options.go	/^	percent bool$/;"	m	struct:fzf.sizeSpec	typeref:typename:bool
perlls	plugged/nvim-lspconfig/CONFIG.md	/^## perlls$/;"	s	chapter:Configurations
perlpls	plugged/nvim-lspconfig/CONFIG.md	/^## perlpls$/;"	s	chapter:Configurations
phpactor	plugged/nvim-lspconfig/CONFIG.md	/^## phpactor$/;"	s	chapter:Configurations
placeCursor	plugged/fzf/src/terminal.go	/^func (t *Terminal) placeCursor() {$/;"	f	struct:fzf.Terminal
placeholder	plugged/fzf/src/terminal.go	/^var placeholder *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
placeholderFlags	plugged/fzf/src/terminal.go	/^type placeholderFlags struct {$/;"	s	package:fzf
plus	plugged/fzf/src/terminal.go	/^	plus          bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pointer	plugged/fzf/src/terminal.go	/^	pointer      string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerEmpty	plugged/fzf/src/terminal.go	/^	pointerEmpty string$/;"	m	struct:fzf.Terminal	typeref:typename:string
pointerLen	plugged/fzf/src/terminal.go	/^	pointerLen   int$/;"	m	struct:fzf.Terminal	typeref:typename:int
points	plugged/fzf/src/result.go	/^	points [4]uint16$/;"	m	struct:fzf.Result	typeref:typename:[4]uint16
posArray	plugged/fzf/src/algo/algo.go	/^func posArray(withPos bool, len int) *[]int {$/;"	f	package:algo	typeref:typename:*[]int
posDown	plugged/fzf/src/options.go	/^	posDown$/;"	c	package:fzf
posLeft	plugged/fzf/src/options.go	/^	posLeft$/;"	c	package:fzf
posRight	plugged/fzf/src/options.go	/^	posRight$/;"	c	package:fzf
posUp	plugged/fzf/src/options.go	/^	posUp windowPosition = iota$/;"	c	package:fzf	typeref:type:windowPosition
position	plugged/fzf/src/options.go	/^	position    windowPosition$/;"	m	struct:fzf.previewOpts	typeref:typename:windowPosition
postProcessOptions	plugged/fzf/src/options.go	/^func postProcessOptions(opts *Options) {$/;"	f	package:fzf
posx	plugged/fzf/src/tui/light.go	/^	posx     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
posy	plugged/fzf/src/tui/light.go	/^	posy     int$/;"	m	struct:tui.LightWindow	typeref:typename:int
powerline (default)	plugged/lightline.vim/README.md	/^### powerline (default)$/;"	S	chapter:lightline.vim
powerline (default)	plugged/lightline.vim/colorscheme.md	/^### powerline (default)$/;"	S	chapter:Available Colorschemes
powerlineish	plugged/lightline.vim/colorscheme.md	/^### powerlineish$/;"	S	chapter:Available Colorschemes
powershell_es	plugged/nvim-lspconfig/CONFIG.md	/^## powershell_es$/;"	s	chapter:Configurations
prefixLength	plugged/fzf/src/tokenizer.go	/^	prefixLength int32$/;"	m	struct:fzf.Token	typeref:typename:int32
prep	plugged/rust.vim/test/run-tests	/^def prep():$/;"	f
prepare	plugged/fzf/test/test_go.rb	/^  def prepare$/;"	f	class:Tmux
preserveSpace	plugged/fzf/src/terminal.go	/^	preserveSpace bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
pressed	plugged/fzf/src/terminal.go	/^	pressed      string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prevDownTime	plugged/fzf/src/tui/light.go	/^	prevDownTime  time.Time$/;"	m	struct:tui.LightRenderer	typeref:typename:time.Time
prevDownTime	plugged/fzf/src/tui/tui.go	/^	prevDownTime time.Time$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:time.Time
prevLines	plugged/fzf/src/terminal.go	/^	prevLines    []itemLine$/;"	m	struct:fzf.Terminal	typeref:typename:[]itemLine
preview	plugged/fzf/src/tui/light.go	/^	preview  bool$/;"	m	struct:tui.LightWindow	typeref:typename:bool
preview	plugged/fzf/src/tui/tcell.go	/^	preview     bool$/;"	m	struct:tui.TcellWindow	typeref:typename:bool
previewBox	plugged/fzf/src/terminal.go	/^	previewBox   *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
previewCancelWait	plugged/fzf/src/constants.go	/^	previewCancelWait = 500 * time.Millisecond$/;"	c	package:fzf
previewChunkDelay	plugged/fzf/src/constants.go	/^	previewChunkDelay = 100 * time.Millisecond$/;"	c	package:fzf
previewDelayed	plugged/fzf/src/constants.go	/^	previewDelayed    = 500 * time.Millisecond$/;"	c	package:fzf
previewOpts	plugged/fzf/src/options.go	/^type previewOpts struct {$/;"	s	package:fzf
previewOpts	plugged/fzf/src/terminal.go	/^	previewOpts  previewOpts$/;"	m	struct:fzf.Terminal	typeref:typename:previewOpts
previewRequest	plugged/fzf/src/terminal.go	/^type previewRequest struct {$/;"	s	package:fzf
previewResult	plugged/fzf/src/terminal.go	/^type previewResult struct {$/;"	s	package:fzf
previewed	plugged/fzf/src/terminal.go	/^	previewed    previewed$/;"	m	struct:fzf.Terminal	typeref:typename:previewed
previewed	plugged/fzf/src/terminal.go	/^type previewed struct {$/;"	s	package:fzf
previewer	plugged/fzf/src/terminal.go	/^	previewer    previewer$/;"	m	struct:fzf.Terminal	typeref:typename:previewer
previewer	plugged/fzf/src/terminal.go	/^type previewer struct {$/;"	s	package:fzf
previous	plugged/fzf/src/history.go	/^func (h *History) previous() string {$/;"	f	struct:fzf.History	typeref:typename:string
printAll	plugged/fzf/src/terminal.go	/^func (t *Terminal) printAll() {$/;"	f	struct:fzf.Terminal
printHeader	plugged/fzf/src/terminal.go	/^func (t *Terminal) printHeader() {$/;"	f	struct:fzf.Terminal
printHighlighted	plugged/fzf/src/terminal.go	/^func (t *Terminal) printHighlighted(result Result, colBase tui.ColorPair, colMatch tui.ColorPair/;"	f	struct:fzf.Terminal	typeref:typename:int
printInfo	plugged/fzf/src/terminal.go	/^func (t *Terminal) printInfo() {$/;"	f	struct:fzf.Terminal
printItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) printItem(result Result, line int, i int, current bool) {$/;"	f	struct:fzf.Terminal
printList	plugged/fzf/src/terminal.go	/^func (t *Terminal) printList() {$/;"	f	struct:fzf.Terminal
printPreview	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreview() {$/;"	f	struct:fzf.Terminal
printPreviewDelayed	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPreviewDelayed() {$/;"	f	struct:fzf.Terminal
printPrompt	plugged/fzf/src/terminal.go	/^func (t *Terminal) printPrompt() {$/;"	f	struct:fzf.Terminal
printQuery	plugged/fzf/src/terminal.go	/^	printQuery   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
printString	plugged/fzf/src/tui/tcell.go	/^func (w *TcellWindow) printString(text string, pair ColorPair) {$/;"	f	struct:tui.TcellWindow
print_help	plugged/ale/test/script/custom-linting-rules	/^function print_help() {$/;"	f
printer	plugged/fzf/src/terminal.go	/^	printer      func(string)$/;"	m	struct:fzf.Terminal	typeref:typename:func(string)
printsep	plugged/fzf/src/terminal.go	/^	printsep     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
prismals	plugged/nvim-lspconfig/CONFIG.md	/^## prismals$/;"	s	chapter:Configurations
procFun	plugged/fzf/src/pattern.go	/^	procFun       map[termType]algo.Algo$/;"	m	struct:fzf.Pattern	typeref:typename:map[termType]algo.Algo
processTabs	plugged/fzf/src/terminal.go	/^func (t *Terminal) processTabs(runes []rune, prefixWidth int) (string, int) {$/;"	f	struct:fzf.Terminal	typeref:typename:(string, int)
progress	plugged/fzf/src/terminal.go	/^	progress     int$/;"	m	struct:fzf.Terminal	typeref:typename:int
progressMinDuration	plugged/fzf/src/constants.go	/^	progressMinDuration     = 200 * time.Millisecond$/;"	c	package:fzf
project	plugged/supertab/ftplugin/html.vim	/^      let project = eclim#project#util#GetCurrentProjectName()$/;"	v
prompt	plugged/fzf/src/terminal.go	/^	prompt       func()$/;"	m	struct:fzf.Terminal	typeref:typename:func()
promptLen	plugged/fzf/src/terminal.go	/^	promptLen    int$/;"	m	struct:fzf.Terminal	typeref:typename:int
protector	plugged/fzf/src/protector/protector.go	/^package protector$/;"	p
protector	plugged/fzf/src/protector/protector_openbsd.go	/^package protector$/;"	p
puppet	plugged/nvim-lspconfig/CONFIG.md	/^## puppet$/;"	s	chapter:Configurations
purescriptls	plugged/nvim-lspconfig/CONFIG.md	/^## purescriptls$/;"	s	chapter:Configurations
push	plugged/fzf/src/chunklist.go	/^func (c *Chunk) push(trans ItemBuilder, data []byte) bool {$/;"	f	struct:fzf.Chunk	typeref:typename:bool
pusher	plugged/fzf/src/reader.go	/^	pusher   func([]byte) bool$/;"	m	struct:fzf.Reader	typeref:typename:func([]byte) bool
pwindow	plugged/fzf/src/terminal.go	/^	pwindow      tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
pwindow	plugged/fzf/src/terminal.go	/^	pwindow  tui.Window$/;"	m	struct:fzf.previewRequest	typeref:typename:tui.Window
pyls	plugged/nvim-lspconfig/CONFIG.md	/^## pyls$/;"	s	chapter:Configurations
pyls_ms	plugged/nvim-lspconfig/CONFIG.md	/^## pyls_ms$/;"	s	chapter:Configurations
pylsp	plugged/nvim-lspconfig/CONFIG.md	/^## pylsp$/;"	s	chapter:Configurations
pyright	plugged/nvim-lspconfig/CONFIG.md	/^## pyright$/;"	s	chapter:Configurations
pytest	plugged/ale/test/test-files/python/namespace_package_pytest/pytest.ini	/^[pytest]$/;"	s
q	plugged/ale/ftplugin/ale-fix-suggest.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/ale/ftplugin/ale-preview.vim	/^noremap <buffer> q :q!<CR>$/;"	m
q	plugged/vim-fugitive/autoload/fugitive.vim	/^        nnoremap <buffer> <silent> q    :<C-U>echoerr "fugitive: q is removed in favor of gq (or/;"	m
q	plugged/vim-fugitive/autoload/fugitive.vim	/^      nnoremap <buffer> <silent> q :echoerr "fugitive: q removed in favor of gq (or :q)"<CR>$/;"	m
query	plugged/fzf/src/terminal.go	/^	query         bool$/;"	m	struct:fzf.placeholderFlags	typeref:typename:bool
queryCache	plugged/fzf/src/cache.go	/^type queryCache map[string][]Result$/;"	t	package:fzf	typeref:typename:map[string][]Result
queryCacheMax	plugged/fzf/src/constants.go	/^	queryCacheMax int = chunkSize \/ 5$/;"	c	package:fzf	typeref:typename:int
queryLen	plugged/fzf/src/terminal.go	/^	queryLen     [2]int$/;"	m	struct:fzf.Terminal	typeref:typename:[2]int
queryLen	plugged/fzf/src/terminal.go	/^	queryLen int$/;"	m	struct:fzf.itemLine	typeref:typename:int
queued	plugged/fzf/src/tui/light.go	/^	queued        strings.Builder$/;"	m	struct:tui.LightRenderer	typeref:typename:strings.Builder
quoteEntry	plugged/fzf/src/terminal.go	/^func quoteEntry(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quoteEntryCmd	plugged/fzf/src/terminal.go	/^func quoteEntryCmd(entry string) string {$/;"	f	package:fzf	typeref:typename:string
quotes	plugged/delimitMate/test/autoclose_quotes.vim	/^  let quotes = split(g:delimitMate_quotes, '\\s')$/;"	v
r_language_server	plugged/nvim-lspconfig/CONFIG.md	/^## r_language_server$/;"	s	chapter:Configurations
racket_langserver	plugged/nvim-lspconfig/CONFIG.md	/^## racket_langserver$/;"	s	chapter:Configurations
randResult	plugged/fzf/src/merger_test.go	/^func randResult() Result {$/;"	f	package:fzf	typeref:typename:Result
rangeEllipsis	plugged/fzf/src/tokenizer.go	/^const rangeEllipsis = 0$/;"	c	package:fzf
readFiles	plugged/fzf/src/reader.go	/^func (r *Reader) readFiles() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromCommand	plugged/fzf/src/reader.go	/^func (r *Reader) readFromCommand(shell *string, command string) bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readFromStdin	plugged/fzf/src/reader.go	/^func (r *Reader) readFromStdin() bool {$/;"	f	struct:fzf.Reader	typeref:typename:bool
readerBufferSize	plugged/fzf/src/constants.go	/^	readerBufferSize       = 64 * 1024$/;"	c	package:fzf
readerPollIntervalMax	plugged/fzf/src/constants.go	/^	readerPollIntervalMax  = 50 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalMin	plugged/fzf/src/constants.go	/^	readerPollIntervalMin  = 10 * time.Millisecond$/;"	c	package:fzf
readerPollIntervalStep	plugged/fzf/src/constants.go	/^	readerPollIntervalStep = 5 * time.Millisecond$/;"	c	package:fzf
readfile	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function readfile(path)$/;"	f
reading	plugged/fzf/src/terminal.go	/^	reading      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
readonce	plugged/fzf/test/test_go.rb	/^  def readonce$/;"	f	class:TestBase
redraw	plugged/fzf/src/terminal.go	/^func (t *Terminal) redraw() {$/;"	f	struct:fzf.Terminal
refresh	plugged/fzf/src/terminal.go	/^func (t *Terminal) refresh() {$/;"	f	struct:fzf.Terminal
regex	plugged/fzf/src/tokenizer.go	/^	regex *regexp.Regexp$/;"	m	struct:fzf.Delimiter	typeref:typename:*regexp.Regexp
release	plugged/fzf/Makefile	/^release:$/;"	t
reload	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 0$/;"	v
reload	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let reload = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let reload = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_quotes.vim	/^    let reload = 0$/;"	v
reload	plugged/delimitMate/test/autoclose_quotes.vim	/^    let reload = 1$/;"	v
reload	plugged/delimitMate/test/autoclose_quotes.vim	/^let reload = 1$/;"	v
reload_workspace	plugged/nvim-lspconfig/lua/lspconfig/rust_analyzer.lua	/^local function reload_workspace(bufnr)$/;"	f
remove	plugged/fzf/uninstall	/^remove() {$/;"	f
remove_comment_lines	plugged/ale/test/script/block-padding-checker	/^def remove_comment_lines(line_iter):$/;"	f
remove_line	plugged/fzf/uninstall	/^remove_line() {$/;"	f
remove_newlines	plugged/nvim-lspconfig/lua/lspconfig/lspinfo.lua	/^  local function remove_newlines(cmd)$/;"	f
renderPreviewArea	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewArea(unchanged bool) {$/;"	f	struct:fzf.Terminal
renderPreviewSpinner	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewSpinner() {$/;"	f	struct:fzf.Terminal
renderPreviewText	plugged/fzf/src/terminal.go	/^func (t *Terminal) renderPreviewText(height int, lines []string, lineNo int, unchanged bool) {$/;"	f	struct:fzf.Terminal
renderer	plugged/fzf/src/tui/light.go	/^	renderer *LightRenderer$/;"	m	struct:tui.LightWindow	typeref:typename:*LightRenderer
repeat	plugged/fzf/src/tui/light.go	/^func repeat(r rune, times int) string {$/;"	f	package:tui	typeref:typename:string
repeat#errmsg	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#errmsg()$/;"	f
repeat#invalidate	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#invalidate()$/;"	f
repeat#run	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#run(count)$/;"	f
repeat#set	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#set(sequence,...)$/;"	f
repeat#setreg	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#setreg(sequence,register)$/;"	f
repeat#wrap	plugged/vim-repeat/autoload/repeat.vim	/^function! repeat#wrap(command,count)$/;"	f
repeat.vim	plugged/vim-repeat/README.markdown	/^# repeat.vim$/;"	c
repeatPlugin	plugged/vim-repeat/autoload/repeat.vim	/^augroup repeatPlugin$/;"	a
repeat_custom_motion	plugged/vim-repeat/autoload/repeat.vim	/^    augroup repeat_custom_motion$/;"	a
replacePlaceholder	plugged/fzf/src/terminal.go	/^func (t *Terminal) replacePlaceholder(template string, forcePlus bool, input string, list []*Ite/;"	f	struct:fzf.Terminal	typeref:typename:string
replacePlaceholder	plugged/fzf/src/terminal.go	/^func replacePlaceholder(template string, stripAnsi bool, delimiter Delimiter, printsep string, f/;"	f	package:fzf	typeref:typename:string
reqBox	plugged/fzf/src/matcher.go	/^	reqBox         *util.EventBox$/;"	m	struct:fzf.Matcher	typeref:typename:*util.EventBox
reqBox	plugged/fzf/src/terminal.go	/^	reqBox       *util.EventBox$/;"	m	struct:fzf.Terminal	typeref:typename:*util.EventBox
reqClose	plugged/fzf/src/terminal.go	/^	reqClose$/;"	c	package:fzf
reqHeader	plugged/fzf/src/terminal.go	/^	reqHeader$/;"	c	package:fzf
reqInfo	plugged/fzf/src/terminal.go	/^	reqInfo$/;"	c	package:fzf
reqJump	plugged/fzf/src/terminal.go	/^	reqJump$/;"	c	package:fzf
reqList	plugged/fzf/src/terminal.go	/^	reqList$/;"	c	package:fzf
reqPreviewDelayed	plugged/fzf/src/terminal.go	/^	reqPreviewDelayed$/;"	c	package:fzf
reqPreviewDisplay	plugged/fzf/src/terminal.go	/^	reqPreviewDisplay$/;"	c	package:fzf
reqPreviewEnqueue	plugged/fzf/src/terminal.go	/^	reqPreviewEnqueue$/;"	c	package:fzf
reqPreviewRefresh	plugged/fzf/src/terminal.go	/^	reqPreviewRefresh$/;"	c	package:fzf
reqPrintQuery	plugged/fzf/src/terminal.go	/^	reqPrintQuery$/;"	c	package:fzf
reqPrompt	plugged/fzf/src/terminal.go	/^	reqPrompt util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
reqQuit	plugged/fzf/src/terminal.go	/^	reqQuit$/;"	c	package:fzf
reqRedraw	plugged/fzf/src/terminal.go	/^	reqRedraw$/;"	c	package:fzf
reqRefresh	plugged/fzf/src/terminal.go	/^	reqRefresh$/;"	c	package:fzf
reqReinit	plugged/fzf/src/terminal.go	/^	reqReinit$/;"	c	package:fzf
reqReset	plugged/fzf/src/matcher.go	/^	reqReset$/;"	c	package:fzf
reqRetry	plugged/fzf/src/matcher.go	/^	reqRetry util.EventType = iota$/;"	c	package:fzf	typeref:typename:util.EventType
require_all_configs	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function require_all_configs()$/;"	f
rescriptls	plugged/nvim-lspconfig/CONFIG.md	/^## rescriptls$/;"	s	chapter:Configurations
resizeWindows	plugged/fzf/src/terminal.go	/^func (t *Terminal) resizeWindows() {$/;"	f	struct:fzf.Terminal
restart	plugged/fzf/src/reader.go	/^func (r *Reader) restart(command string) {$/;"	f	struct:fzf.Reader
restoreTerminal	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) restoreTerminal() {$/;"	f	unknown:tui.LightRenderer
restoreTerminal	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) restoreTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
result	plugged/fzf/src/terminal.go	/^	result   Result$/;"	m	struct:fzf.itemLine	typeref:typename:Result
reverseStringArray	plugged/fzf/src/terminal.go	/^func reverseStringArray(input []string) []string {$/;"	f	package:fzf	typeref:typename:[]string
revision	plugged/fzf/main.go	/^var revision string = "devel"$/;"	v	package:main	typeref:typename:string
rls	plugged/nvim-lspconfig/CONFIG.md	/^## rls$/;"	s	chapter:Configurations
rmcup	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) rmcup() {$/;"	f	struct:tui.LightRenderer
rnix	plugged/nvim-lspconfig/CONFIG.md	/^## rnix$/;"	s	chapter:Configurations
rome	plugged/nvim-lspconfig/CONFIG.md	/^## rome$/;"	s	chapter:Configurations
root	plugged/rust.vim/test/run-tests	/^def root():$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/beancount.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/ccls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/clangd.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/cmake.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/codeqlls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/crystalline.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/cssls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/dotls.lua	/^    root_dir = function(filename)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/efm.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/elixirls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/elmls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/erlangls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/html.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/intelephense.lua	/^    root_dir = function(pattern)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/jdtls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/jedi_language_server.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/julials.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/kotlin_language_server.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/lean3ls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/leanls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/nimls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/perlls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/perlpls.lua	/^    root_dir = function(filename)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/phpactor.lua	/^    root_dir = function(pattern)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/powershell_es.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/puppet.lua	/^    root_dir = function(filename)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/pyls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/pyls_ms.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/pylsp.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/pyright.lua	/^    root_dir = function(filename)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/r_language_server.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/racket_langserver.lua	/^    root_dir = function(filename)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/rnix.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/rome.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/rust_analyzer.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/scry.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/sqlls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/sqls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/sumneko_lua.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/tailwindcss.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/texlab.lua	/^    root_dir = function(filename)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/tsserver.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/vala_ls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/vimls.lua	/^    root_dir = function(fname)$/;"	f
root_dir	plugged/nvim-lspconfig/lua/lspconfig/zls.lua	/^    root_dir = function(fname)$/;"	f
rubout	plugged/fzf/src/terminal.go	/^func (t *Terminal) rubout(pattern string) {$/;"	f	struct:fzf.Terminal
runVimTests	plugged/delimitMate/test/_setup.vim	/^let runVimTests = expand('<sfile>:p:h').'\/build\/runVimTests'$/;"	v
run_with_vimrc	plugged/rust.vim/test/run-tests	/^def run_with_vimrc(vimrc):$/;"	f
running	plugged/fzf/src/terminal.go	/^	running      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
rust	plugged/rust.vim/after/syntax/rust.vim	/^    augroup rust.vim.after$/;"	a
rust	plugged/rust.vim/ftplugin/rust.vim	/^    augroup rust.vim.DelimitMate$/;"	a
rust	plugged/rust.vim/ftplugin/rust.vim	/^augroup rust.vim.PreWrite$/;"	a
rust#AppendCmdLine	plugged/rust.vim/autoload/rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
rust#CompleteExpand	plugged/rust.vim/autoload/rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	plugged/rust.vim/autoload/rust.vim	/^function! rust#Emit(type, args)$/;"	f
rust#Expand	plugged/rust.vim/autoload/rust.vim	/^function! rust#Expand(bang, args)$/;"	f
rust#GetConfigVar	plugged/rust.vim/autoload/rust.vim	/^function! rust#GetConfigVar(name, default)$/;"	f
rust#IncludeExpr	plugged/rust.vim/autoload/rust.vim	/^function! rust#IncludeExpr(fname) abort$/;"	f
rust#Jump	plugged/rust.vim/autoload/rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
rust#Load	plugged/rust.vim/autoload/rust.vim	/^function! rust#Load()$/;"	f
rust#Play	plugged/rust.vim/autoload/rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
rust#Run	plugged/rust.vim/autoload/rust.vim	/^function! rust#Run(bang, args)$/;"	f
rust#Test	plugged/rust.vim/autoload/rust.vim	/^function! rust#Test(mods, winsize, all, options) abort$/;"	f
rust#debugging#Info	plugged/rust.vim/autoload/rust/debugging.vim	/^function! rust#debugging#Info() abort$/;"	f
rust#debugging#InfoToClipboard	plugged/rust.vim/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToClipboard() abort$/;"	f
rust#debugging#InfoToFile	plugged/rust.vim/autoload/rust/debugging.vim	/^function! rust#debugging#InfoToFile(filename) abort$/;"	f
rust#delimitmate#onMap	plugged/rust.vim/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onMap() abort$/;"	f
rust#delimitmate#onUnmap	plugged/rust.vim/autoload/rust/delimitmate.vim	/^function! rust#delimitmate#onUnmap() abort$/;"	f
rust#tags#IsUCtags	plugged/rust.vim/autoload/rust/tags.vim	/^function! rust#tags#IsUCtags() abort$/;"	f
rust.vim	plugged/rust.vim/README.md	/^# rust.vim$/;"	c
rust_analyzer	plugged/nvim-lspconfig/CONFIG.md	/^## rust_analyzer$/;"	s	chapter:Configurations
rustfmt#Cmd	plugged/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#Cmd()$/;"	f
rustfmt#DetectVersion	plugged/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#DetectVersion()$/;"	f
rustfmt#Format	plugged/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#Format()$/;"	f
rustfmt#FormatRange	plugged/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
rustfmt#Load	plugged/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#Load()$/;"	f
rustfmt#PreWrite	plugged/rust.vim/autoload/rustfmt.vim	/^function! rustfmt#PreWrite()$/;"	f
s	plugged/vim-sneak/plugin/sneak.vim	/^  nmap s <Plug>Sneak_s$/;"	m
s	plugged/vim-sneak/plugin/sneak.vim	/^  xmap s <Plug>Sneak_s$/;"	m
s.dosearch	plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.dosearch(...) abort " a:1 : extra search options$/;"	f
s.get_onscreen_searchpattern	plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.get_onscreen_searchpattern(w) abort$/;"	f
s.get_stopline	plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.get_stopline() abort$/;"	f
s.hasmatches	plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.hasmatches(n) abort$/;"	f
s.init	plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.init(input, repeatmotion, reverse) abort$/;"	f
s.initpattern	plugged/vim-sneak/autoload/sneak/search.vim	/^  func! s.initpattern() abort$/;"	f
s:AbbreviateMessage	plugged/ale/ale_linters/erlang/elvis.vim	/^function! s:AbbreviateMessage(text) abort$/;"	f
s:AddHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddHeader(key, value) abort$/;"	f
s:AddHintsForTypeScriptParsingErrors	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:AddHintsForTypeScriptParsingErrors(output) abort$/;"	f
s:AddProblemsFromOtherBuffers	plugged/ale/autoload/ale/engine.vim	/^function! s:AddProblemsFromOtherBuffers(buffer, linters) abort$/;"	f
s:AddSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AddSection(label, lines, ...) abort$/;"	f
s:AddSubCallbacks	plugged/ale/autoload/ale/fix.vim	/^function! s:AddSubCallbacks(full_list, callbacks) abort$/;"	f
s:ApplyPartialTimer	plugged/ale/autoload/ale/util.vim	/^function! s:ApplyPartialTimer(timer_id) abort$/;"	f
s:ArgSplit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ArgSplit(string) abort$/;"	f
s:AskPassArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:AskPassArgs(dir) abort$/;"	f
s:AutoClose	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:AutoClose() "{{{$/;"	f
s:BlameBufnr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameBufnr(...) abort$/;"	f
s:BlameCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommit(cmd, ...) abort$/;"	f
s:BlameCommitFileLnum	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameCommitFileLnum(...) abort$/;"	f
s:BlameJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameJump(suffix, ...) abort$/;"	f
s:BlameLeave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameLeave() abort$/;"	f
s:BlameQuit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameQuit() abort$/;"	f
s:BlameRehighlight	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameRehighlight() abort$/;"	f
s:BlameSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlameSubcommand(line1, count, range, bang, mods, options) abort$/;"	f
s:BlobTemp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlobTemp(url) abort$/;"	f
s:BlurStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BlurStatus() abort$/;"	f
s:BrowserOpen	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BrowserOpen(url, mods, echo_copy) abort$/;"	f
s:BufName	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BufName(var) abort$/;"	f
s:BufferCacheExists	plugged/ale/autoload/ale/statusline.vim	/^function! s:BufferCacheExists(buffer) abort$/;"	f
s:BuildClassPathOption	plugged/ale/ale_linters/java/javac.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildClassPathOption	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^function! s:BuildClassPathOption(buffer, import_paths) abort$/;"	f
s:BuildEnvPrefix	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildEnvPrefix(env) abort$/;"	f
s:BuildShell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:BuildShell(dir, env, git, args) abort$/;"	f
s:BuildSignMap	plugged/ale/autoload/ale/sign.vim	/^function! s:BuildSignMap(buffer, current_sign_list, grouped_items) abort$/;"	f
s:BuildText	plugged/ale/ale_linters/ruby/reek.vim	/^function! s:BuildText(buffer, error) abort$/;"	f
s:CFG_TO_LSP_SEVERITY	plugged/ale/autoload/ale/lsp_window.vim	/^let s:CFG_TO_LSP_SEVERITY = {$/;"	v
s:COMPLETION_TRIGGER_CHARACTER	plugged/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_CHARACTER = 2$/;"	v
s:COMPLETION_TRIGGER_INVOKED	plugged/ale/autoload/ale/lsp/message.vim	/^let s:COMPLETION_TRIGGER_INVOKED = 1$/;"	v
s:CanParseMakefile	plugged/ale/autoload/ale/c.vim	/^function! s:CanParseMakefile(buffer) abort$/;"	f
s:CaptureKeyMap	plugged/supertab/plugin/supertab.vim	/^function! s:CaptureKeyMap(key) " {{{$/;"	f
s:CaptureKeyPresses	plugged/supertab/plugin/supertab.vim	/^function! s:CaptureKeyPresses() " {{{$/;"	f
s:CeilingDirectories	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:CeilingDirectories() abort$/;"	f
s:ChangeCmp	plugged/ale/autoload/ale/code_action.vim	/^function! s:ChangeCmp(left, right) abort$/;"	f
s:CheckForBadConfig	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:CheckForBadConfig(buffer, lines) abort$/;"	f
s:CheckWithLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:CheckWithLSP(linter, details) abort$/;"	f
s:ChompDefault	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompDefault(default, ...) abort$/;"	f
s:ChompError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ChompError(...) abort$/;"	f
s:Close	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:Close() abort$/;"	f
s:ClosePreview	plugged/supertab/plugin/supertab.vim	/^function! s:ClosePreview() " {{{$/;"	f
s:CloseWindowIfNeeded	plugged/ale/autoload/ale/list.vim	/^function! s:CloseWindowIfNeeded(buffer) abort$/;"	f
s:CmpPatterns	plugged/ale/autoload/ale/pattern_options.vim	/^function! s:CmpPatterns(left_item, right_item) abort$/;"	f
s:CommandLineCompletion	plugged/supertab/plugin/supertab.vim	/^function! s:CommandLineCompletion() " {{{$/;"	f
s:CommitInteractive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitInteractive(line1, line2, range, bang, mods, options, patch) abort$/;"	f
s:CommitSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CommitSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:CompareAge	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompareAge(mine, theirs) abort$/;"	f
s:CompletableSubcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompletableSubcommands(dir) abort$/;"	f
s:Complete	plugged/vim-abolish/plugin/abolish.vim	/^function! s:Complete(A,L,P)$/;"	f
s:CompleteHeads	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteHeads(dir) abort$/;"	f
s:CompleteRemote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRemote(A, L, P, ...) abort$/;"	f
s:CompleteRevision	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteRevision(A, L, P, ...) abort$/;"	f
s:CompleteSub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:CompleteSub(subcommand, A, L, P, ...) abort$/;"	f
s:CompletionMode	plugged/supertab/plugin/supertab.vim	/^function! s:CompletionMode() " {{{$/;"	f
s:CompletionReset	plugged/supertab/plugin/supertab.vim	/^function! s:CompletionReset(char) " {{{$/;"	f
s:CompletionStillValid	plugged/ale/autoload/ale/completion.vim	/^function! s:CompletionStillValid(request_id) abort$/;"	f
s:ConfigTimestamps	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ConfigTimestamps(dir, dict) abort$/;"	f
s:ContainingCommit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ContainingCommit() abort$/;"	f
s:ContextCompletion	plugged/supertab/plugin/supertab.vim	/^function! s:ContextCompletion() " {{{$/;"	f
s:ContextDiscover	plugged/supertab/plugin/supertab.vim	/^function! s:ContextDiscover() " {{{$/;"	f
s:ContextText	plugged/supertab/plugin/supertab.vim	/^function! s:ContextText() " {{{$/;"	f
s:ConvertLanguageName	plugged/ale/autoload/ale/hover.vim	/^function! s:ConvertLanguageName(language) abort$/;"	f
s:Create	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:Create(options) abort$/;"	f
s:CreateCountDict	plugged/ale/autoload/ale/statusline.vim	/^function! s:CreateCountDict() abort$/;"	f
s:CreateTSServerMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! s:CreateTSServerMessageData(message) abort$/;"	f
s:DefaultOption	plugged/ale/autoload/ale/fixers/shfmt.vim	/^function! s:DefaultOption(buffer) abort$/;"	f
s:DeleteLines	plugged/rust.vim/autoload/rustfmt.vim	/^function! s:DeleteLines(start, end) abort$/;"	f
s:DifftoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DifftoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Dir(...) abort$/;"	f
s:DirCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCheck(...) abort$/;"	f
s:DirCommitFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirCommitFile(path) abort$/;"	f
s:DirRev	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DirRev(url) abort$/;"	f
s:DisablePostamble	plugged/ale/autoload/ale/toggle.vim	/^function! s:DisablePostamble() abort$/;"	f
s:Do	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Do(action, visual) abort$/;"	f
s:DoAutocmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmd(cmd) abort$/;"	f
s:DoAutocmdChanged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoAutocmdChanged(dir) abort$/;"	f
s:DoStagePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStagePushHeader(value) abort$/;"	f
s:DoStageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushed(record) abort$/;"	f
s:DoStageUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnpushedHeading(heading) abort$/;"	f
s:DoStageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstaged(record) abort$/;"	f
s:DoStageUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUnstagedHeading(heading) abort$/;"	f
s:DoStageUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntracked(record) abort$/;"	f
s:DoStageUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoStageUntrackedHeading(heading) abort$/;"	f
s:DoToggleHeadHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHeadHeader(value) abort$/;"	f
s:DoToggleHelpHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleHelpHeader(value) abort$/;"	f
s:DoTogglePushHeader	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoTogglePushHeader(value) abort$/;"	f
s:DoToggleStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStaged(record) abort$/;"	f
s:DoToggleStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleStagedHeading(...) abort$/;"	f
s:DoToggleUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulled(record) abort$/;"	f
s:DoToggleUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpulledHeading(heading) abort$/;"	f
s:DoToggleUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushed(record) abort$/;"	f
s:DoToggleUnpushedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnpushedHeading(heading) abort$/;"	f
s:DoToggleUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstaged(record) abort$/;"	f
s:DoToggleUnstagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUnstagedHeading(...) abort$/;"	f
s:DoToggleUntracked	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntracked(record) abort$/;"	f
s:DoToggleUntrackedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoToggleUntrackedHeading(...) abort$/;"	f
s:DoUnstageStaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStaged(record) abort$/;"	f
s:DoUnstageStagedHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageStagedHeading(heading) abort$/;"	f
s:DoUnstageUnpulled	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulled(record) abort$/;"	f
s:DoUnstageUnpulledHeading	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpulledHeading(heading) abort$/;"	f
s:DoUnstageUnpushed	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnpushed(record) abort$/;"	f
s:DoUnstageUnstaged	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DoUnstageUnstaged(record) abort$/;"	f
s:DotRelative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:DotRelative(path, ...) abort$/;"	f
s:Echo	plugged/ale/autoload/ale/debugging.vim	/^function! s:Echo(message) abort$/;"	f
s:Echo	plugged/rust.vim/autoload/rust/debugging.vim	/^function! s:Echo(message) abort$/;"	f
s:EchoCommand	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommand(item) abort$/;"	f
s:EchoCommandHistory	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoCommandHistory() abort$/;"	f
s:EchoExec	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:EchoExec(...) abort$/;"	f
s:EchoExecutable	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoExecutable(item) abort$/;"	f
s:EchoGlobalVariables	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:EchoGlobalVariables	plugged/rust.vim/autoload/rust/debugging.vim	/^function! s:EchoGlobalVariables() abort$/;"	f
s:EchoLSPErrorMessages	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLSPErrorMessages(all_linter_names) abort$/;"	f
s:EchoLinterAliases	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterAliases(all_linters) abort$/;"	f
s:EchoLinterVariables	plugged/ale/autoload/ale/debugging.vim	/^function! s:EchoLinterVariables(variable_list) abort$/;"	f
s:Emit	plugged/rust.vim/autoload/rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
s:EnableLongestEnhancement	plugged/supertab/plugin/supertab.vim	/^function! s:EnableLongestEnhancement() " {{{$/;"	f
s:EnableNoCompleteAfterReset	plugged/supertab/plugin/supertab.vim	/^function! s:EnableNoCompleteAfterReset() " {{{$/;"	f
s:EnablePreamble	plugged/ale/autoload/ale/toggle.vim	/^function! s:EnablePreamble() abort$/;"	f
s:EncodeChar	plugged/ale/autoload/ale/uri.vim	/^function! s:EncodeChar(char) abort$/;"	f
s:EscapeMenuName	plugged/ale/autoload/ale/code_action.vim	/^function! s:EscapeMenuName(text) abort$/;"	f
s:EscapeSignText	plugged/ale/autoload/ale/sign.vim	/^function! s:EscapeSignText(sign_text) abort$/;"	f
s:ExecPath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExecPath() abort$/;"	f
s:ExecuteGetCodeFix	plugged/ale/autoload/ale/codefix.vim	/^function! s:ExecuteGetCodeFix(linter, range, MenuCallback) abort$/;"	f
s:ExecuteRename	plugged/ale/autoload/ale/rename.vim	/^function! s:ExecuteRename(linter, options) abort$/;"	f
s:ExitCallback	plugged/ale/autoload/ale/command.vim	/^function! s:ExitCallback(buffer, line_list, Callback, data) abort$/;"	f
s:Expand	plugged/rust.vim/autoload/rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
s:Expand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Expand(rev, ...) abort$/;"	f
s:ExpandMap	plugged/supertab/plugin/supertab.vim	/^function! s:ExpandMap(map) " {{{$/;"	f
s:ExpandVar	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVar(other, var, flags, esc, ...) abort$/;"	f
s:ExpandVarLegacy	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpandVarLegacy(str) abort$/;"	f
s:ExpireStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ExpireStatus(bufnr) abort$/;"	f
s:ExtraErrorMsg	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:ExtraErrorMsg(current, new) abort$/;"	f
s:ExtraMappings	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:ExtraMappings() "{{{$/;"	f
s:FileIgnoreCase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FileIgnoreCase(for_completion) abort$/;"	f
s:FilterEscape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FilterEscape(items, ...) abort$/;"	f
s:FilterResult	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:FilterResult(buffer, obj) abort$/;"	f
s:FindConfig	plugged/ale/ale_linters/pug/puglint.vim	/^function! s:FindConfig(buffer) abort$/;"	f
s:FindError	plugged/ale/autoload/ale/codefix.vim	/^function! s:FindError(buffer, line, column, end_line, end_column) abort$/;"	f
s:FindHistoryItem	plugged/ale/autoload/ale/history.vim	/^function! s:FindHistoryItem(buffer, job_id) abort$/;"	f
s:FindSpan	plugged/ale/autoload/ale/handlers/rust.vim	/^function! s:FindSpan(buffer, span) abort$/;"	f
s:FixList	plugged/ale/autoload/ale/list.vim	/^function! s:FixList(buffer, list) abort$/;"	f
s:Format	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Format(val) abort$/;"	f
s:FormatEntry	plugged/ale/autoload/ale/fix/registry.vim	/^function! s:FormatEntry(key, entry) abort$/;"	f
s:FormatExe	plugged/ale/autoload/ale/assert.vim	/^function! s:FormatExe(command, executable) abort$/;"	f
s:FormatFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatFile(dict) abort$/;"	f
s:FormatFilename	plugged/ale/autoload/ale/command.vim	/^function! s:FormatFilename(filename, mappings, modifiers) abort$/;"	f
s:FormatLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatLog(dict) abort$/;"	f
s:FormatRebase	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:FormatRebase(dict) abort$/;"	f
s:GF	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GF(mode) abort$/;"	f
s:GatherOutput	plugged/ale/autoload/ale/command.vim	/^function! s:GatherOutput(line_list, job_id, line) abort$/;"	f
s:Generate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Generate(object, ...) abort$/;"	f
s:GetALEProjectDir	plugged/ale/ale_linters/vim/ale_custom_linting_rules.vim	/^function! s:GetALEProjectDir(buffer) abort$/;"	f
s:GetAlarm	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetAlarm(buffer, timeout) abort$/;"	f
s:GetAliasedFiletype	plugged/ale/autoload/ale/linter.vim	/^function! s:GetAliasedFiletype(original_filetype) abort$/;"	f
s:GetArguments	plugged/ale/autoload/ale/c.vim	/^function! s:GetArguments(json_item) abort$/;"	f
s:GetCachedExtensionMap	plugged/ale/autoload/ale/filetypes.vim	/^function! s:GetCachedExtensionMap() abort$/;"	f
s:GetCallbacks	plugged/ale/autoload/ale/fix.vim	/^function! s:GetCallbacks(buffer, fixing_flag, fixers) abort$/;"	f
s:GetCodeActions	plugged/ale/autoload/ale/code_action.vim	/^function! s:GetCodeActions(linter, options) abort$/;"	f
s:GetCommand	plugged/ale/ale_linters/erlang/elvis.vim	/^function! s:GetCommand(buffer) abort$/;"	f
s:GetConfig	plugged/ale/ale_linters/java/checkstyle.vim	/^function! s:GetConfig(buffer, config) abort$/;"	f
s:GetCounts	plugged/ale/autoload/ale/statusline.vim	/^function! s:GetCounts(buffer) abort$/;"	f
s:GetDUBCommand	plugged/ale/ale_linters/d/dmd.vim	/^function! s:GetDUBCommand(buffer) abort$/;"	f
s:GetDetails	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetDetails(error) abort$/;"	f
s:GetDir	plugged/ale/ale_linters/python/vulture.vim	/^function! s:GetDir(buffer) abort$/;"	f
s:GetErrMsg	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:GetErrMsg(i, lines, text) abort$/;"	f
s:GetExecutable	plugged/ale/autoload/ale/handlers/sml.vim	/^function! s:GetExecutable(buffer, source) abort$/;"	f
s:GetFiletypeValue	plugged/ale/autoload/ale/completion.vim	/^function! s:GetFiletypeValue(map, filetype) abort$/;"	f
s:GetFirstProblems	plugged/ale/autoload/ale/statusline.vim	/^function! s:GetFirstProblems(buffer) abort$/;"	f
s:GetJSONLines	plugged/ale/ale_linters/javascript/flow.vim	/^function! s:GetJSONLines(lines) abort$/;"	f
s:GetLintFileSlots	plugged/ale/autoload/ale/engine.vim	/^function! s:GetLintFileSlots(buffer, linters) abort$/;"	f
s:GetLintFileValues	plugged/ale/autoload/ale/engine.vim	/^function! s:GetLintFileValues(slots, Callback) abort$/;"	f
s:GetLinter	plugged/ale/autoload/ale/assert.vim	/^function! s:GetLinter() abort$/;"	f
s:GetLinterNames	plugged/ale/autoload/ale/linter.vim	/^function! s:GetLinterNames(original_filetype) abort$/;"	f
s:GetLinterVariables	plugged/ale/autoload/ale/debugging.vim	/^function! s:GetLinterVariables(filetype, exclude_linter_names) abort$/;"	f
s:GetLookupFromCompileCommandsFile	plugged/ale/autoload/ale/c.vim	/^function! s:GetLookupFromCompileCommandsFile(compile_commands_file) abort$/;"	f
s:GetVersion	plugged/ale/ale_linters/java/eclipselsp.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
s:GetVersion	plugged/ale/autoload/ale/semver.vim	/^function! s:GetVersion(executable, version_lines) abort$/;"	f
s:GitCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitCmd() abort$/;"	f
s:GitShellCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GitShellCmd() abort$/;"	f
s:GlobComplete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GlobComplete(lead, pattern, ...) abort$/;"	f
s:GoToLSPDefinition	plugged/ale/autoload/ale/definition.vim	/^function! s:GoToLSPDefinition(linter, options, capability) abort$/;"	f
s:GrepParseLine	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepParseLine(prefix, name_only, dir, line) abort$/;"	f
s:GrepSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:GrepSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:GroupCmd	plugged/ale/autoload/ale/sign.vim	/^function! s:GroupCmd() abort$/;"	f
s:GroupLoclistItems	plugged/ale/autoload/ale/sign.vim	/^function! s:GroupLoclistItems(buffer, loclist) abort$/;"	f
s:HandleESLintOutput	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:HandleESLintOutput(buffer, lines, type) abort$/;"	f
s:HandleExit	plugged/ale/autoload/ale/engine.vim	/^function! s:HandleExit(job_info, buffer, output, data) abort$/;"	f
s:HandleExit	plugged/ale/autoload/ale/fix.vim	/^function! s:HandleExit(job_info, buffer, job_output, data) abort$/;"	f
s:HandleLSPDiagnostics	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPDiagnostics(conn_id, response) abort$/;"	f
s:HandleLSPErrorMessage	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPErrorMessage(linter_name, response) abort$/;"	f
s:HandleLSPResponseToCustomRequests	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleLSPResponseToCustomRequests(conn_id, response) abort$/;"	f
s:HandleSyntaxError	plugged/ale/autoload/ale/handlers/ruby.vim	/^function! s:HandleSyntaxError(buffer, lines) abort$/;"	f
s:HandleTSServerDiagnostics	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:HandleTSServerDiagnostics(response, error_type) abort$/;"	f
s:HandleUnixFormat	plugged/ale/autoload/ale/handlers/unix.vim	/^function! s:HandleUnixFormat(buffer, lines, type) abort$/;"	f
s:HasOpt	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:HasOpt(args, ...) abort$/;"	f
s:INTERNAL_ERROR	plugged/ale/autoload/ale/lsp/response.vim	/^let s:INTERNAL_ERROR = -32603$/;"	v
s:INVALID_PARAMS	plugged/ale/autoload/ale/lsp/response.vim	/^let s:INVALID_PARAMS = -32602$/;"	v
s:INVALID_REQUEST	plugged/ale/autoload/ale/lsp/response.vim	/^let s:INVALID_REQUEST = -32600$/;"	v
s:Ignore	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Ignore(item) abort$/;"	f
s:IgnoreFixers	plugged/ale/autoload/ale/fix.vim	/^function! s:IgnoreFixers(callback_list, filetype, config) abort$/;"	f
s:Init	plugged/supertab/plugin/supertab.vim	/^function! s:Init() " {{{$/;"	f
s:InitBuffer	plugged/supertab/plugin/supertab.vim	/^function! s:InitBuffer() " {{{$/;"	f
s:IsBoolean	plugged/ale/autoload/ale/linter.vim	/^function! s:IsBoolean(value) abort$/;"	f
s:IsCallback	plugged/ale/autoload/ale/linter.vim	/^function! s:IsCallback(value) abort$/;"	f
s:IsConflicted	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:IsConflicted() abort$/;"	f
s:IsGenericFixer	plugged/ale/autoload/ale/fix/registry.vim	/^function! s:IsGenericFixer(suggested_filetypes) abort$/;"	f
s:IsHeaderFile	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:IsHeaderFile(filename) abort$/;"	f
s:IsNoCompleteAfterReset	plugged/supertab/plugin/supertab.vim	/^function! s:IsNoCompleteAfterReset() " {{{$/;"	f
s:IsPreviewOpen	plugged/supertab/plugin/supertab.vim	/^function! s:IsPreviewOpen() " {{{$/;"	f
s:IsSbt	plugged/ale/ale_linters/scala/fsc.vim	/^function! s:IsSbt(buffer) abort$/;"	f
s:IsSbt	plugged/ale/ale_linters/scala/scalac.vim	/^function! s:IsSbt(buffer) abort$/;"	f
s:JobOpts	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:JobOpts(cmd, env) abort$/;"	f
s:Jump_Back	plugged/rust.vim/autoload/rust.vim	/^function! s:Jump_Back()$/;"	f
s:Jump_Forward	plugged/rust.vim/autoload/rust.vim	/^function! s:Jump_Forward()$/;"	f
s:Keywordprg	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Keywordprg() abort$/;"	f
s:KillHandler	plugged/ale/autoload/ale/job.vim	/^function! s:KillHandler(timer) abort$/;"	f
s:LSP_INSERT_TEXT_FORMAT_PLAIN	plugged/ale/autoload/ale/completion.vim	/^let s:LSP_INSERT_TEXT_FORMAT_PLAIN = 1$/;"	v
s:LSP_INSERT_TEXT_FORMAT_SNIPPET	plugged/ale/autoload/ale/completion.vim	/^let s:LSP_INSERT_TEXT_FORMAT_SNIPPET = 2$/;"	v
s:LSP_MESSAGE_TYPE_DISABLED	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_DISABLED = 0$/;"	v
s:LSP_MESSAGE_TYPE_ERROR	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_ERROR = 1$/;"	v
s:LSP_MESSAGE_TYPE_INFORMATION	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_INFORMATION = 3$/;"	v
s:LSP_MESSAGE_TYPE_LOG	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_LOG = 4$/;"	v
s:LSP_MESSAGE_TYPE_WARNING	plugged/ale/autoload/ale/lsp_window.vim	/^let s:LSP_MESSAGE_TYPE_WARNING = 2$/;"	v
s:LinesError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LinesError(...) abort$/;"	f
s:Lint	plugged/ale/autoload/ale.vim	/^function! s:Lint(buffer, should_lint_file, timer_id) abort$/;"	f
s:LoadArgCount	plugged/ale/autoload/ale/util.vim	/^function! s:LoadArgCount(function) abort$/;"	f
s:LogFlushQueue	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogFlushQueue(state, dir) abort$/;"	f
s:LogParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:LogParse(state, dir, line) abort$/;"	f
s:MAX_COL_SIZE	plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_COL_SIZE = 1073741824 " pow(2, 30)$/;"	v
s:MAX_POS_VALUES	plugged/ale/autoload/ale/highlight.vim	/^let s:MAX_POS_VALUES = 8$/;"	v
s:METHOD_NOT_FOUND	plugged/ale/autoload/ale/lsp/response.vim	/^let s:METHOD_NOT_FOUND = -32601$/;"	v
s:ManualCompletionEnter	plugged/supertab/plugin/supertab.vim	/^function! s:ManualCompletionEnter() " {{{$/;"	f
s:Map	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:Map() "{{{$/;"	f
s:Map	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:Map	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Map(mode, lhs, rhs, ...) abort$/;"	f
s:MapMotion	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MapMotion(lhs, rhs) abort$/;"	f
s:MergeHead	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeHead(...) abort$/;"	f
s:MergeSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergeSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MergetoolSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MergetoolSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:MessageCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:MessageCfile(...) abort$/;"	f
s:Mods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Mods(mods, ...) abort$/;"	f
s:Move	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Move(force, rename, destination) abort$/;"	f
s:NavigateUp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NavigateUp(count) abort$/;"	f
s:NeoVimCallback	plugged/ale/autoload/ale/job.vim	/^function! s:NeoVimCallback(job, data, event) abort$/;"	f
s:NeoVimOutputCallback	plugged/ale/autoload/ale/socket.vim	/^function! s:NeoVimOutputCallback(channel_id, data, event) abort$/;"	f
s:NextExpandedHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextExpandedHunk(count) abort$/;"	f
s:NextFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextFile(count) abort$/;"	f
s:NextHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextHunk(count) abort$/;"	f
s:NextItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextItem(count) abort$/;"	f
s:NextSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSection(count) abort$/;"	f
s:NextSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NextSectionEnd(count) abort$/;"	f
s:NoAutoClose	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:NoAutoClose() "{{{$/;"	f
s:NullError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:NullError(...) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/codefix.vim	/^function! s:OnReady($/;"	f
s:OnReady	plugged/ale/autoload/ale/completion.vim	/^function! s:OnReady(linter, lsp_details) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/definition.vim	/^function! s:OnReady(line, column, options, capability, linter, lsp_details) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/hover.vim	/^function! s:OnReady(line, column, opt, linter, lsp_details) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/organize_imports.vim	/^function! s:OnReady(linter, lsp_details) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/references.vim	/^function! s:OnReady(line, column, options, linter, lsp_details) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/rename.vim	/^function! s:OnReady(line, column, options, linter, lsp_details) abort$/;"	f
s:OnReady	plugged/ale/autoload/ale/symbol.vim	/^function! s:OnReady(query, options, linter, lsp_details) abort$/;"	f
s:OnReadyForCustomRequests	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:OnReadyForCustomRequests(args, linter, lsp_details) abort$/;"	f
s:Open	plugged/ale/autoload/ale/preview.vim	/^function! s:Open(open_in) abort$/;"	f
s:OpenCompletionMenu	plugged/ale/autoload/ale/completion.vim	/^function! s:OpenCompletionMenu(...) abort$/;"	f
s:OpenParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:OpenParse(string, wants_cmd) abort$/;"	f
s:OrganizeImports	plugged/ale/autoload/ale/organize_imports.vim	/^function! s:OrganizeImports(linter) abort$/;"	f
s:Owner	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Owner(path, ...) abort$/;"	f
s:PARSE_ERROR	plugged/ale/autoload/ale/lsp/response.vim	/^let s:PARSE_ERROR = -32700$/;"	v
s:ParseInlinedFunctionProblems	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:ParseInlinedFunctionProblems(buffer, lines) abort$/;"	f
s:ParseProblemsInHeaders	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:ParseProblemsInHeaders(buffer, lines) abort$/;"	f
s:PatchSearchExpr	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PatchSearchExpr(reverse) abort$/;"	f
s:PathInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PathInfo(url) abort$/;"	f
s:PreparePathArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreparePathArgs(cmd, dir, literal) abort$/;"	f
s:PrepareWindowContent	plugged/ale/autoload/ale/floating_preview.vim	/^function! s:PrepareWindowContent(lines) abort$/;"	f
s:PrepareWrappedCommand	plugged/ale/autoload/ale/job.vim	/^function! s:PrepareWrappedCommand(original_wrapper, command) abort$/;"	f
s:PreviousFile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousFile(count) abort$/;"	f
s:PreviousHunk	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousHunk(count) abort$/;"	f
s:PreviousItem	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousItem(count) abort$/;"	f
s:PreviousSection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSection(count) abort$/;"	f
s:PreviousSectionEnd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:PreviousSectionEnd(count) abort$/;"	f
s:PriorityCmd	plugged/ale/autoload/ale/sign.vim	/^function! s:PriorityCmd() abort$/;"	f
s:ProcessDeferredCommands	plugged/ale/autoload/ale/assert.vim	/^function! s:ProcessDeferredCommands(initial_result) abort$/;"	f
s:ProcessDeferredCwds	plugged/ale/autoload/ale/assert.vim	/^function! s:ProcessDeferredCwds(initial_command, initial_cwd) abort$/;"	f
s:ProjectionistDetect	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:ProjectionistDetect() abort$/;"	f
s:QueryLog	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QueryLog(refspec) abort$/;"	f
s:QuickfixCreate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixCreate(nr, opts) abort$/;"	f
s:QuickfixGet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixGet(nr, ...) abort$/;"	f
s:QuickfixSet	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixSet(nr, ...) abort$/;"	f
s:QuickfixStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:QuickfixStream(nr, event, title, cmd, first, mods, callback, ...) abort$/;"	f
s:REQUEST_CANCELLED	plugged/ale/autoload/ale/lsp/response.vim	/^let s:REQUEST_CANCELLED = -32800$/;"	v
s:ReadExec	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadExec(line1, count, range, mods, env, args, options) abort$/;"	f
s:ReadPrepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReadPrepare(line1, count, range, mods) abort$/;"	f
s:RebaseArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseArgument() abort$/;"	f
s:RebaseSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RebaseSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:Relative	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Relative(...) abort$/;"	f
s:ReleaseKeyPresses	plugged/supertab/plugin/supertab.vim	/^function! s:ReleaseKeyPresses() " {{{$/;"	f
s:ReloadStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatus(...) abort$/;"	f
s:ReloadStatusBuffer	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadStatusBuffer(...) abort$/;"	f
s:ReloadTabStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadTabStatus(...) abort$/;"	f
s:ReloadWinStatus	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReloadWinStatus(...) abort$/;"	f
s:RemapItemTypes	plugged/ale/autoload/ale/engine.vim	/^function! s:RemapItemTypes(type_map, loclist) abort$/;"	f
s:Remote	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remote(dir) abort$/;"	f
s:Remove	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Remove(after, force) abort$/;"	f
s:RemoveModule	plugged/ale/autoload/ale/test.vim	/^function! s:RemoveModule(results) abort$/;"	f
s:RemoveProblemsForDisabledLinters	plugged/ale/autoload/ale/engine.vim	/^function! s:RemoveProblemsForDisabledLinters(buffer, linters) abort$/;"	f
s:RemoveUnicodeQuotes	plugged/ale/autoload/ale/handlers/flawfinder.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RemoveUnicodeQuotes	plugged/ale/autoload/ale/handlers/gcc.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:RemoveUnicodeQuotes	plugged/ale/autoload/ale/handlers/pony.vim	/^function! s:RemoveUnicodeQuotes(text) abort$/;"	f
s:ReplaceCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ReplaceCmd(cmd) abort$/;"	f
s:ReplaceCompletionOptions	plugged/ale/autoload/ale/completion.vim	/^function! s:ReplaceCompletionOptions(source) abort$/;"	f
s:Resolve	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Resolve(path) abort$/;"	f
s:RestoreViewIfNeeded	plugged/ale/autoload/ale/list.vim	/^function! s:RestoreViewIfNeeded(buffer) abort$/;"	f
s:RevertSubcommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RevertSubcommand(line1, line2, range, bang, mods, options) abort$/;"	f
s:RmDir	plugged/rust.vim/autoload/rust.vim	/^function! s:RmDir(path)$/;"	f
s:Run	plugged/rust.vim/autoload/rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
s:RunBufDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunBufDelete(bufnr) abort$/;"	f
s:RunClose	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunClose(state, tmp, job, ...) abort$/;"	f
s:RunCloseIn	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunCloseIn(job) abort$/;"	f
s:RunEcho	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEcho(tmp) abort$/;"	f
s:RunEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunEdit(state, tmp, job) abort$/;"	f
s:RunExit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunExit(state, tmp, job, exit_status) abort$/;"	f
s:RunFinished	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunFinished(state, ...) abort$/;"	f
s:RunFixer	plugged/ale/autoload/ale/fix.vim	/^function! s:RunFixer(options) abort$/;"	f
s:RunIfExecutable	plugged/ale/autoload/ale/engine.vim	/^function! s:RunIfExecutable(buffer, linter, lint_file, executable) abort$/;"	f
s:RunJob	plugged/ale/autoload/ale/engine.vim	/^function! s:RunJob(command, options) abort$/;"	f
s:RunJob	plugged/ale/autoload/ale/fix.vim	/^function! s:RunJob(result, options) abort$/;"	f
s:RunJobs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunJobs() abort$/;"	f
s:RunLinter	plugged/ale/autoload/ale/engine.vim	/^function! s:RunLinter(buffer, linter, lint_file) abort$/;"	f
s:RunLinters	plugged/ale/autoload/ale/engine.vim	/^function! s:RunLinters($/;"	f
s:RunReceive	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunReceive(state, tmp, type, job, data, ...) abort$/;"	f
s:RunRustfmt	plugged/rust.vim/autoload/rustfmt.vim	/^function! s:RunRustfmt(command, tmpname, from_writepre)$/;"	f
s:RunSave	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSave(state) abort$/;"	f
s:RunSend	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunSend(job, str) abort$/;"	f
s:RunTick	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunTick(job) abort$/;"	f
s:RunWait	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:RunWait(state, tmp, job, ...) abort$/;"	f
s:RustfmtCommand	plugged/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtCommand()$/;"	f
s:RustfmtCommandRange	plugged/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
s:RustfmtConfigOptions	plugged/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtConfigOptions()$/;"	f
s:RustfmtWriteMode	plugged/rust.vim/autoload/rustfmt.vim	/^function! s:RustfmtWriteMode()$/;"	f
s:SERVER_ERROR_END	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_ERROR_END = -32000$/;"	v
s:SERVER_ERROR_START	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_ERROR_START = -32099$/;"	v
s:SERVER_NOT_INITIALIZED	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SERVER_NOT_INITIALIZED = -32002$/;"	v
s:SEVERITY_ERROR	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_ERROR = 1$/;"	v
s:SEVERITY_HINT	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_HINT = 4$/;"	v
s:SEVERITY_INFORMATION	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_INFORMATION = 3$/;"	v
s:SEVERITY_WARNING	plugged/ale/autoload/ale/lsp/response.vim	/^let s:SEVERITY_WARNING = 2$/;"	v
s:SearchTestFunctionNameUnderCursor	plugged/rust.vim/autoload/rust.vim	/^function! s:SearchTestFunctionNameUnderCursor() abort$/;"	f
s:SelectCompletion	plugged/supertab/plugin/supertab.vim	/^    function! s:SelectCompletion(cr)$/;"	f
s:Selection	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Selection(arg1, ...) abort$/;"	f
s:SendInitMessage	plugged/ale/autoload/ale/lsp.vim	/^function! s:SendInitMessage(conn) abort$/;"	f
s:SendMessageData	plugged/ale/autoload/ale/lsp.vim	/^function! s:SendMessageData(conn, data) abort$/;"	f
s:SetCompletionType	plugged/supertab/plugin/supertab.vim	/^function! s:SetCompletionType() " {{{$/;"	f
s:SetDefaultCompletionType	plugged/supertab/plugin/supertab.vim	/^function! s:SetDefaultCompletionType() " {{{$/;"	f
s:SetListsImpl	plugged/ale/autoload/ale/list.vim	/^function! s:SetListsImpl(timer_id, buffer, loclist) abort$/;"	f
s:Setup	plugged/ale/autoload/ale/code_action.vim	/^function! s:Setup(enabled) abort$/;"	f
s:Setup	plugged/ale/autoload/ale/completion.vim	/^function! s:Setup(enabled) abort$/;"	f
s:ShellTokenize	plugged/rust.vim/autoload/rust.vim	/^function! s:ShellTokenize(text)$/;"	f
s:ShiftTab	plugged/supertab/plugin/supertab.vim	/^        let s:ShiftTab = function(stab)$/;"	v
s:ShiftTab	plugged/supertab/plugin/supertab.vim	/^      let s:ShiftTab = stab$/;"	v
s:ShouldIgnore	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:ShouldIgnore(buffer, linter_name) abort$/;"	f
s:ShouldOpen	plugged/ale/autoload/ale/list.vim	/^function! s:ShouldOpen(buffer) abort$/;"	f
s:ShouldSuggestForType	plugged/ale/autoload/ale/fix/registry.vim	/^function! s:ShouldSuggestForType(suggested_filetypes, type_list) abort$/;"	f
s:ShowCursorDetailForItem	plugged/ale/autoload/ale/cursor.vim	/^function! s:ShowCursorDetailForItem(loc, options) abort$/;"	f
s:Slash	plugged/vim-fugitive/autoload/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:Slash	plugged/vim-fugitive/plugin/fugitive.vim	/^  function! s:Slash(path) abort$/;"	f
s:SplitExpandChain	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SplitExpandChain(string, ...) abort$/;"	f
s:SquashArgument	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SquashArgument(...) abort$/;"	f
s:StageApply	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageApply(info, reverse, extra) abort$/;"	f
s:StageArgs	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageArgs(visual) abort$/;"	f
s:StageDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDelete(lnum1, lnum2, count) abort$/;"	f
s:StageDiff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiff(diff) abort$/;"	f
s:StageDiffEdit	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageDiffEdit() abort$/;"	f
s:StageIgnore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageIgnore(lnum1, lnum2, count) abort$/;"	f
s:StageInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInfo(...) abort$/;"	f
s:StageInline	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageInline(mode, ...) abort$/;"	f
s:StageJump	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageJump(offset, section, ...) abort$/;"	f
s:StagePatch	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
s:StageReveal	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageReveal() abort$/;"	f
s:StageSeek	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StageSeek(info, fallback) abort$/;"	f
s:StartCompletionMode	plugged/supertab/plugin/supertab.vim	/^function! s:StartCompletionMode() " {{{$/;"	f
s:StartIfExecutable	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartIfExecutable(options, executable) abort$/;"	f
s:StartLSP	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartLSP(options, address, executable, command) abort$/;"	f
s:StartWithAddress	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartWithAddress(options, address) abort$/;"	f
s:StartWithCommand	plugged/ale/autoload/ale/lsp_linter.vim	/^function! s:StartWithCommand(options, executable, command) abort$/;"	f
s:StatusCfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCfile(...) abort$/;"	f
s:StatusCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:StatusCommand(line1, line2, range, count, bang, mods, reg, arg, args, ...) abort$/;"	f
s:StopCurrentJobs	plugged/ale/autoload/ale/engine.vim	/^function! s:StopCurrentJobs(buffer, clear_lint_file_jobs, linter_slots) abort$/;"	f
s:StopCursorTimer	plugged/ale/autoload/ale/cursor.vim	/^function! s:StopCursorTimer() abort$/;"	f
s:StopCursorTimer	plugged/ale/autoload/ale/virtualtext.vim	/^function! s:StopCursorTimer() abort$/;"	f
s:SubComplete	plugged/vim-abolish/plugin/abolish.vim	/^function! s:SubComplete(A,L,P)$/;"	f
s:Subst	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Subst(format, vars) abort$/;"	f
s:SuperTabHelp	plugged/supertab/plugin/supertab.vim	/^function! s:SuperTabHelp() " {{{$/;"	f
s:SystemError	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:SystemError(cmd, ...) abort$/;"	f
s:TYPE	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:TYPE = {'dict': type({}), 'funcref': type(function('call')), 'string': type(''), 'list': t/;"	v
s:Tab	plugged/supertab/plugin/supertab.vim	/^      let s:Tab = function(substitute(existing_tab, '()$', '', ''))$/;"	v
s:TempCmd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempCmd(out, cmd) abort$/;"	f
s:TempDelete	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempDelete(file) abort$/;"	f
s:TempReadPost	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPost(file) abort$/;"	f
s:TempReadPre	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempReadPre(file) abort$/;"	f
s:TempScript	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempScript(...) abort$/;"	f
s:TempState	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TempState(...) abort$/;"	f
s:TemporaryFilename	plugged/ale/autoload/ale/command.vim	/^function! s:TemporaryFilename(buffer) abort$/;"	f
s:TemporaryPSScript	plugged/ale/autoload/ale/powershell.vim	/^function! s:TemporaryPSScript(buffer, input) abort$/;"	f
s:TimerHandler	plugged/ale/autoload/ale/completion.vim	/^function! s:TimerHandler(...) abort$/;"	f
s:ToolItems	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolItems(state, from, to, offsets, text, ...) abort$/;"	f
s:ToolParse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolParse(state, line) abort$/;"	f
s:ToolStream	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolStream(line1, line2, range, bang, mods, options, args, state) abort$/;"	f
s:ToolToFrom	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:ToolToFrom(str) abort$/;"	f
s:Tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Tree(...) abort$/;"	f
s:Tree	plugged/vim-fugitive/plugin/fugitive.vim	/^function! s:Tree(path) abort$/;"	f
s:TreeChomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeChomp(...) abort$/;"	f
s:TreeInfo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:TreeInfo(dir, commit) abort$/;"	f
s:TriggerAbb	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:TriggerAbb() "{{{$/;"	f
s:Trim	plugged/ale/ale_linters/prolog/swipl.vim	/^function! s:Trim(str) abort$/;"	f
s:UNKNOWN_ERROR_CODE	plugged/ale/autoload/ale/lsp/response.vim	/^let s:UNKNOWN_ERROR_CODE = -32001$/;"	v
s:Uniq	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:Uniq(list) abort$/;"	f
s:Unmap	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:Unmap() " {{{$/;"	f
s:UpdateCacheIfNecessary	plugged/ale/autoload/ale/statusline.vim	/^function! s:UpdateCacheIfNecessary(buffer) abort$/;"	f
s:UpdateCapabilities	plugged/ale/autoload/ale/lsp.vim	/^function! s:UpdateCapabilities(conn, capabilities) abort$/;"	f
s:UpdateCursor	plugged/ale/autoload/ale/code_action.vim	/^function! s:UpdateCursor(cursor, start, end, offset) abort$/;"	f
s:UpdateIndex	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UpdateIndex(dir, info) abort$/;"	f
s:UpdateLineNumbers	plugged/ale/autoload/ale/sign.vim	/^function! s:UpdateLineNumbers(buffer, current_sign_list, loclist) abort$/;"	f
s:UpdateMenu	plugged/ale/autoload/ale/code_action.vim	/^function! s:UpdateMenu(data, menu_items) abort$/;"	f
s:UsableWin	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UsableWin(nr) abort$/;"	f
s:UserCommand	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommand(...) abort$/;"	f
s:UserCommandCwd	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandCwd(dir) abort$/;"	f
s:UserCommandList	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:UserCommandList(...) abort$/;"	f
s:UsingModule	plugged/ale/ale_linters/python/flake8.vim	/^function! s:UsingModule(buffer) abort$/;"	f
s:VersionCheck	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:VersionCheck() abort$/;"	f
s:VimCloseCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimCloseCallback(channel) abort$/;"	f
s:VimErrorCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimErrorCallback(channel, data) abort$/;"	f
s:VimExitCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimExitCallback(job, exit_code) abort$/;"	f
s:VimOutputCallback	plugged/ale/autoload/ale/job.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
s:VimOutputCallback	plugged/ale/autoload/ale/socket.vim	/^function! s:VimOutputCallback(channel, data) abort$/;"	f
s:WillComplete	plugged/supertab/plugin/supertab.vim	/^function! s:WillComplete(...) " {{{$/;"	f
s:WinFindBuf	plugged/ale/autoload/ale/list.vim	/^function! s:WinFindBuf(buffer) abort$/;"	f
s:WinShellEsc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:WinShellEsc(arg) abort$/;"	f
s:WithPath	plugged/rust.vim/autoload/rust.vim	/^function! s:WithPath(func, ...)$/;"	f
s:_	plugged/lightline.vim/autoload/lightline.vim	/^let s:_ = 1 " 1: uninitialized, 2: disabled$/;"	v
s:__ale_julia_project_filenames	plugged/ale/autoload/ale/julia.vim	/^let s:__ale_julia_project_filenames = ['REQUIRE', 'Manifest.toml', 'Project.toml']$/;"	v
s:_handleOldOptions	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:_handleOldOptions() abort$/;"	f
s:_lightline	plugged/lightline.vim/autoload/lightline.vim	/^let s:_lightline = {$/;"	v
s:a2r	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:a2r = [[1000, 'm'], [900, 'cm'], [500, 'd'], [400, 'cd'], [100, 'c'],$/;"	v
s:abbreviate_from_dict	plugged/vim-abolish/plugin/abolish.vim	/^function! s:abbreviate_from_dict(cmd,dict)$/;"	f
s:action_for	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:action_for(key, ...)$/;"	f
s:add_db	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^function! s:add_db(db_file) abort$/;"	f
s:add_format	plugged/vim-speeddating/plugin/speeddating.vim	/^function! s:add_format(master,count,bang)$/;"	f
s:add_methods	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
s:added_db_files	plugged/vim-gutentags/autoload/gutentags/gtags_cscope.vim	/^let s:added_db_files = {}$/;"	v
s:added_dbs	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:added_dbs = []$/;"	v
s:addr_other	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_other = has('patch-8.1.560') ? '-addr=other' : ''$/;"	v
s:addr_tabs	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_tabs  = has('patch-7.4.542') ? '-addr=tabs' : ''$/;"	v
s:addr_wins	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:addr_wins  = has('patch-7.4.542') ? '-addr=windows' : ''$/;"	v
s:after	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:after() abort$/;"	f
s:ag_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_handler(lines, has_column)$/;"	f
s:ag_to_qf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ag_to_qf(line, has_column)$/;"	f
s:align_lists	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_lists(lists)$/;"	f
s:align_pairs	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:align_pairs(list)$/;"	f
s:almost_black	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:almost_black = [ '#1c1c1c', 234 ]$/;"	v
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:ansi(str, group, default, ...)$/;"	f
s:ansi	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:ansi = {'black': 30, 'red': 31, 'green': 32, 'yellow': 33, 'blue': 34, 'magenta': 35, 'cya/;"	v
s:apply_icons	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:apply_icons() abort$/;"	f
s:applymodifer	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:applymodifer(number,modifier,width)$/;"	f
s:aqua	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:aqua = [ '#00ffff', 14 ]$/;"	v
s:aqua	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:aqua = '#3e999f'$/;"	v
s:aqua	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:aqua = '#3e999f'$/;"	v
s:arabic2roman	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:arabic2roman(arabic)$/;"	f
s:ary2pat	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:ary2pat(array)$/;"	f
s:assert	plugged/lightline.vim/test/autocmd.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/concatenate.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/error.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/expand.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/highlight.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/link.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/mode.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/onetab.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/popup.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/quickfix.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/subseparator.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/tabline.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/tabs.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/toggle.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:assert	plugged/lightline.vim/test/uniq.vim	/^let s:assert = themis#helper('assert')$/;"	v
s:attach_autocmds	plugged/vim-sneak/plugin/sneak.vim	/^func! s:attach_autocmds() abort$/;"	f
s:background	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:background = '#444444'$/;"	v
s:background	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:background = '#F5F5F5'$/;"	v
s:bad_git_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:bad_git_dir = '\/$\\|^fugitive:'$/;"	v
s:badgood	plugged/vim-abolish/plugin/abolish.vim	/^function! s:badgood(args)$/;"	f
s:balance_matchpairs	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:balance_matchpairs(char) "{{{$/;"	f
s:bang_edits	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:bang_edits = {'split': 'Git', 'vsplit': 'vert Git', 'tabedit': 'tab Git', 'pedit': 'Git!'}$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base0 = '#666666'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base0 = '#909090'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base0 = '#ffffff'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base0 = '#949494'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base0 = '#777777'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base0 = '#e6e1cf'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base0 = '#5C6773'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base0 = '#d9d7ce'$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base0 = [ '#839496', s:cuicolors.base0[s:cuiindex] ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base0 = [ '#808070', 244 ]$/;"	v
s:base0	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base0 = [ '#808080', 244 ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base00 = '#808080'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base00 = '#666666'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base00 = '#6060df'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base00 = '#767676'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base00 = '#666666'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base00 = '#14191f'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base00 = '#FFFFFF'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base00 = '#272d38'$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base00 = [ '#657b83', s:cuicolors.base00[s:cuiindex] ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base00 = [ '#666656', 242  ]$/;"	v
s:base00	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base00 = [ '#666666', 242  ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base01 = '#b4b4b4'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base01 = '#555555'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base01 = '#6060af'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base01 = '#606060'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base01 = '#555555'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base01 = '#14191f'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base01 = '#FFFFFF'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base01 = '#272d38'$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base01 = [ '#586e75', s:cuicolors.base01[s:cuiindex] ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base01 = [ '#4e4e43', 239 ]$/;"	v
s:base01	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base01 = [ '#585858', 240 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base02 = '#c8c8c8'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base02 = '#434343'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base02 = '#606087'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base02 = '#4e4e4e'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base02 = '#444444'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base02 = '#0f1419'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base02 = '#FAFAFA'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base02 = '#212733'$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base02 = [ '#073642', s:cuicolors.base02[s:cuiindex] ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base02 = [ '#30302c', 236 ]$/;"	v
s:base02	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base02 = [ '#444444', 238 ]$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base023 = '#dfdfdf'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base023 = '#303030'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base023 = '#202087'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base023 = '#262626'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base023 = '#333333'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base023 = '#0f1419'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base023 = '#FAFAFA'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base023 = '#212733'$/;"	v
s:base023	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base023 = [ '#353535', 236 ]$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base03 = '#fafafa'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base03 = '#1d1f21'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base03 = '#002451'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base03 = '#12124c'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base03 = '#2d2d2d'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base03 = '#e6b673'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base03 = '#E6B673'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base03 = '#ffc44c'$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base03 = [ '#002b36', s:cuicolors.base03[s:cuiindex] ]$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base03 = [ '#151513', 233 ]$/;"	v
s:base03	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base03 = [ '#242424', 235 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base1 = '#555555'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base1 = '#a0a0a0'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base1 = '#ffffff'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base1 = '#b2b2b2'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base1 = '#999999'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base1 = '#e6e1cf'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base1 = '#5C6773'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base1 = '#d9d7ce'$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base1 = [ '#93a1a1', s:cuicolors.base1[s:cuiindex] ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base1 = [ '#949484', 246 ]$/;"	v
s:base1	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base1 = [ '#969696', 247 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base2 = '#4f4f4f'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base2 = '#bababa'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base2 = '#ffffff'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base2 = '#c6c6c6'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base2 = '#aaaaaa'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base2 = '#3e4b59'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base2 = '#828C99'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base2 = '#607080'$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base2 = [ '#eee8d5', s:cuicolors.base2[s:cuiindex] ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base2 = [ '#a8a897', 248 ]$/;"	v
s:base2	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base2 = [ '#a8a8a8', 248 ]$/;"	v
s:base23	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base23 = '#ffffff'$/;"	v
s:base23	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base23 = '#d0d0d0'$/;"	v
s:base23	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base23 = '#bbbbbb'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:base3 = '#4d4d4c'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:base3 = '#c5c8c6'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:base3 = '#ffffff'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:base3 = '#eaeaea'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:base3 = '#cccccc'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:base3 = '#e6e1cf'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:base3 = '#5C6773'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:base3 = '#d9d7ce'$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:base3 = [ '#fdf6e3', s:cuicolors.base3[s:cuiindex] ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:base3 = [ '#e8e8d3', 253 ]$/;"	v
s:base3	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:base3 = [ '#d0d0d0', 252 ]$/;"	v
s:base_dir	plugged/fzf/plugin/fzf.vim	/^  let s:base_dir = expand('<sfile>:h:h')$/;"	v
s:beep	plugged/vim-surround/plugin/surround.vim	/^function! s:beep()$/;"	f
s:before	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:before() abort$/;"	f
s:begin_failed_skip_pattern	plugged/ale/ale_linters/perl/perl.vim	/^let s:begin_failed_skip_pattern = '\\v' . join([$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#263238'$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#263238'$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:bg     = '#ffffff'$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg    = [ '#282c34', 235 ]$/;"	v
s:bg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:bg    = [ '#fafafa', 255 ]$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bg_1      = ['#252525', 0]$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bg_1      = ['#184956', 0]$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bg_1      = ['#ece3cc', 0]$/;"	v
s:bg_1	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bg_1      = ['#ebebeb', 0]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bg_2      = ['#3b3b3b', 8]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bg_2      = ['#2d5b69', 8]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bg_2      = ['#d5cdb6', 8]$/;"	v
s:bg_2	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bg_2      = ['#cdcdcd', 8]$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = fnamemodify(s:bin.preview, ':8')$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^    let s:bin.preview = split(system('for %A in ("'.s:bin.preview.'") do @echo %~sA'), "\\n")[0]$/;"	v
s:bin	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin = {$/;"	v
s:bin_dir	plugged/ale/autoload/ale/python.vim	/^let s:bin_dir = has('unix') ? 'bin' : 'Scripts'$/;"	v
s:bin_dir	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:bin_dir = expand('<sfile>:p:h:h:h').'\/bin\/'$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:black(x) abort$/;"	f
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:black = [ '#000000', 0 ]$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:black = [ '#2b2b2b', 235 ]$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:black = [ '#232526', 233 ]$/;"	v
s:black	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:black = [ '#000000', '0' ]$/;"	v
s:black2	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:black2 = [ '#121212', '233' ]$/;"	v
s:blink.clear	plugged/vim-slash/plugin/slash.vim	/^  function! s:blink.clear()$/;"	f
s:blink.tick	plugged/vim-slash/plugin/slash.vim	/^  function! s:blink.tick(_)$/;"	f
s:blobdirs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:blobdirs = {}$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:blue = [ '#0000ff', 12 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:blue = [ '#4fb4d8' , 39 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:blue = '#00afaf'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:blue = '#4271ae'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:blue = '#4271ae'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:blue = '#81a2be'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:blue = '#bbdaff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:blue = '#7aa6da'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:blue = '#99cccc'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:blue = '#36a3d9'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:blue = '#59c2ff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:blue = '#59c2ff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:blue = [ '#6897bb' , 67 ] $/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:blue = [ '#8197bf', 103 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:blue   = '#89ddff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:blue   = '#82aaff'$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:blue   = [ '#61afef', 75 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:blue      = ['#368aeb', 4]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:blue      = ['#4695f7', 4]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:blue      = ['#0072d4', 4]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:blue      = ['#0064e4', 4]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:blue = [ '#87afaf', 109 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:blue = [ '#5f87af', '67' ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:blue = [ '#268bd2', s:cuicolors.blue[s:cuiindex] ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:blue = [ '#5573a3', 4 ]$/;"	v
s:blue	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:blue = [ '#8ac6f2', 117 ]$/;"	v
s:blue2	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:blue2 = [ '#91aadf', '110' ]$/;"	v
s:border_opt	plugged/fzf/plugin/fzf.vim	/^function! s:border_opt(window)$/;"	f
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brblue    = ['#4f9cfe', 12]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brblue    = ['#58a3ff', 12]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brblue    = ['#006dce', 12]$/;"	v
s:brblue	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brblue    = ['#0054cf', 12]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brcyan    = ['#56d8c9', 14]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brcyan    = ['#53d6c7', 14]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brcyan    = ['#00978a', 14]$/;"	v
s:brcyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brcyan    = ['#009a8a', 14]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brgreen   = ['#83c746', 10]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brgreen   = ['#84c747', 10]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brgreen   = ['#428b00', 10]$/;"	v
s:brgreen	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brgreen   = ['#008400', 10]$/;"	v
s:bright_blue	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_blue = [ '#8eb2f7', 12 ]$/;"	v
s:bright_green	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_green = [ '#98bc37', 10 ]$/;"	v
s:bright_magenta	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:bright_magenta = [ '#e35682', 13 ]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brmagenta = ['#ff81ca', 13]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brmagenta = ['#ff84cd', 13]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brmagenta = ['#c44392', 13]$/;"	v
s:brmagenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brmagenta = ['#c7008b', 13]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:brred     = ['#ff5e56', 9]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:brred     = ['#ff665c', 9]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:brred     = ['#cc1729', 9]$/;"	v
s:brred	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:brred     = ['#bf0000', 9]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:bryellow  = ['#efc541', 11]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:bryellow  = ['#ebc13d', 11]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:bryellow  = ['#a78300', 11]$/;"	v
s:bryellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:bryellow  = ['#af8500', 11]$/;"	v
s:btags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_sink(lines)$/;"	f
s:btags_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:btags_source(tag_cmds)$/;"	f
s:buf_close	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_close() abort$/;"	f
s:buf_init	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_init() abort$/;"	f
s:buf_isvalid	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_isvalid(bnr) abort$/;"	f
s:buf_modified	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_modified() abort$/;"	f
s:buf_render	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:buf_render(dir, lastpath) abort$/;"	f
s:buffer_data	plugged/ale/autoload/ale/command.vim	/^    let s:buffer_data = {}$/;"	v
s:buffer_line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_line_handler(lines)$/;"	f
s:buffer_lines	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buffer_lines(query)$/;"	f
s:buffer_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_repo	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
s:buffer_type	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
s:buflisted	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:buflisted()$/;"	f
s:bufopen	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:bufopen(lines)$/;"	f
s:bufwin_do	plugged/vim-dirvish/autoload/dirvish.vim	/^  function! s:bufwin_do(cmd, bname) abort$/;"	f
s:c	plugged/vim-abolish/plugin/abolish.vim	/^function! s:c()$/;"	f
s:cache_project_root	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:cache_project_root(path) abort$/;"	f
s:cached_map	plugged/ale/autoload/ale/filetypes.vim	/^let s:cached_map = {}$/;"	v
s:calc_size	plugged/fzf/plugin/fzf.vim	/^function! s:calc_size(max, val, dict)$/;"	f
s:callback	plugged/fzf/plugin/fzf.vim	/^function! s:callback(dict, lines) abort$/;"	f
s:camelcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:camelcase(word)$/;"	f
s:can_diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:can_diffoff(buf) abort$/;"	f
s:cb_map	plugged/vim-dirvish/autoload/dirvish.vim	/^let s:cb_map = {}   " callback map$/;"	v
s:cfile	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cfile() abort$/;"	f
s:changesurround	plugged/vim-surround/plugin/surround.vim	/^function! s:changesurround(...) " {{{1$/;"	f
s:channel_map	plugged/ale/autoload/ale/socket.vim	/^let s:channel_map = get(s:, 'channel_map', {})$/;"	v
s:chars	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:chars(string)$/;"	f
s:check_requirements	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:check_requirements()$/;"	f
s:checked	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:checked = 0$/;"	v
s:checked	plugged/fzf/plugin/fzf.vim	/^let s:checked = {}$/;"	v
s:checked_ctags	plugged/rust.vim/autoload/rust/tags.vim	/^let s:checked_ctags = 0$/;"	v
s:chomp	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:chomp(str)$/;"	f
s:classpath_sep	plugged/ale/ale_linters/java/javac.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:classpath_sep	plugged/ale/ale_linters/kotlin/kotlinc.vim	/^let s:classpath_sep = has('unix') ? ':' : ';'$/;"	v
s:clear	plugged/lightline.vim/test/link.vim	/^function! s:clear()$/;"	f
s:clear_syntax	plugged/vim-sneak/autoload/sneak/label.vim	/^let s:clear_syntax = !has('patch-7.4.792')$/;"	v
s:closematch	plugged/vim-surround/plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
s:cmd	plugged/fzf/plugin/fzf.vim	/^function! s:cmd(bang, ...) abort$/;"	f
s:cmd_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:cmd_history_sink(lines)$/;"	f
s:codefix_map	plugged/ale/autoload/ale/codefix.vim	/^let s:codefix_map = {}$/;"	v
s:coerce	plugged/vim-abolish/plugin/abolish.vim	/^function! s:coerce(type) abort$/;"	f
s:col_end_patterns	plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:col_end_patterns = [$/;"	v
s:collect	plugged/fzf/plugin/fzf.vim	/^function! s:collect(temps) abort$/;"	f
s:columns	plugged/lightline.vim/autoload/lightline.vim	/^let s:columns = -1$/;"	v
s:command_output	plugged/ale/autoload/ale/assert.vim	/^let s:command_output = []$/;"	v
s:command_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:command_sink(lines)$/;"	f
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands = {}$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev     = s:commands.abstract.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.abbrev.options = {"buffer":0,"cmdline":0,"delete":0}$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.abstract = s:object.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.delete   = s:commands.abbrev.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.delete.options.delete = 1$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.search = s:commands.abstract.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.search.options = {"word": 0, "variable": 0, "flags": ""}$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.substitute = s:commands.abstract.clone()$/;"	v
s:commands	plugged/vim-abolish/plugin/abolish.vim	/^let s:commands.substitute.options = {"word": 0, "variable": 0, "flags": "g"}$/;"	v
s:commands.abbrev.process	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.abbrev.process(bang,line1,line2,count,args)$/;"	f
s:commands.abstract.dispatch	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.dispatch(bang,line1,line2,count,args)$/;"	f
s:commands.abstract.go	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.abstract.go(bang,line1,line2,count,args)$/;"	f
s:commands.search.process	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.search.process(bang,line1,line2,count,args)$/;"	f
s:commands.substitute.process	plugged/vim-abolish/plugin/abolish.vim	/^function! s:commands.substitute.process(bang,line1,line2,count,args)$/;"	f
s:commits	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits(range, buffer_local, args)$/;"	f
s:commits_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:commits_sink(lines)$/;"	f
s:common_sink	plugged/fzf/plugin/fzf.vim	/^function! s:common_sink(action, lines) abort$/;"	f
s:commondirs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:commondirs = {}$/;"	v
s:compare_binary_versions	plugged/fzf/plugin/fzf.vim	/^function! s:compare_binary_versions(a, b)$/;"	f
s:compare_versions	plugged/fzf/plugin/fzf.vim	/^function! s:compare_versions(a, b)$/;"	f
s:comparecase	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:comparecase(i1, i2)$/;"	f
s:compile_commands_cache	plugged/ale/autoload/ale/c.vim	/^    let s:compile_commands_cache = {}$/;"	v
s:complete_insert	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_insert(lines)$/;"	f
s:complete_trigger	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:complete_trigger()$/;"	f
s:config	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:config = {}$/;"	v
s:connections	plugged/ale/autoload/ale/lsp.vim	/^let s:connections = get(s:, 'connections', {})$/;"	v
s:convert	plugged/lightline.vim/autoload/lightline.vim	/^function! s:convert(name, index) abort$/;"	f
s:convert	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:convert(rgb) abort$/;"	f
s:cpath	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:cpath(path, ...) abort$/;"	f
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf.vim/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/fzf/plugin/fzf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-sneak/plugin/sneak.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugged/vim-speeddating/plugin/speeddating.vim	/^let s:cpo_save = &cpo$/;"	v
s:create_dictionary	plugged/vim-abolish/plugin/abolish.vim	/^function! s:create_dictionary(lhs,rhs,opts)$/;"	f
s:create_popup	plugged/fzf/plugin/fzf.vim	/^  function s:create_popup(hl, opts) abort$/;"	f
s:create_popup	plugged/fzf/plugin/fzf.vim	/^  function! s:create_popup(hl, opts) abort$/;"	f
s:createtimehandler	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:createtimehandler(format)$/;"	f
s:csi	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:csi(color, fg)$/;"	f
s:ctags_is_uctags	plugged/rust.vim/autoload/rust/tags.vim	/^let s:ctags_is_uctags = 0$/;"	v
s:cuicolor	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:cuicolor = {$/;"	v
s:cuicolors	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cuicolors = {$/;"	v
s:cuiindex	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 0$/;"	v
s:cuiindex	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 1$/;"	v
s:cuiindex	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^  let s:cuiindex = 2$/;"	v
s:current_ale_version	plugged/ale/autoload/ale.vim	/^let s:current_ale_version = [3, 1, 0]$/;"	v
s:cursor_idx	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:cursor_idx() "{{{$/;"	f
s:cursor_timer	plugged/ale/autoload/ale/cursor.vim	/^let s:cursor_timer = -1$/;"	v
s:cursor_timer	plugged/ale/autoload/ale/virtualtext.vim	/^let s:cursor_timer = -1$/;"	v
s:custom_handlers_map	plugged/ale/autoload/ale/lsp_linter.vim	/^let s:custom_handlers_map = get(s:, 'custom_handlers_map', {})$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:cyan = '#3e999f'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:cyan = '#8abeb7'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:cyan = '#99ffff'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:cyan = '#70c0b1'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:cyan = '#009999'$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:cyan = s:blue$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:cyan = s:blue$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:cyan = s:blue$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:cyan = [ '#8fbfdc', 110 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:cyan = [ '#66d9ef', 81 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:cyan      = ['#3fc5b7', 6]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:cyan      = ['#41c7b9', 6]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:cyan      = ['#009c8f', 6]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:cyan      = ['#00ad9c', 6]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:cyan = [ '#87d7d7', 23 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:cyan = [ '#2aa198', s:cuicolors.cyan[s:cuiindex] ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:cyan = [ '#0aaeb3', 6 ]$/;"	v
s:cyan	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:cyan = s:blue$/;"	v
s:darkGray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:darkGray = [ '#45474f' , 238 ]$/;"	v
s:darker_grey	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:darker_grey  = [ '#262626', 235 ]$/;"	v
s:dashcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:dashcase(word)$/;"	f
s:dateincrement	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:dateincrement(string,offset,increment) dict$/;"	f
s:days_abbr	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:days_abbr   =map(range(86400*3+43200-s:offset*60,86400*12,86400),'strftime("%a",v:val)')[0/;"	v
s:days_engl	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:days_engl   =["Sun","Mon","Tue","Wed","Thu","Fri","Sat"]$/;"	v
s:days_full	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:days_full   =map(range(86400*3+43200-s:offset*60,86400*12,86400),'strftime("%A",v:val)')[0/;"	v
s:default_action	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:default_action = {$/;"	v
s:default_action	plugged/fzf/plugin/fzf.vim	/^let s:default_action = {$/;"	v
s:default_ale_linter_aliases	plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linter_aliases = {$/;"	v
s:default_ale_linters	plugged/ale/autoload/ale/linter.vim	/^let s:default_ale_linters = {$/;"	v
s:default_color	plugged/vim-sneak/autoload/sneak/util.vim	/^func! s:default_color(hlgroup, what, mode) abort$/;"	f
s:default_layout	plugged/fzf/plugin/fzf.vim	/^function! s:default_layout()$/;"	f
s:default_register	plugged/vim-repeat/autoload/repeat.vim	/^function! s:default_register()$/;"	f
s:default_registry	plugged/ale/autoload/ale/fix/registry.vim	/^let s:default_registry = {$/;"	v
s:defaults	plugged/fzf/plugin/fzf.vim	/^function! s:defaults()$/;"	f
s:defs	plugged/fzf.vim/plugin/fzf.vim	/^function! s:defs(commands)$/;"	f
s:delimitMate_extra_excluded_regions	plugged/rust.vim/autoload/rust/delimitmate.vim	/^let s:delimitMate_extra_excluded_regions = ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
s:did_check_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:did_check_exe = 0$/;"	v
s:diff_modifier	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_modifier(count) abort$/;"	f
s:diff_restore	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_restore() abort$/;"	f
s:diff_window_count	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diff_window_count() abort$/;"	f
s:diffoff	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff() abort$/;"	f
s:diffoff_all	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffoff_all(dir) abort$/;"	f
s:diffthis	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:diffthis() abort$/;"	f
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:dim_0     = ['#777777', 7]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:dim_0     = ['#72898f', 7]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:dim_0     = ['#909995', 7]$/;"	v
s:dim_0	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:dim_0     = ['#878787', 7]$/;"	v
s:dir_for_worktree	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:dir_for_worktree = {}$/;"	v
s:disable_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:disable_colors = []$/;"	v
s:disable_conceal_in_other_windows	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:disable_conceal_in_other_windows() abort$/;"	f
s:dispatcher	plugged/vim-abolish/plugin/abolish.vim	/^function! s:dispatcher(bang,line1,line2,count,args)$/;"	f
s:div	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:div(a,b)$/;"	f
s:do_label	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:do_label(s, v, reverse, label) abort "{{{$/;"	f
s:dopopd	plugged/fzf/plugin/fzf.vim	/^function! s:dopopd()$/;"	f
s:dosurround	plugged/vim-surround/plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
s:dotcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:dotcase(word)$/;"	f
s:edit_jobs	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:edit_jobs = {}$/;"	v
s:egrep_pattern	plugged/vim-abolish/plugin/abolish.vim	/^function! s:egrep_pattern(dict,boundaries)$/;"	f
s:enable_neovim	plugged/ale/ale_linters/vim/vint.vim	/^let s:enable_neovim = has('nvim') ? ' --enable-neovim' : ''$/;"	v
s:enc_to_cp	plugged/fzf/plugin/fzf.vim	/^  function! s:enc_to_cp(str)$/;"	f
s:end_col_pattern_map	plugged/ale/ale_linters/python/flake8.vim	/^let s:end_col_pattern_map = {$/;"	v
s:end_col_patterns	plugged/ale/ale_linters/nim/nimcheck.vim	/^let s:end_col_patterns = [$/;"	v
s:error	plugged/fzf/plugin/fzf.vim	/^function! s:error(msg)$/;"	f
s:error	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:error = '#5f0000'$/;"	v
s:error	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:error = '#ffafdf'$/;"	v
s:escape	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:escape(path)$/;"	f
s:escape	plugged/fzf/plugin/fzf.vim	/^function! s:escape(path)$/;"	f
s:escape	plugged/vim-dirvish/syntax/dirvish.vim	/^let s:escape = 'substitute(escape(v:val, ".$~"), "*", ".*", "g")'$/;"	v
s:escape	plugged/vim-slash/plugin/slash.vim	/^function! s:escape(backward)$/;"	f
s:eval	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:eval(dict, key, arg)$/;"	f
s:evaluate_expand	plugged/lightline.vim/autoload/lightline.vim	/^function! s:evaluate_expand(component) abort$/;"	f
s:evaluate_opts	plugged/fzf/plugin/fzf.vim	/^function! s:evaluate_opts(options)$/;"	f
s:excmds	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:excmds()$/;"	f
s:exec_paths	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:exec_paths = {}$/;"	v
s:executable	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:executable(binary) abort$/;"	f
s:executable_cache_map	plugged/ale/autoload/ale/engine.vim	/^    let s:executable_cache_map = {}$/;"	v
s:executables	plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:executables = [$/;"	v
s:executables	plugged/ale/autoload/ale/handlers/solhint.vim	/^let s:executables = [$/;"	v
s:executables	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:executables = {}$/;"	v
s:execute	plugged/fzf/plugin/fzf.vim	/^function! s:execute(dict, command, use_height, temps) abort$/;"	f
s:execute_term	plugged/fzf/plugin/fzf.vim	/^function! s:execute_term(dict, command, temps) abort$/;"	f
s:execute_tmux	plugged/fzf/plugin/fzf.vim	/^function! s:execute_tmux(dict, command, temps) abort$/;"	f
s:exists	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:exists(name, ...) "{{{$/;"	f
s:exit_handler	plugged/fzf/plugin/fzf.vim	/^function! s:exit_handler(code, command, ...)$/;"	f
s:expand	plugged/lightline.vim/autoload/lightline.vim	/^function! s:expand(components) abort$/;"	f
s:expand	plugged/lightline.vim/test/expand.vim	/^function! s:expand(...)$/;"	f
s:expand	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:expand = '\\%(\\(' . s:var . '\\)\\(' . s:flag . '*\\)\\(:S\\)\\=\\)'$/;"	v
s:expand_braces	plugged/vim-abolish/plugin/abolish.vim	/^function! s:expand_braces(dict)$/;"	f
s:extend	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:extend(base, extra)$/;"	f
s:extend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:extend_opts(dict, eopts, prepend)$/;"	f
s:extractafter	plugged/vim-surround/plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
s:extractbefore	plugged/vim-surround/plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
s:extractopts	plugged/vim-abolish/plugin/abolish.vim	/^function! s:extractopts(list,opts)$/;"	f
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:fg     = '#d5dbe5'$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:fg     = '#eeffff'$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:fg    = [ '#494b53', 238 ]$/;"	v
s:fg	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:fg    = [ '#abb2bf', 145 ]$/;"	v
s:file_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_commit_pattern = s:file_pattern . '\\|^\\%(\\l\\{3,\\} \\)\\=[0-9a-f]\\{4,\\} '$/;"	v
s:file_options	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_options(prefix)$/;"	f
s:file_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:file_pattern = '^[A-Z?] .\\|^diff --'$/;"	v
s:file_source	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_source(prefix)$/;"	f
s:file_split_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:file_split_prefix(prefix)$/;"	f
s:fill_quickfix	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fill_quickfix(list, ...)$/;"	f
s:find_command	plugged/vim-abolish/plugin/abolish.vim	/^function! s:find_command(cmd,flags,word)$/;"	f
s:find_open_window	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:find_open_window(b)$/;"	f
s:findatoffset	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:findatoffset(string,pattern,offset)$/;"	f
s:findinline	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:findinline(pattern)$/;"	f
s:first_line	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:first_line(lines)$/;"	f
s:fixindent	plugged/vim-surround/plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
s:flag	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:flag = '\\%(:[p8~.htre]\\|:g\\=s\\(.\\).\\{-\\}\\1.\\{-\\}\\1\\)'$/;"	v
s:fmt_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:fmt_excmd = '   '.s:blue('%-38s', 'Statement').'%s'$/;"	v
s:fname_prefix	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:fname_prefix(str)$/;"	f
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
s:fnameescape	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:fnameescape = " \\t\\n*?[{`$\\\\%#'\\"|!<"$/;"	v
s:foreground	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:foreground = '#d0d0d0'$/;"	v
s:foreground	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:foreground = '#4d4d4c'$/;"	v
s:format	plugged/ale/ale_linters/vim/vint.vim	/^let s:format = '-f "{file_path}:{line_number}:{column_number}: {severity}: {policy_name} - {desc/;"	v
s:format_cmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_cmd(line)$/;"	f
s:format_excmd	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_excmd(ex)$/;"	f
s:format_mark	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_mark(line)$/;"	f
s:format_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:format_win(tab, win, buf)$/;"	f
s:formattz	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:formattz(offset)$/;"	f
s:ft_hook	plugged/vim-sneak/plugin/sneak.vim	/^func! s:ft_hook() abort$/;"	f
s:fuchsia	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:fuchsia = [ '#ff00ff', 13 ]$/;"	v
s:func	plugged/lightline.vim/autoload/lightline.vim	/^function! s:func(name) abort$/;"	f
s:function	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^  function! s:function(name)$/;"	f
s:function	plugged/vim-abolish/plugin/abolish.vim	/^function! s:function(name)$/;"	f
s:function	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:function(name) abort$/;"	f
s:function	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:function(name)$/;"	f
s:fzf	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:fzf(name, opts, extra)$/;"	f
s:fzf_call	plugged/fzf/plugin/fzf.vim	/^  function! s:fzf_call(fn, ...)$/;"	f
s:fzf_expand	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_expand(fmt)$/;"	f
s:fzf_fnamemodify	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_fnamemodify(fname, mods)$/;"	f
s:fzf_getcwd	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_getcwd()$/;"	f
s:fzf_go	plugged/fzf/plugin/fzf.vim	/^let s:fzf_go = s:base_dir.'\/bin\/fzf'$/;"	v
s:fzf_project_dir	init.vim	/^let s:fzf_project_dir = $HOME . "\/dev\/projects\/"$/;"	v
s:fzf_project_sink	init.vim	/^function! s:fzf_project_sink(line)$/;"	f
s:fzf_restore_colors	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_restore_colors()$/;"	f
s:fzf_tempname	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tempname()$/;"	f
s:fzf_tmux	plugged/fzf/plugin/fzf.vim	/^function! s:fzf_tmux(dict)$/;"	f
s:fzf_tmux	plugged/fzf/plugin/fzf.vim	/^let s:fzf_tmux = s:base_dir.'\/bin\/fzf-tmux'$/;"	v
s:fzf_vim_term	plugged/fzf.vim/plugin/fzf.vim	/^  function! s:fzf_vim_term()$/;"	f
s:generate_wildignore_options	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:generate_wildignore_options() abort$/;"	f
s:get	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get(...) "{{{$/;"	f
s:get	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:get(name, default) "{{{$/;"	f
s:get_char	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get_char(...) "{{{$/;"	f
s:get_color	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_color	plugged/fzf/plugin/fzf.vim	/^function! s:get_color(attr, ...)$/;"	f
s:get_ctags_executable	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:get_ctags_executable(proj_dir) abort$/;"	f
s:get_git_root	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:get_git_root()$/;"	f
s:get_line_trimmed	plugged/rust.vim/indent/rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
s:get_syn_name	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:get_syn_name() "{{{$/;"	f
s:get_version	plugged/fzf/plugin/fzf.vim	/^function s:get_version(bin)$/;"	f
s:getchar	plugged/vim-surround/plugin/surround.vim	/^function! s:getchar()$/;"	f
s:getcmdwintype_exists	plugged/ale/autoload/ale.vim	/^let s:getcmdwintype_exists = exists('*getcmdwintype')$/;"	v
s:getnchars	plugged/vim-sneak/plugin/sneak.vim	/^func! s:getnchars(n, mode) abort$/;"	f
s:getpos	plugged/fzf/plugin/fzf.vim	/^function! s:getpos()$/;"	f
s:git_versions	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:git_versions = {}$/;"	v
s:given_range	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:given_range(line1, line2)$/;"	f
s:global_variable_list	plugged/ale/autoload/ale/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:global_variable_list	plugged/rust.vim/autoload/rust/debugging.vim	/^let s:global_variable_list = [$/;"	v
s:globlist	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:globlist(dir_esc, pat) abort$/;"	f
s:globsubs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:globsubs = {$/;"	v
s:go	plugged/vim-commentary/plugin/commentary.vim	/^function! s:go(...) abort$/;"	f
s:go_to_definition_map	plugged/ale/autoload/ale/definition.vim	/^let s:go_to_definition_map = {}$/;"	v
s:gold	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gold = [ '#f0d50c', '220' ]$/;"	v
s:got_fmt_error	plugged/rust.vim/autoload/rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:gray = [ '#808080', 8]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:gray = [ '#686b78' , 242 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:gray = [ '#323232', 236 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:gray = [ '#808080', 244 ]$/;"	v
s:gray	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray = [ '#262626', '235' ]$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#2c393f'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray1  = '#37474f'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#2e3c43'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray1  = '#314549'$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1 = [ '#494b53', 238 ]$/;"	v
s:gray1	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray1 = [ '#5c6370', 241 ]$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#2c393f'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray2  = '#d5dbe5'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#2E3C43'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray2  = '#eeffff'$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2 = [ '#2c323d', 235 ]$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray2 = [ '#f0f0f0', 255 ]$/;"	v
s:gray2	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray2 = [ '#3a3a3a', '237' ]$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#37474f'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:gray3  = '#707880'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#314549'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:gray3  = '#546e7a'$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3 = [ '#3e4452', 240 ]$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:gray3 = [ '#d0d0d0', 250 ]$/;"	v
s:gray3	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray3 = [ '#4e4e4e', '239' ]$/;"	v
s:gray4	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:gray4 = [ '#626262', '241' ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:green = [ '#008000', 2 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:green = [ '#78bd65' , 41 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:green = '#008700'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:green = '#008700'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:green = '#718c00'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:green = '#b5bd68'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:green = '#d1f1a9'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:green = '#b9ca4a'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:green = '#99cc99'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:green        = [ '#5f875f',  65 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:green = '#b8cc52'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:green = '#86B300'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:green = '#bbe67e'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:green = [ '#629755', 71 ] $/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:green = [ '#99ad6a', 107 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:green  = '#8bd649'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:green  = '#c3e88d'$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:green = [ '#a6e22e', 118 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:green = [ '#98c379', 35 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:green  = [ '#98c379', 76 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:green     = ['#70b433', 2]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:green     = ['#75b938', 2]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:green     = ['#489100', 2]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:green     = ['#1d9700', 2]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:green = [ '#87af87', 108 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:green = [ '#57ba37', '71' ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:green = [ '#859900', s:cuicolors.green[s:cuiindex] ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:green = [ '#519f50', 2 ]$/;"	v
s:green	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:green = [ '#95e454', 119 ]$/;"	v
s:gregorian	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:gregorian(jd)$/;"	f
s:grep_command	plugged/vim-abolish/plugin/abolish.vim	/^function! s:grep_command(args,bang,flags,word)$/;"	f
s:gsub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
s:guicolor	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:guicolor = {$/;"	v
s:has_any	plugged/fzf/plugin/fzf.vim	/^function! s:has_any(dict, keys)$/;"	f
s:has_dict_maparg	plugged/supertab/plugin/supertab.vim	/^  let s:has_dict_maparg = v:version > 703 || (v:version == 703 && has('patch32'))$/;"	v
s:has_features	plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && exists('*job_start') && exists('*ch_close_in')$/;"	v
s:has_features	plugged/ale/plugin/ale.vim	/^    let s:has_features = has('timers') && has('nvim-0.2.0')$/;"	v
s:has_nvim_highlight	plugged/ale/autoload/ale/highlight.vim	/^let s:has_nvim_highlight = exists('*nvim_buf_add_highlight') && exists('*nvim_buf_clear_namespac/;"	v
s:has_webapi	plugged/rust.vim/autoload/rust.vim	/^function! s:has_webapi()$/;"	f
s:hash_colors	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:hash_colors = {}$/;"	v
s:head_cache	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:head_cache = {}$/;"	v
s:helptag_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:helptag_sink(line)$/;"	f
s:hi	plugged/lightline.vim/test/highlight.vim	/^function! s:hi(name)$/;"	f
s:hi	plugged/lightline.vim/test/link.vim	/^function! s:hi(name)$/;"	f
s:highlight_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:highlight_keys(str)$/;"	f
s:highlight_line	plugged/ale/autoload/ale/highlight.vim	/^function! s:highlight_line(bufnr, lnum, group) abort$/;"	f
s:highlight_range	plugged/ale/autoload/ale/highlight.vim	/^function! s:highlight_range(bufnr, range, group) abort$/;"	f
s:history	plugged/fzf.vim/plugin/fzf.vim	/^function! s:history(arg, extra, bang)$/;"	f
s:history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_sink(type, lines)$/;"	f
s:history_source	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:history_source(type)$/;"	f
s:hover_map	plugged/ale/autoload/ale/hover.vim	/^let s:hover_map = {}$/;"	v
s:immobile	plugged/vim-slash/plugin/slash.vim	/^function! s:immobile(seq)$/;"	f
s:incrementstring	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:incrementstring(string,offset,count)$/;"	f
s:indexes	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:indexes = {}$/;"	v
s:info	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:info(paths, dirsize) abort$/;"	f
s:init	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:init() "{{{$/;"	f
s:init_hl	plugged/vim-sneak/autoload/sneak/util.vim	/^func! s:init_hl() abort$/;"	f
s:init_path	plugged/ale/autoload/ale/gradle.vim	/^let s:init_path = has('win32')$/;"	v
s:initializetime	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:initializetime(time)$/;"	f
s:inject_snippet	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:inject_snippet(line)$/;"	f
s:inline_pattern	plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:inline_pattern = '\\v inlined from .* at \\<stdin\\>:(\\d+):(\\d+):$'$/;"	v
s:inputreplacement	plugged/vim-surround/plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
s:inputtarget	plugged/vim-surround/plugin/surround.vim	/^function! s:inputtarget()$/;"	f
s:insert	plugged/vim-surround/plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
s:install_dir	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:install_dir = expand("<sfile>:p:h:h")$/;"	v
s:is_cr_expansion	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_cr_expansion(...) " {{{$/;"	f
s:is_empty_matchpair	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_matchpair() "{{{$/;"	f
s:is_empty_quotes	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_empty_quotes() "{{{$/;"	f
s:is_excluded_ft	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_excluded_ft(ft) "{{{$/;"	f
s:is_forbidden	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_forbidden(char) "{{{$/;"	f
s:is_jump	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_jump(...) "{{{$/;"	f
s:is_smart_quote	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_smart_quote(char) "{{{$/;"	f
s:is_space_expansion	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:is_space_expansion() " {{{$/;"	f
s:is_special_key	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:is_special_key(key) abort$/;"	f
s:is_string_comment	plugged/rust.vim/indent/rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
s:is_valid_altbuf	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:is_valid_altbuf(bnr) abort$/;"	f
s:is_win	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf.vim/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:is_win	plugged/fzf/plugin/fzf.vim	/^let s:is_win = has('win32') || has('win64')$/;"	v
s:isdir	plugged/vim-dirvish/plugin/dirvish.vim	/^function! s:isdir(dir)$/;"	f
s:item_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:item_pattern = s:file_commit_pattern . '\\|^@@'$/;"	v
s:jd	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:jd(year,mon,day)$/;"	f
s:job_kill_timers	plugged/ale/autoload/ale/job.vim	/^    let s:job_kill_timers = {}$/;"	v
s:job_map	plugged/ale/autoload/ale/job.vim	/^    let s:job_map = {}$/;"	v
s:joinUndo	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:joinUndo() "{{{$/;"	f
s:jump	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:jump(t, w)$/;"	f
s:key_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:key_sink(line)$/;"	f
s:known_files	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_files = []$/;"	v
s:known_projects	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:known_projects = {}$/;"	v
s:language_id_of_filetype	plugged/ale/autoload/ale/handlers/ocamllsp.vim	/^let s:language_id_of_filetype = {$/;"	v
s:last_done_pos	plugged/ale/autoload/ale/completion.vim	/^let s:last_done_pos = []$/;"	v
s:last_list	plugged/ale/autoload/ale/preview.vim	/^    let s:last_list = []$/;"	v
s:last_options	plugged/ale/autoload/ale/preview.vim	/^    let s:last_options = {}$/;"	v
s:last_pattern_options	plugged/ale/autoload/ale/pattern_options.vim	/^let s:last_pattern_options = {}$/;"	v
s:last_pos	plugged/ale/autoload/ale/hover.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_pos	plugged/ale/autoload/ale/virtualtext.vim	/^let s:last_pos = [0, 0, 0]$/;"	v
s:last_time	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:last_time = reltime()$/;"	v
s:last_times	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:last_times = {}$/;"	v
s:last_wildignores	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:last_wildignores = ''$/;"	v
s:launcher	plugged/fzf/plugin/fzf.vim	/^  let s:launcher = '%s'$/;"	v
s:launcher	plugged/fzf/plugin/fzf.vim	/^  let s:launcher = function('s:xterm_launcher')$/;"	v
s:layout_keys	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:layout_keys = ['window', 'up', 'down', 'left', 'right']$/;"	v
s:layout_keys	plugged/fzf/plugin/fzf.vim	/^let s:layout_keys = ['window', 'tmux', 'up', 'down', 'left', 'right']$/;"	v
s:letterincrement	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:letterincrement(string,offset,increment)$/;"	f
s:lightGray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:lightGray = [ '#848794' , 245 ]$/;"	v
s:lighter_grey	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:lighter_grey = [ '#bcbcbc', 250 ]$/;"	v
s:lime	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:lime = [ '#00ff00', 10 ]$/;"	v
s:line	plugged/lightline.vim/autoload/lightline.vim	/^function! s:line(tabline, inactive) abort$/;"	f
s:line_handler	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:line_handler(lines)$/;"	f
s:linechars	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:linechars(pattern) abort$/;"	f
s:lint_timer	plugged/ale/autoload/ale.vim	/^let s:lint_timer = -1$/;"	v
s:linters	plugged/ale/autoload/ale/linter.vim	/^let s:linters = {}$/;"	v
s:lisp_regex	plugged/ale/autoload/ale/completion.vim	/^let s:lisp_regex = '\\v[a-zA-Z_\\-][a-zA-Z_\\-0-9]*$'$/;"	v
s:list_dir	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:list_dir(dir) abort$/;"	f
s:load	plugged/lightline.vim/autoload/lightline/colortable.vim	/^function! s:load() abort$/;"	f
s:loaded_delimitMate	plugged/delimitMate/plugin/delimitMate.vim	/^let s:loaded_delimitMate = 1$/;"	v
s:localtime	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:localtime(...)$/;"	f
s:log_diff_context	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:log_diff_context = '{"filename": fugitive#Find(v:val . from, a:dir), "lnum": get(offsets, /;"	v
s:lquote	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:lquote(char) "{{{$/;"	f
s:lsp_linter_map	plugged/ale/autoload/ale/lsp_linter.vim	/^    let s:lsp_linter_map = {}$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:magenta = '#8959a8'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:magenta = '#b294bb'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:magenta = '#ebbbff'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:magenta = '#c397d8'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:magenta = '#cc99cc'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:magenta = '#ffee99'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:magenta = '#A37ACC'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:magenta = '#d4bfff'$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:magenta = [ '#f0a0c0', 217 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:magenta   = ['#eb6eb7', 5]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:magenta   = ['#f275be', 5]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:magenta   = ['#ca4898', 5]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:magenta   = ['#dd0f9d', 5]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:magenta = [ '#df5f87', 168 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:magenta = [ '#d33682', s:cuicolors.magenta[s:cuiindex] ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:magenta = [ '#e02c6d', 5 ]$/;"	v
s:magenta	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:magenta = [ '#f2c68a', 216 ]$/;"	v
s:manual_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:manual_update_tags(bang) abort$/;"	f
s:map_netrw_key	plugged/vim-sneak/plugin/sneak.vim	/^  func! s:map_netrw_key(key) abort$/;"	f
s:map_reset_key	plugged/vim-sneak/plugin/sneak.vim	/^func! s:map_reset_key(key, mode) abort$/;"	f
s:mark_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:mark_sink(lines)$/;"	f
s:maroon	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:maroon = [ '#800000', 1 ]$/;"	v
s:match	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:match(...)$/;"	f
s:match_ids	plugged/vim-sneak/autoload/sneak/label.vim	/^let s:match_ids = []$/;"	v
s:matchaddpos	plugged/ale/autoload/ale/highlight.vim	/^function! s:matchaddpos(group, pos_list) abort$/;"	f
s:matchmap	plugged/vim-sneak/autoload/sneak/label.vim	/^let s:matchmap = {}$/;"	v
s:maxmarks	plugged/vim-sneak/autoload/sneak/label.vim	/^let s:maxmarks = sneak#util#strlen(g:sneak#target_labels)$/;"	v
s:medium_grey	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:medium_grey  = [ '#585858', 240 ]$/;"	v
s:merge_heads	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:merge_heads = ['MERGE_HEAD', 'REBASE_HEAD', 'CHERRY_PICK_HEAD', 'REVERT_HEAD']$/;"	v
s:merge_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:merge_opts(dict, eopts)$/;"	f
s:message	plugged/ale/autoload/ale/codefix.vim	/^function! s:message(message) abort$/;"	f
s:message	plugged/ale/autoload/ale/completion.vim	/^function! s:message(message) abort$/;"	f
s:message	plugged/ale/autoload/ale/rename.vim	/^function! s:message(message) abort$/;"	f
s:message	plugged/lightline.vim/test/error.vim	/^function! s:message() abort$/;"	f
s:min_version	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:min_version = '0.23.0'$/;"	v
s:mixedcase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:mixedcase(word)$/;"	f
s:mod	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:mod(a,b)$/;"	f
s:mode	plugged/lightline.vim/autoload/lightline.vim	/^let s:mode = ''$/;"	v
s:modes	plugged/supertab/plugin/supertab.vim	/^  let s:modes = '\/^E\/^Y\/^L\/^N\/^K\/^T\/^I\/^]\/^F\/^D\/^V\/^P\/^U\/^O\/s'$/;"	v
s:modes	plugged/supertab/plugin/supertab.vim	/^  let s:modes = s:modes . '\/n\/p'$/;"	v
s:modyear	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:modyear(y)$/;"	f
s:months_abbr	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:months_abbr =map(range(86400*2,86400*365,86400*31),'strftime("%b",v:val)')$/;"	v
s:months_engl	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:months_engl =["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]$/;"	v
s:months_full	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:months_full =map(range(86400*2,86400*365,86400*31),'strftime("%B",v:val)')$/;"	v
s:msg_error	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:msg_error(msg) abort$/;"	f
s:navy	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:navy = [ '#000080', 4 ]$/;"	v
s:navy	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:navy = '#df875f'$/;"	v
s:navy	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:navy = '#005f87'$/;"	v
s:nbs	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:nbs = nr2char(0x2007)$/;"	v
s:nearest_cargo	plugged/rust.vim/autoload/cargo.vim	/^function! s:nearest_cargo(...) abort$/;"	f
s:noau	plugged/vim-dirvish/autoload/dirvish.vim	/^let s:noau       = 'silent noautocmd keepjumps'$/;"	v
s:none	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:none = [ 'NONE', 'NONE' ]$/;"	v
s:nord0	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord0 = ["#2E3440", "NONE"]$/;"	v
s:nord1	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord1 = ["#3B4252", 0]$/;"	v
s:nord10	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord10 = ["#5E81AC", 12]$/;"	v
s:nord11	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord11 = ["#BF616A", 1]$/;"	v
s:nord12	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord12 = ["#D08770", 11]$/;"	v
s:nord13	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord13 = ["#EBCB8B", 3]$/;"	v
s:nord14	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord14 = ["#A3BE8C", 2]$/;"	v
s:nord15	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord15 = ["#B48EAD", 5]$/;"	v
s:nord2	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord2 = ["#434C5E", "NONE"]$/;"	v
s:nord3	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord3 = ["#4C566A", 8]$/;"	v
s:nord4	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord4 = ["#D8DEE9", "NONE"]$/;"	v
s:nord5	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord5 = ["#E5E9F0", 7]$/;"	v
s:nord6	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord6 = ["#ECEFF4", 15]$/;"	v
s:nord7	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord7 = ["#8FBCBB", 14]$/;"	v
s:nord8	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord8 = ["#88C0D0", 6]$/;"	v
s:nord9	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:nord9 = ["#81A1C1", 4]$/;"	v
s:normalize	plugged/lightline.vim/autoload/lightline.vim	/^function! s:normalize(result) abort$/;"	f
s:normalize_dir	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:normalize_dir(dir, silent) abort$/;"	f
s:normalize_options	plugged/vim-abolish/plugin/abolish.vim	/^function! s:normalize_options(flags)$/;"	f
s:normalizetime	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:normalizetime(time)$/;"	f
s:noswapfile	plugged/vim-dirvish/autoload/dirvish.vim	/^let s:noswapfile = (2 == exists(':noswapfile')) ? 'noswapfile' : ''$/;"	v
s:nowait	plugged/vim-dirvish/ftplugin/dirvish.vim	/^let s:nowait = (v:version > 703 ? '<nowait>' : '')$/;"	v
s:nowait	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nowait	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:nowait = v:version >= 704 ? '<nowait>' : ''$/;"	v
s:nr	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:nr(x) abort$/;"	f
s:ns_id	plugged/ale/autoload/ale/highlight.vim	/^    let s:ns_id = nvim_create_namespace('ale_highlight')$/;"	v
s:ns_id	plugged/ale/autoload/ale/virtualtext.vim	/^    let s:ns_id = nvim_create_namespace('ale')$/;"	v
s:numberincrement	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:numberincrement(string,offset,increment)$/;"	f
s:nvim_job_exit_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_exit_wrapper(real_cb, job, exit_code, event_type) abort$/;"	f
s:nvim_job_out_wrapper	plugged/vim-gutentags/autoload/gutentags.vim	/^    function! s:nvim_job_out_wrapper(real_cb, job, lines, event_type) abort$/;"	f
s:object	plugged/vim-abolish/plugin/abolish.vim	/^let s:object = {}$/;"	v
s:object.clone	plugged/vim-abolish/plugin/abolish.vim	/^function! s:object.clone(...)$/;"	f
s:ocre	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:ocre         = [ '#87875f', 101 ]$/;"	v
s:offset	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:offset     = s:localtime((  0+30*365)*86400).o$/;"	v
s:offset_dst	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:offset_dst = s:localtime((180+30*365)*86400).o$/;"	v
s:olive	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:olive = [ '#808000', 3 ]$/;"	v
s:olive	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:olive = '#dfaf5f'$/;"	v
s:olive	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:olive = '#718c00'$/;"	v
s:omni_start_map	plugged/ale/autoload/ale/completion.vim	/^let s:omni_start_map = {$/;"	v
s:on_bufenter	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:on_bufenter() abort$/;"	f
s:on_bufunload	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:on_bufunload() abort$/;"	f
s:open	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:open(cmd, target)$/;"	f
s:open	plugged/fzf/plugin/fzf.vim	/^function! s:open(cmd, target)$/;"	f
s:open_dir	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:open_dir(d, reload) abort$/;"	f
s:open_selected	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:open_selected(splitcmd, bg, line1, line2) abort$/;"	f
s:opfunc	plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc(type, ...) abort " {{{1$/;"	f
s:opfunc2	plugged/vim-surround/plugin/surround.vim	/^function! s:opfunc2(...) abort$/;"	f
s:option_init	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:option_init(name, default) "{{{$/;"	f
s:options	plugged/delimitMate/autoload/delimitMate.vim	/^  let s:options = {}$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:orange = [ '#ef7c2a' , 202 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:orange = '#d75f00'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:orange = '#d75f00'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:orange = '#f5871f'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:orange = '#de935f'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:orange = '#ffc58f'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:orange = '#e78c45'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:orange = '#f99157'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:orange       = [ '#ff8700', 208 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:orange = '#ff7733'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:orange = '#FF7733'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:orange = '#ffae57'$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:orange = [ '#fad07a', 222 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:orange = [ '#ef5939', 166 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:orange = [ '#d7875f', 216 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:orange = [ '#cb4b16', s:cuicolors.orange[s:cuiindex] ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:orange = [ '#d75f00', 166 ]$/;"	v
s:orange	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:orange = [ '#e5786d', 173 ]$/;"	v
s:ordinalincrement	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:ordinalincrement(string,offset,increment)$/;"	f
s:ordinalize	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:ordinalize(number)$/;"	f
s:orig_conceal_matches	plugged/vim-sneak/autoload/sneak/label.vim	/^let s:orig_conceal_matches = []$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.left =  [ [ s:silver, s:gray ], [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.inactive.right = [ [ s:silver, s:gray ], [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.error = [ [ s:black, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.right = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.normal.warning = [ [ s:black, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.left = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.middle = [ [ s:silver, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.tabline.tabsel = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.left = [ [ s:white, s:purple ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.left = [ [ s:lightGray, s:darkGray ], [ s:white, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.inactive.right = [ [ s:darkGray, s:gray ], [ s:darkGray, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.left = [ [ s:white, s:green ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.insert.right = copy(s:p.insert.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.error = [ [ s:red, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.left = [ [ s:white, s:blue ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.middle = [ [ s:white, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.right = copy(s:p.normal.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.normal.warning = [ [ s:orange, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.left = [ [ s:white, s:red ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.replace.right = copy(s:p.replace.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.left = [ [ s:lightGray, s:darkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.middle = [ [ s:yellow, s:veryDarkGray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.tabline.tabsel = [ [ s:darkGray, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.left = [ [ s:white, s:orange ], [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:p.visual.right = copy(s:p.visual.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.insert.left = [ [ s:background, s:blue], [ s:statusline_active_fg, s:status ], [ s:statu/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ /;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:stat/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:p.visual.left = [ [ s:visual_fg, s:visual_bg ], [s:statusline_active_fg, s:status ], [ s:s/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.left = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.middle = [ [ s:foreground, s:background ], ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.inactive.right = [ [ s:foreground, s:background ], [ s:foreground, s:background ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.insert.left = [ [ s:blue, s:background ], [ s:statusline_active_fg, s:status ], [ s:stat/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.error = [ [ s:background, s:error ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.left = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [ /;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.middle = [ [ s:statusline_active_fg, s:statusline_active_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.right = [ [ s:foreground, s:background ], [ s:statusline_active_fg, s:status ], [/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.normal.warning = [ [ s:background, s:olive ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.replace.left = [ [ s:background, s:pink ], [s:statusline_active_fg, s:status ], [ s:stat/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.left = [ [s:tabline_inactive_fg, s:tabline_inactive_bg ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.middle = [ [s:tabline_bg, s:tabline_bg]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.tabline.tabsel = [ [s:tabline_active_fg, s:tabline_active_bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:p.visual.left = [ [ s:background, s:orange ], [s:statusline_active_fg, s:status ], [ s:sta/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.error = [ [ s:red, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base0 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.replace.left = [ [ s:base02, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base0 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.error = [ [ s:red, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.left =  [ [ s:base02, s:base0 ], [ s:base00, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.inactive.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.insert.left = [ [ s:base023, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.error = [ [ s:base023, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.left = [ [ s:base023, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.replace.left = [ [ s:base023, s:orange ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.left = [ [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.tabline.tabsel = [ [ s:base2, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:p.visual.left = [ [ s:base023, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.inactive.left   = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.inactive.middle = [ [ s:medium_grey, s:darker_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.inactive.right  = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.insert.left     = [ [ s:darker_grey, s:green ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.insert.right    = [ [ s:darker_grey, s:green ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.error    = [ [ s:almost_black, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.left     = [ [ s:darker_grey, s:ocre ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.middle   = [ [ s:lighter_grey, s:darker_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.right    = [ [ s:darker_grey, s:ocre ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.normal.warning  = [ [ s:almost_black, s:orange ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.replace.left    = [ [ s:darker_grey, s:red ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.replace.right   = [ [ s:darker_grey, s:red ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.left    = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.middle  = [ [ s:lighter_grey, s:darker_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.right   = [ [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.tabline.tabsel  = [ [ s:darker_grey, s:ocre ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.visual.left     = [ [ s:darker_grey, s:yellow ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:p.visual.right    = [ [ s:darker_grey, s:yellow ], [ s:darker_grey, s:medium_grey ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base01 ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.inactive.right = [ [ s:base1, s:base01 ], [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.tabline.tabsel = [ [ s:base02, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.left =  [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.inactive.right = [ [ s:black, s:blue ], [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:gray ] ] $/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.insert.right = [ [ s:black, s:green ], [ s:green, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.left = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.middle = [ [ s:white, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.right = [ [ s:black, s:purple ], [ s:purple, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.replace.right = [ [ s:black, s:red ], [ s:red, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.left = [ [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.middle = [ [ s:blue, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.right = [ [ s:black, s:blue ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:blue ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:p.visual.right = [ [ s:black, s:yellow ], [ s:yellow, s:gray ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.inactive.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue], [ '#abb2bf', '#3e/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.left = [ [ '#292c33', '#61afef', s:term_black, s:term_blue, 'bold' ], [ '#61afef'/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.insert.right = [ [ '#292c33', '#61afef', s:term_black, s:term_blue ], [ '#ABB2BF', '#3E4/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.error = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.left = [ [ '#292c33', '#98c379', s:term_black, s:term_green, 'bold' ], [ '#98c379/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.middle = [ [ '#abb2bf', '#292c33', s:term_white, s:term_black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.right = [ [ '#292c33', '#98c379', s:term_black, s:term_green ], [ '#abb2bf', '#3e/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.normal.warning = [ [ '#292c33', '#e5c07b', s:term_black, s:term_yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.left = [ [ '#292c33', '#e06c75', s:term_black, s:term_red, 'bold' ], [ '#e06c75'/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.replace.right = [ [ '#292c33', '#e06c75', s:term_black, s:term_red ], s:p.normal.right[1/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.left = [ s:p.normal.left[1] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.right = [ s:p.normal.left[1] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.tabline.tabsel = [ s:p.normal.left[0] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.left = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple, 'bold' ], [ '#c678d/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:p.visual.right = [ [ '#292c33', '#c678dd', s:term_black, s:term_purple ], s:p.normal.right/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.replace.left = [ [ s:base02, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.left = copy(s:p.normal.middle)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.middle = copy(s:p.normal.middle)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.right = copy(s:p.tabline.middle)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.middle = [ [ '#303030', '#121212', 236, 233 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.inactive.right = [ [ '#121212', '#606060', 233, 241 ], [ '#121212', '#3a3a3a', 233, 237 /;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.insert.left =  [ ['#005f00', '#ffffff', 22, 231, 'bold' ], [ '#ffffff', '#005f00', 231, /;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.error = [ [ '#d0d0d0', '#ff0000', 252, 196 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.left = [ ['#0000ff', '#ffffff', 21, 231, 'bold' ], [ '#ffffff', '#0000ff', 231, 2/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.middle = [ [ '#8a8a8a', '#303030', 245, 236 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.right = [ [ '#303030', '#d0d0d0', 236, 252 ], [ '#303030', '#8a8a8a', 236, 245 ],/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.normal.warning = [ [ '#262626', '#ffff00', 235, 226 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.replace.left = [ [ '#af0000', '#ffffff', 124, 231, 'bold' ], [ '#ffffff', '#af0000', 231/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.left = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.middle = [ [ '#8a8a8a', '#3a3a3a', 245, 237 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.right = [ [ '#d0d0d0', '#666666', 252, 242 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.tabline.tabsel = [ [ '#dadada', '#121212', 253, 233 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/landscape.vim	/^let s:p.visual.left = [ [ '#5f00ff', '#ffffff', 57, 231, 'bold' ], [ '#ffffff', '#5f00ff', 231, /;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.insert.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.left   = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.insert.left     = [ [ s:bg, s:green, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.left     = [ [ s:bg, s:blue, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.normal.middle   = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.replace.left    = [ [ s:bg, s:red1, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^  let s:p.visual.left     = [ [ s:bg, s:purple, 'bold' ], [ s:gray1, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.insert.right   = [ [ s:bg, s:green, 'bold' ], [ s:bg, s:green, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.error   = [ [ s:red2,   s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.right   = [ [ s:bg, s:blue, 'bold' ], [ s:bg, s:blue, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.right  = [ [ s:bg, s:red1, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.left =  [ [ s:pink, s:black ], [ s:white, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.inactive.right = [ [ s:white, s:pink ], [ s:pink, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:green, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.error = [ [ s:pink, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.left = [ [ s:black, s:cyan ], [ s:orange, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.middle = [ [ s:orange, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.right = [ [ s:pink, s:black ], [ s:black, s:pink ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.normal.warning = [ [ s:yellow, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:red, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.left = [ [ s:pink, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.middle = [ [ s:pink, s:black] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.tabline.tabsel = [ [ s:black, s:pink ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:p.visual.left = [ [ s:black, s:yellow ], [ s:yellow, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.left =  [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.middle = [ [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.inactive.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.insert.left = [ [ s:nord1, s:nord6 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.error = [ [ s:nord1, s:nord11 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.left = [ [ s:nord1, s:nord8 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.right = [ [ s:nord5, s:nord1 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.normal.warning = [ [ s:nord1, s:nord13 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.replace.left = [ [ s:nord1, s:nord13 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.left = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.middle = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.right = [ [ s:nord5, s:nord3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.tabline.tabsel = [ [ s:nord1, s:nord8 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/nord.vim	/^let s:p.visual.left = [ [ s:nord1, s:nord7 ], [ s:nord5, s:nord1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:bg,  s:gray3 ], [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.left   = [ [ s:gray1,  s:bg ], [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray1, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:bg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^  let s:p.inactive.right  = [ [ s:gray1, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.left    = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.insert.right   = [ [ s:bg, s:blue, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.error   = [ [ s:red2, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.left    = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.middle  = [ [ s:fg, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.right   = [ [ s:bg, s:green, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.normal.warning = [ [ s:yellow, s:bg ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.left   = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.replace.right  = [ [ s:bg, s:red1, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.left   = [ [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.middle = [ [ s:gray3, s:gray2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.right  = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.tabline.tabsel = [ [ s:bg, s:purple, 'bold' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.left    = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:p.visual.right   = [ [ s:bg, s:purple, 'bold' ], [ s:fg, s:gray3 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['white', 'darkblue'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.insert.right = [ [ 'darkestcyan', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediu/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.middle = [ [ 'gray7', 'gray2' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.right = [ ['gray5', 'gray10'], ['gray9', 'gray4'], ['gray8', 'gray2'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray4' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray8' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray3' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerline.vim	/^let s:p.visual.left = [ ['darkred', 'brightorange', 'bold'], ['white', 'gray4'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.inactive.left = s:p.inactive.right[1:]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.inactive.right = [ ['gray1', 'gray5'], ['gray4', 'gray1'], ['gray4', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.left = [ ['darkestcyan', 'white', 'bold'], ['mediumcyan', 'darkestblue'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.middle = [ [ 'mediumcyan', 'darkestblue' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.insert.right = [ [ 'darkestblue', 'mediumcyan' ], [ 'mediumcyan', 'darkblue' ], [ 'mediu/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.error = [ [ 'gray9', 'brightestred' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.left = [ ['darkestgreen', 'brightgreen', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.middle = [ [ 'white', 'gray0' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.right = [ ['gray10', 'gray2'], ['white', 'gray1'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.normal.warning = [ [ 'gray1', 'yellow' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.left = [ ['white', 'brightred', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.middle = s:p.normal.middle$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.replace.right = s:p.normal.right$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.left = [ [ 'gray9', 'gray0' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.middle = [ [ 'gray2', 'gray0' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.right = [ [ 'gray9', 'gray1' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.tabline.tabsel = [ [ 'gray9', 'gray2' ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/powerlineish.vim	/^let s:p.visual.left = [ ['black', 'brightestorange', 'bold'], ['white', 'gray0'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.inactive.left = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.inactive.right = [[ s:brblue, s:bg_2 ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.insert.left = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.insert.right = [[ s:bg_1, s:green ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.error = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.left = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.middle = [[ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.right = [[ s:bg_1, s:blue ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.normal.warning = [[ s:bg_1, s:yellow ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.replace.left = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.replace.right = [[ s:bg_1, s:red ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.left = [[ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.right = [[ s:bg_1, s:red ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.tabline.tabsel = [[ s:bg_1, s:blue ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.visual.left = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:p.visual.right = [[ s:bg_1, s:magenta ], [ s:cyan, s:bg_2 ], [ s:dim_0, s:bg_1 ]]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.replace.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:p.visual.left = [ [ s:base02, s:peach ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.left =  [ [ s:gray, s:black ], [ s:black2, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.middle = [ [ s:black2, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.inactive.right = [ [ s:black, s:black2 ], [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.insert.left = [ [ s:black, s:green ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.error = [ [ s:red, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.left = [ [ s:black, s:blue ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.middle = [ [ s:gray, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.right = [ [ s:gray, s:gray4 ], [ s:gray3, s:gray ], [ s:gray2, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.normal.warning = [ [ s:gold, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.replace.left = [ [ s:black, s:red ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.left = [ [ s:gray4, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.middle = [ [ s:black2, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.tabline.tabsel = [ [ s:blue, s:black ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:p.visual.left = [ [ s:black, s:violet ], [ s:gray4, s:black2 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.middle = [ [ s:base01, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.inactive.right = [ [ s:base03, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.insert.left = [ [ s:base03, s:green ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.left = [ [ s:base03, s:blue ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.middle = [ [ s:base1, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.right = [ [ s:base03, s:base1 ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.normal.warning = [ [ s:base03, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.replace.left = [ [ s:base03, s:red ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.left = [ [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.right = copy(s:p.tabline.left)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.tabline.tabsel = [ [ s:base03, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:p.visual.left = [ [ s:base03, s:magenta ], [ s:base03, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.left =  [ [ s:base0, s:base02 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.middle = [ [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.inactive.right = [ [ s:base02, s:base00 ], [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.insert.left = [ [ s:base02, s:bright_green, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.error = [ [ s:red, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.left = [ [ s:base02, s:bright_blue, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.middle = [ [ s:base0, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.right = [ [ s:base02, s:base1 ], [ s:base2, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.normal.warning = [ [ s:yellow, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.replace.left = [ [ s:base3, s:red, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00, 'bold'] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.middle = [ [ s:base01, s:base1 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.right = copy(s:p.normal.right)$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:p.visual.left = [ [ s:base3, s:bright_magenta, 'bold' ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p = {'normal': {}, 'inactive': {}, 'insert': {}, 'replace': {}, 'visual': {}, 'tabline': {/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.left =  [ [ s:base1, s:base02 ], [ s:base00, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.middle = [ [ s:base1, s:base023 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.inactive.right = [ [ s:base023, s:base01 ], [ s:base00, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.insert.left = [ [ s:base02, s:green ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.error = [ [ s:base03, s:red ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.left = [ [ s:base02, s:blue ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.right = [ [ s:base02, s:base0 ], [ s:base1, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.normal.warning = [ [ s:base023, s:yellow ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.replace.left = [ [ s:base023, s:red ], [ s:base3, s:base01 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.left = [ [ s:base3, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.middle = [ [ s:base2, s:base02 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.right = [ [ s:base2, s:base00 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.tabline.tabsel = [ [ s:base3, s:base03 ] ]$/;"	v
s:p	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:p.visual.left = [ [ s:base02, s:magenta ], [ s:base3, s:base01 ] ]$/;"	v
s:parent_dir	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:parent_dir(dir) abort$/;"	f
s:parseJSON	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:parseJSON(buffer, lines) abort$/;"	f
s:parseLines	plugged/ale/autoload/ale/handlers/eslint.vim	/^function! s:parseLines(buffer, lines) abort$/;"	f
s:parse_substitute	plugged/vim-abolish/plugin/abolish.vim	/^function! s:parse_substitute(bang,line1,line2,count,args)$/;"	f
s:parse_subvert	plugged/vim-abolish/plugin/abolish.vim	/^function! s:parse_subvert(bang,line1,line2,count,args)$/;"	f
s:partial_timers	plugged/ale/autoload/ale/util.vim	/^    let s:partial_timers = {}$/;"	v
s:path_format_regex	plugged/ale/autoload/ale/command.vim	/^let s:path_format_regex = '\\v\\%s(%(:h|:t|:r|:e)*)'$/;"	v
s:path_subcommands	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:path_subcommands = {}$/;"	v
s:pattern	plugged/ale/ale_linters/desktop/desktop_file_validate.vim	/^let s:pattern = '\\v^(.+): ([a-z]+): (.+)$'$/;"	v
s:pattern	plugged/ale/ale_linters/json/jq.vim	/^let s:pattern = '^parse error: \\(.\\+\\) at line \\(\\d\\+\\), column \\(\\d\\+\\)$'$/;"	v
s:pattern	plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pattern = '\\v^([a-zA-Z]?:?[^:]+):(\\d+)?:?(\\d+)?:? ([^:]+): (.+)$'$/;"	v
s:pattern	plugged/lightline.vim/test/highlight.vim	/^function! s:pattern(xs, ...) abort$/;"	f
s:pattern	plugged/vim-abolish/plugin/abolish.vim	/^function! s:pattern(dict,boundaries)$/;"	f
s:peach	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:peach = [ '#d7afaf', 181 ]$/;"	v
s:pink	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:pink = '#afdf00'$/;"	v
s:pink	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:pink = '#d7005f'$/;"	v
s:pink	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:pink = [ '#f92672', 161 ]$/;"	v
s:placematch	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:placematch(c, pos) abort$/;"	f
s:pluck	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:pluck(dict, key, default)$/;"	f
s:popup	plugged/fzf/plugin/fzf.vim	/^function! s:popup(opts) abort$/;"	f
s:popup_support	plugged/fzf/plugin/fzf.vim	/^function! s:popup_support()$/;"	f
s:pragma_error	plugged/ale/autoload/ale/handlers/gcc.vim	/^let s:pragma_error = '#pragma once in main file'$/;"	v
s:prepare_env	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:prepare_env = {$/;"	v
s:prepend_opts	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:prepend_opts(dict, eopts)$/;"	f
s:present	plugged/fzf/plugin/fzf.vim	/^function! s:present(dict, ...)$/;"	f
s:prev	plugged/vim-slash/plugin/slash.vim	/^function! s:prev()$/;"	f
s:process	plugged/vim-surround/plugin/surround.vim	/^function! s:process(string)$/;"	f
s:process_options_file	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^function! s:process_options_file(proj_dir, path) abort$/;"	f
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:purple = [ '#800080', 5 ]$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:purple = '#8959a8'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:purple = '#8959a8'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:purple = [ '#9876aa', 104 ]$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:purple = '#82aaff'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:purple = '#c792ea'$/;"	v
s:purple	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:purple = [ '#c678dd', 176 ]$/;"	v
s:pushd	plugged/fzf/plugin/fzf.vim	/^function! s:pushd(dict)$/;"	f
s:rebase_abbrevs	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:rebase_abbrevs = {$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:red = [ '#ff0000', 9 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:red = [ '#f92672' , 161 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:red = '#df0000'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:red = '#df0000'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:red = '#c82829'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:red = '#cc6666'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:red = '#ff9da4'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:red = '#d54e53'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:red = '#f2777a'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:red          = [ '#af5f5f', 131 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:red = '#f07178'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:red = '#f07178'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:red = '#f07178'$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:red = [ '#ff6b68', 204 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:red = [ '#cf6a4c', 167 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:red = [ '#ff0000', 160 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:red       = ['#ed4a46', 1]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:red       = ['#fa5750', 1]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:red       = ['#d2212d', 1]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:red       = ['#d6000c', 1]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:red = [ '#d68787', 131 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:red = [ '#d70000', '160' ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:red = [ '#dc322f', s:cuicolors.red[s:cuiindex] ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:red = [ '#ff3128', 1 ]$/;"	v
s:red	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:red = [ '#e5786d', 203 ]$/;"	v
s:red1	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red1   = '#ec5f67'$/;"	v
s:red1	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red1   = '#f07178'$/;"	v
s:red1	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red1   = [ '#e06c75', 168 ]$/;"	v
s:red2	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:red2   = '#ec5f67'$/;"	v
s:red2	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:red2   = '#ff5370'$/;"	v
s:red2	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:red2   = [ '#be5046', 168 ]$/;"	v
s:redirects	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:redirects = {}$/;"	v
s:redraw	plugged/vim-surround/plugin/surround.vim	/^function! s:redraw()$/;"	f
s:reduce_line	plugged/fzf.vim/autoload/fzf/vim/complete.vim	/^function! s:reduce_line(lines)$/;"	f
s:ref_header	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:ref_header = '\\%(Merge\\|Rebase\\|Upstream\\|Pull\\|Push\\)'$/;"	v
s:references_map	plugged/ale/autoload/ale/references.vim	/^let s:references_map = {}$/;"	v
s:reindent	plugged/vim-surround/plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
s:remove_layout	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:remove_layout(opts)$/;"	f
s:rename_map	plugged/ale/autoload/ale/rename.vim	/^let s:rename_map = {}$/;"	v
s:replaceinline	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:replaceinline(start,end,new)$/;"	f
s:repo_bare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
s:repo_config	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_config(name) dict abort$/;"	f
s:repo_dir	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
s:repo_find	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_find(object) dict abort$/;"	f
s:repo_git_chomp	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
s:repo_git_chomp_in_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
s:repo_git_command	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
s:repo_head	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_head(...) dict abort$/;"	f
s:repo_prepare	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_prepare(...) dict abort$/;"	f
s:repo_prototype	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repo_rev_parse	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
s:repo_superglob	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
s:repo_translate	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_translate(rev) dict abort$/;"	f
s:repo_tree	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
s:repo_user	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:repo_user() dict abort$/;"	f
s:repos	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:repos = {}$/;"	v
s:restore_conceal_in_other_windows	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:restore_conceal_in_other_windows() abort$/;"	f
s:restore_conceal_matches	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:restore_conceal_matches() abort$/;"	f
s:restore_winlocal_settings	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:restore_winlocal_settings() abort$/;"	f
s:resume_queue	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:resume_queue = []$/;"	v
s:reverse_list	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:reverse_list(opts)$/;"	f
s:rgb	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:rgb(r, g, b) abort$/;"	f
s:rhs	plugged/vim-speeddating/plugin/speeddating.vim	/^  let s:rhs = maparg(s:key, 'n')$/;"	v
s:roman2arabic	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:roman2arabic(roman)$/;"	f
s:rpt	plugged/vim-sneak/plugin/sneak.vim	/^func! s:rpt(op, reverse) abort$/;"	f
s:rquote	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:rquote(char) "{{{$/;"	f
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:runner_exe = gutentags#get_plat_file('update_scopedb')$/;"	v
s:runner_exe	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:runner_exe = '"' . gutentags#get_plat_file('update_tags') . '"'$/;"	v
s:runtime_loaded_map	plugged/ale/autoload/ale/linter.vim	/^let s:runtime_loaded_map = {}$/;"	v
s:save_conceal_matches	plugged/vim-sneak/autoload/sneak/label.vim	/^func! s:save_conceal_matches() abort$/;"	f
s:save_cpo	plugged/completion-nvim/plugin/completion.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/lightline.vim/autoload/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/lightline.vim/autoload/lightline/colortable.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/lightline.vim/autoload/lightline/tab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/lightline.vim/plugin/lightline.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/compiler/cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/compiler/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/ftplugin/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/ftplugin/rust/tagbar.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/indent/rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/plugin/cargo.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/rust.vim/plugin/rust.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	plugged/rust.vim/syntax_checkers/rust/cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/rust.vim/syntax_checkers/rust/rustc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugged/supertab/plugin/supertab.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_state	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:save_state(d) abort$/;"	f
s:script_path	plugged/ale/autoload/ale/gradle.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:search_history_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:search_history_sink(lines)$/;"	f
s:section_commit_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_commit_pattern = s:section_pattern . '\\|^commit '$/;"	v
s:section_pattern	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:section_pattern = '^[A-Z][a-z][^:]*$'$/;"	v
s:send	plugged/vim-abolish/plugin/abolish.vim	/^function! s:send(self,func,...)$/;"	f
s:sep	plugged/ale/autoload/ale/c.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/ale/autoload/ale/handlers/eslint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/ale/autoload/ale/handlers/solhint.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/ale/autoload/ale/python.vim	/^let s:sep = has('win32') ? '\\' : '\/'$/;"	v
s:sep	plugged/vim-dirvish/autoload/dirvish.vim	/^let s:sep = exists('+shellslash') && !&shellslash ? '\\' : '\/'$/;"	v
s:sep	plugged/vim-dirvish/ftplugin/dirvish.vim	/^let s:sep = exists('+shellslash') && !&shellslash ? '\\' : '\/'$/;"	v
s:sep	plugged/vim-dirvish/syntax/dirvish.vim	/^let s:sep = exists('+shellslash') && !&shellslash ? '\\\\' : '\/'$/;"	v
s:set	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:set(name, value) "{{{$/;"	f
s:set	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:set(...) " {{{$/;"	f
s:set_altbuf	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:set_altbuf(bnr) abort$/;"	f
s:set_args	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:set_args(args) abort$/;"	f
s:set_rust_filetype	plugged/rust.vim/ftdetect/rust.vim	/^function! s:set_rust_filetype() abort$/;"	f
s:set_variables	plugged/ale/autoload/ale/fixers/astyle.vim	/^function! s:set_variables() abort$/;"	f
s:set_variables	plugged/ale/autoload/ale/fixers/clangtidy.vim	/^function! s:set_variables() abort$/;"	f
s:setup	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:setup(...) "{{{$/;"	f
s:setvirtcol	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:setvirtcol(line,col)$/;"	f
s:shellesc	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
s:shellesc_cmd	plugged/fzf/plugin/fzf.vim	/^function! s:shellesc_cmd(arg)$/;"	f
s:shiftwidth	plugged/rust.vim/indent/rust.vim	/^    function! s:shiftwidth()$/;"	f
s:shortpath	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:shortpath()$/;"	f
s:shortpath	plugged/fzf/plugin/fzf.vim	/^function! s:shortpath()$/;"	f
s:should_complete_map	plugged/ale/autoload/ale/completion.vim	/^let s:should_complete_map = {$/;"	v
s:should_reload	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:should_reload() abort$/;"	f
s:silver	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:silver = [ '#c0c0c0', 7 ]$/;"	v
s:skip	plugged/lightline.vim/autoload/lightline.vim	/^  function! s:skip() abort " Vim 8.2.0257 (00f3b4e007), 8.2.0991 (0fe937fd86), 8.2.0996 (40a019f/;"	f
s:skip	plugged/lightline.vim/autoload/lightline.vim	/^  function! s:skip() abort$/;"	f
s:sl	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:sl(path) abort$/;"	f
s:snakecase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:snakecase(word)$/;"	f
s:solarized_termcolors	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:solarized_termcolors = get(g:, 'solarized_termcolors', 256)$/;"	v
s:sort	plugged/vim-abolish/plugin/abolish.vim	/^function! s:sort(a,b)$/;"	f
s:sort_buffers	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:sort_buffers(...)$/;"	f
s:sorted_items	plugged/ale/autoload/ale/pattern_options.vim	/^let s:sorted_items = []$/;"	v
s:spacecase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:spacecase(word)$/;"	f
s:split	plugged/fzf/plugin/fzf.vim	/^function! s:split(dict)$/;"	f
s:splittable	plugged/fzf/plugin/fzf.vim	/^function! s:splittable(dict)$/;"	f
s:srcdir	plugged/vim-dirvish/autoload/dirvish.vim	/^let s:srcdir = expand('<sfile>:h:h:p')$/;"	v
s:st	plugged/vim-sneak/plugin/sneak.vim	/^let s:st = { 'rst':1, 'input':'', 'inputlen':0, 'reverse':0, 'bounds':[0,0],$/;"	v
s:status	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:status = '#c6c6c6'$/;"	v
s:status	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:status = s:aqua$/;"	v
s:statusline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_bg = '#5f8787'$/;"	v
s:statusline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_bg = s:navy$/;"	v
s:statusline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_active_fg = '#1c1c1c'$/;"	v
s:statusline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_active_fg = s:window$/;"	v
s:statusline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_bg = '#444444'$/;"	v
s:statusline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_bg = '#dadada'$/;"	v
s:statusline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:statusline_inactive_fg = '#c6c6c6'$/;"	v
s:statusline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:statusline_inactive_fg = s:foreground$/;"	v
s:strchar	plugged/vim-sneak/autoload/sneak/label.vim	/^  func! s:strchar(s, i) abort$/;"	f
s:strftime	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:strftime(pattern,time)$/;"	f
s:strftime_items	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:strftime_items = {$/;"	v
s:strip	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:strip(str)$/;"	f
s:strip_white_space	plugged/vim-commentary/plugin/commentary.vim	/^function! s:strip_white_space(l,r,line) abort$/;"	f
s:sub	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
s:subcommands_before_2_5	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:subcommands_before_2_5 = [$/;"	v
s:subesc	plugged/vim-abolish/plugin/abolish.vim	/^function! s:subesc(pattern)$/;"	f
s:subseparator	plugged/lightline.vim/autoload/lightline.vim	/^function! s:subseparator(components, subseparator, expanded) abort$/;"	f
s:subseparator	plugged/lightline.vim/test/subseparator.vim	/^function! s:subseparator(...)$/;"	f
s:substitute_command	plugged/vim-abolish/plugin/abolish.vim	/^function! s:substitute_command(cmd,bad,good,flags)$/;"	f
s:subvert_dispatcher	plugged/vim-abolish/plugin/abolish.vim	/^function! s:subvert_dispatcher(bang,line1,line2,count,args)$/;"	f
s:suf	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:suf() abort$/;"	f
s:suite	plugged/lightline.vim/test/autocmd.vim	/^let s:suite = themis#suite('autocmd')$/;"	v
s:suite	plugged/lightline.vim/test/concatenate.vim	/^let s:suite = themis#suite('concatenate')$/;"	v
s:suite	plugged/lightline.vim/test/error.vim	/^let s:suite = themis#suite('error')$/;"	v
s:suite	plugged/lightline.vim/test/expand.vim	/^let s:suite = themis#suite('expand')$/;"	v
s:suite	plugged/lightline.vim/test/highlight.vim	/^let s:suite = themis#suite('highlight')$/;"	v
s:suite	plugged/lightline.vim/test/link.vim	/^let s:suite = themis#suite('link')$/;"	v
s:suite	plugged/lightline.vim/test/mode.vim	/^let s:suite = themis#suite('mode')$/;"	v
s:suite	plugged/lightline.vim/test/onetab.vim	/^let s:suite = themis#suite('onetab')$/;"	v
s:suite	plugged/lightline.vim/test/popup.vim	/^let s:suite = themis#suite('popup')$/;"	v
s:suite	plugged/lightline.vim/test/quickfix.vim	/^let s:suite = themis#suite('quickfix')$/;"	v
s:suite	plugged/lightline.vim/test/subseparator.vim	/^let s:suite = themis#suite('subseparator')$/;"	v
s:suite	plugged/lightline.vim/test/tabline.vim	/^let s:suite = themis#suite('tabline')$/;"	v
s:suite	plugged/lightline.vim/test/tabs.vim	/^let s:suite = themis#suite('tabs')$/;"	v
s:suite	plugged/lightline.vim/test/toggle.vim	/^let s:suite = themis#suite('toggle')$/;"	v
s:suite	plugged/lightline.vim/test/uniq.vim	/^let s:suite = themis#suite('uniq')$/;"	v
s:suite.active_inactive	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.active_inactive()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/autocmd.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/link.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/popup.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/quickfix.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.before_each()$/;"	f
s:suite.before_each	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.before_each()$/;"	f
s:suite.component_raw	plugged/lightline.vim/test/expand.vim	/^function! s:suite.component_raw()$/;"	f
s:suite.component_type	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.component_type()$/;"	f
s:suite.component_type	plugged/lightline.vim/test/link.vim	/^function! s:suite.component_type()$/;"	f
s:suite.custom	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom()$/;"	f
s:suite.custom_error	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_error()$/;"	f
s:suite.custom_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_left_nil()$/;"	f
s:suite.custom_mixed	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed()$/;"	f
s:suite.custom_mixed_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_mixed_2()$/;"	f
s:suite.custom_number	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_number()$/;"	f
s:suite.custom_one	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_one()$/;"	f
s:suite.custom_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_right_nil()$/;"	f
s:suite.custom_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_string()$/;"	f
s:suite.custom_two	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_two()$/;"	f
s:suite.custom_type	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type()$/;"	f
s:suite.custom_type_error	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_error()$/;"	f
s:suite.custom_type_flatten	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_flatten()$/;"	f
s:suite.custom_type_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_left_nil()$/;"	f
s:suite.custom_type_mixed	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed()$/;"	f
s:suite.custom_type_mixed_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_mixed_2()$/;"	f
s:suite.custom_type_notfound	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_notfound()$/;"	f
s:suite.custom_type_number	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_number()$/;"	f
s:suite.custom_type_one	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_one()$/;"	f
s:suite.custom_type_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_right_nil()$/;"	f
s:suite.custom_type_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_string()$/;"	f
s:suite.custom_type_two	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_two()$/;"	f
s:suite.custom_type_void_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string()$/;"	f
s:suite.custom_type_void_string_array	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array()$/;"	f
s:suite.custom_type_void_string_array_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_2()$/;"	f
s:suite.custom_type_void_string_array_3	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_3()$/;"	f
s:suite.custom_type_void_string_array_4	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_type_void_string_array_4()$/;"	f
s:suite.custom_void_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string()$/;"	f
s:suite.custom_void_string_array	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array()$/;"	f
s:suite.custom_void_string_array_2	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_2()$/;"	f
s:suite.custom_void_string_array_3	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_3()$/;"	f
s:suite.custom_void_string_array_4	plugged/lightline.vim/test/expand.vim	/^function! s:suite.custom_void_string_array_4()$/;"	f
s:suite.default	plugged/lightline.vim/test/expand.vim	/^function! s:suite.default()$/;"	f
s:suite.default	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.default()$/;"	f
s:suite.dictionary_function	plugged/lightline.vim/test/expand.vim	/^function! s:suite.dictionary_function()$/;"	f
s:suite.disable_enable	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.disable_enable()$/;"	f
s:suite.disabled	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.disabled()$/;"	f
s:suite.doautoall	plugged/lightline.vim/test/autocmd.vim	/^function! s:suite.doautoall()$/;"	f
s:suite.duplicated_both_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil()$/;"	f
s:suite.duplicated_both_nil_left_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_left_most()$/;"	f
s:suite.duplicated_both_nil_right_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_both_nil_right_most()$/;"	f
s:suite.duplicated_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_left_nil()$/;"	f
s:suite.duplicated_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_right_nil()$/;"	f
s:suite.duplicated_string	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_string()$/;"	f
s:suite.duplicated_type_both_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil()$/;"	f
s:suite.duplicated_type_both_nil_left_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_left_most()$/;"	f
s:suite.duplicated_type_both_nil_right_most	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_both_nil_right_most()$/;"	f
s:suite.duplicated_type_left_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_left_nil()$/;"	f
s:suite.duplicated_type_right_nil	plugged/lightline.vim/test/expand.vim	/^function! s:suite.duplicated_type_right_nil()$/;"	f
s:suite.enabled	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.enabled()$/;"	f
s:suite.error	plugged/lightline.vim/test/error.vim	/^function! s:suite.error()$/;"	f
s:suite.expand	plugged/lightline.vim/test/expand.vim	/^function! s:suite.expand()$/;"	f
s:suite.filename	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.filename()$/;"	f
s:suite.filename_modified	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.filename_modified()$/;"	f
s:suite.flatten	plugged/lightline.vim/test/expand.vim	/^function! s:suite.flatten()$/;"	f
s:suite.hi_clear	plugged/lightline.vim/test/link.vim	/^function! s:suite.hi_clear()$/;"	f
s:suite.highlight	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.highlight()$/;"	f
s:suite.insert	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.insert()$/;"	f
s:suite.insert	plugged/lightline.vim/test/link.vim	/^function! s:suite.insert()$/;"	f
s:suite.keep_original	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.keep_original()$/;"	f
s:suite.left_right	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.left_right()$/;"	f
s:suite.left_right	plugged/lightline.vim/test/link.vim	/^function! s:suite.left_right()$/;"	f
s:suite.link	plugged/lightline.vim/test/link.vim	/^function! s:suite.link()$/;"	f
s:suite.many1	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.many1()$/;"	f
s:suite.many2	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.many2()$/;"	f
s:suite.many3	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.many3()$/;"	f
s:suite.mode	plugged/lightline.vim/test/mode.vim	/^function! s:suite.mode()$/;"	f
s:suite.mode_map	plugged/lightline.vim/test/mode.vim	/^function! s:suite.mode_map()$/;"	f
s:suite.modified	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.modified()$/;"	f
s:suite.multiple	plugged/lightline.vim/test/expand.vim	/^function! s:suite.multiple()$/;"	f
s:suite.multiple_type	plugged/lightline.vim/test/expand.vim	/^function! s:suite.multiple_type()$/;"	f
s:suite.nil	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.nil()$/;"	f
s:suite.nil	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.nil()$/;"	f
s:suite.no_components	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.no_components()$/;"	f
s:suite.notfound	plugged/lightline.vim/test/expand.vim	/^function! s:suite.notfound()$/;"	f
s:suite.one	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.one()$/;"	f
s:suite.one	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.one()$/;"	f
s:suite.one_empty	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.one_empty()$/;"	f
s:suite.onetab	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.onetab()$/;"	f
s:suite.quickfix_statusline	plugged/lightline.vim/test/quickfix.vim	/^function! s:suite.quickfix_statusline()$/;"	f
s:suite.raw_type	plugged/lightline.vim/test/expand.vim	/^function! s:suite.raw_type()$/;"	f
s:suite.replace	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.replace()$/;"	f
s:suite.replace	plugged/lightline.vim/test/link.vim	/^function! s:suite.replace()$/;"	f
s:suite.subseparator	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.subseparator()$/;"	f
s:suite.subseparator	plugged/lightline.vim/test/link.vim	/^function! s:suite.subseparator()$/;"	f
s:suite.subseparator_component	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component()$/;"	f
s:suite.subseparator_component_expand	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand()$/;"	f
s:suite.subseparator_component_expand_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_1()$/;"	f
s:suite.subseparator_component_expand_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_2()$/;"	f
s:suite.subseparator_component_expand_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_expand_3()$/;"	f
s:suite.subseparator_component_function	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function()$/;"	f
s:suite.subseparator_component_function_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_1()$/;"	f
s:suite.subseparator_component_function_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_2()$/;"	f
s:suite.subseparator_component_function_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_3()$/;"	f
s:suite.subseparator_component_function_4	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_4()$/;"	f
s:suite.subseparator_component_function_5	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_5()$/;"	f
s:suite.subseparator_component_function_6	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_6()$/;"	f
s:suite.subseparator_component_function_7	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_7()$/;"	f
s:suite.subseparator_component_function_visible_condition_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_1()$/;"	f
s:suite.subseparator_component_function_visible_condition_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_2()$/;"	f
s:suite.subseparator_component_function_visible_condition_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_3()$/;"	f
s:suite.subseparator_component_function_visible_condition_4	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_4()$/;"	f
s:suite.subseparator_component_function_visible_condition_5	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_5()$/;"	f
s:suite.subseparator_component_function_visible_condition_6	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_6()$/;"	f
s:suite.subseparator_component_function_visible_condition_7	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_function_visible_condition_7()$/;"	f
s:suite.subseparator_component_not_found	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found()$/;"	f
s:suite.subseparator_component_not_found_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_1()$/;"	f
s:suite.subseparator_component_not_found_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_not_found_2()$/;"	f
s:suite.subseparator_component_visible_condition_1	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_1()$/;"	f
s:suite.subseparator_component_visible_condition_2	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_2()$/;"	f
s:suite.subseparator_component_visible_condition_3	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_3()$/;"	f
s:suite.subseparator_component_visible_condition_4	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_4()$/;"	f
s:suite.subseparator_component_visible_condition_5	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_5()$/;"	f
s:suite.subseparator_component_visible_condition_6	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_6()$/;"	f
s:suite.subseparator_component_visible_condition_7	plugged/lightline.vim/test/subseparator.vim	/^function! s:suite.subseparator_component_visible_condition_7()$/;"	f
s:suite.tab_component	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component()$/;"	f
s:suite.tab_component_empty_left	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_left()$/;"	f
s:suite.tab_component_empty_middle	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_empty_middle()$/;"	f
s:suite.tab_component_function	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tab_component_function()$/;"	f
s:suite.tabclose	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose()$/;"	f
s:suite.tabclose_last	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabclose_last()$/;"	f
s:suite.tabline	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabline()$/;"	f
s:suite.tabnew	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew()$/;"	f
s:suite.tabnew	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew()$/;"	f
s:suite.tabnew	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew()$/;"	f
s:suite.tabnew_20	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20()$/;"	f
s:suite.tabnew_20_tabfirst	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst()$/;"	f
s:suite.tabnew_20_tabfirst_tabnext	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabfirst_tabnext()$/;"	f
s:suite.tabnew_20_tabnext_10	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabnext_10()$/;"	f
s:suite.tabnew_20_tabprevious	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious()$/;"	f
s:suite.tabnew_20_tabprevious_tabprevious	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_20_tabprevious_tabprevious()$/;"	f
s:suite.tabnew_first	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabnew_first()$/;"	f
s:suite.tabnew_tabfirst	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabfirst()$/;"	f
s:suite.tabnew_tabnew	plugged/lightline.vim/test/onetab.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
s:suite.tabnew_tabnew	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew()$/;"	f
s:suite.tabnew_tabnew_tabfirst	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabfirst()$/;"	f
s:suite.tabnew_tabnew_tabprevious	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabnew_tabnew_tabprevious()$/;"	f
s:suite.tabnext	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabnext()$/;"	f
s:suite.tabonly	plugged/lightline.vim/test/tabline.vim	/^function! s:suite.tabonly()$/;"	f
s:suite.tabs	plugged/lightline.vim/test/tabs.vim	/^function! s:suite.tabs()$/;"	f
s:suite.three	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three()$/;"	f
s:suite.three	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.three()$/;"	f
s:suite.three_duplicated	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.three_duplicated()$/;"	f
s:suite.three_empty_all	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_all()$/;"	f
s:suite.three_empty_left	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left()$/;"	f
s:suite.three_empty_left_middle	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_middle()$/;"	f
s:suite.three_empty_left_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_left_right()$/;"	f
s:suite.three_empty_middle	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle()$/;"	f
s:suite.three_empty_middle_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_middle_right()$/;"	f
s:suite.three_empty_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.three_empty_right()$/;"	f
s:suite.toggle	plugged/lightline.vim/test/toggle.vim	/^function! s:suite.toggle()$/;"	f
s:suite.two	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two()$/;"	f
s:suite.two	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.two()$/;"	f
s:suite.two_duplicated	plugged/lightline.vim/test/uniq.vim	/^function! s:suite.two_duplicated()$/;"	f
s:suite.two_empty_both	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_both()$/;"	f
s:suite.two_empty_left	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_left()$/;"	f
s:suite.two_empty_right	plugged/lightline.vim/test/concatenate.vim	/^function! s:suite.two_empty_right()$/;"	f
s:suite.visual	plugged/lightline.vim/test/highlight.vim	/^function! s:suite.visual()$/;"	f
s:suite.visual	plugged/lightline.vim/test/link.vim	/^function! s:suite.visual()$/;"	f
s:suite.win_execute_setfiletype	plugged/lightline.vim/test/popup.vim	/^function! s:suite.win_execute_setfiletype()$/;"	f
s:supports_sign_groups	plugged/ale/autoload/ale/sign.vim	/^let s:supports_sign_groups = has('nvim-0.4.2') || has('patch-8.1.614')$/;"	v
s:surroundings	plugged/vim-commentary/plugin/commentary.vim	/^function! s:surroundings() abort$/;"	f
s:symbol_map	plugged/ale/autoload/ale/symbol.vim	/^let s:symbol_map = {}$/;"	v
s:system	plugged/rust.vim/autoload/rust.vim	/^function! s:system(pwd, cmd)$/;"	f
s:tab	plugged/lightline.vim/test/tabs.vim	/^function! s:tab(number, ...) abort$/;"	f
s:tabHelp	plugged/supertab/plugin/supertab.vim	/^  let s:tabHelp =$/;"	v
s:tab_win_do	plugged/vim-dirvish/autoload/dirvish.vim	/^  function! s:tab_win_do(tnr, cmd, bname) abort$/;"	f
s:tabcnt	plugged/lightline.vim/autoload/lightline.vim	/^let s:tabcnt = -1$/;"	v
s:table	plugged/lightline.vim/autoload/lightline/colortable.vim	/^let s:table = s:load()$/;"	v
s:tabline	plugged/lightline.vim/autoload/lightline.vim	/^let s:tabline = ''$/;"	v
s:tabline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_bg = '#00afaf'$/;"	v
s:tabline_active_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_bg = s:window$/;"	v
s:tabline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_active_fg = '#1c1c1c'$/;"	v
s:tabline_active_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_active_fg = s:foreground$/;"	v
s:tabline_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_bg = '#3a3a3a'$/;"	v
s:tabline_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_bg = s:navy$/;"	v
s:tabline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_bg = '#585858'$/;"	v
s:tabline_inactive_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_bg = s:aqua$/;"	v
s:tabline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:tabline_inactive_fg = '#c6c6c6'$/;"	v
s:tabline_inactive_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:tabline_inactive_fg = s:background$/;"	v
s:tabnr	plugged/lightline.vim/autoload/lightline.vim	/^let s:tabnr = -1$/;"	v
s:tags_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:tags_sink(lines)$/;"	f
s:teal	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:teal = [ '#008080', 6 ]$/;"	v
s:temp_dir	plugged/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_dir = fnamemodify(ale#util#Tempname(), ':h')$/;"	v
s:temp_dir	plugged/ale/autoload/ale/path.vim	/^let s:temp_dir = ale#path#Simplify(fnamemodify(ale#util#Tempname(), ':h:h'))$/;"	v
s:temp_files	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_files = {}$/;"	v
s:temp_regex_prefix	plugged/ale/autoload/ale/handlers/haskell.vim	/^let s:temp_regex_prefix =$/;"	v
s:temp_scripts	plugged/vim-fugitive/autoload/fugitive.vim	/^  let s:temp_scripts = {}$/;"	v
s:term	plugged/lightline.vim/autoload/lightline.vim	/^function! s:term(p) abort$/;"	f
s:term_black	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_black = 235$/;"	v
s:term_blue	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_blue = 39$/;"	v
s:term_green	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_green = 114$/;"	v
s:term_grey	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_grey = 236$/;"	v
s:term_marker	plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = ";#FZF"$/;"	v
s:term_marker	plugged/fzf/plugin/fzf.vim	/^  let s:term_marker = '&::FZF'$/;"	v
s:term_purple	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_purple = 170$/;"	v
s:term_red	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_red = 204$/;"	v
s:term_white	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_white = 145$/;"	v
s:term_yellow	plugged/lightline.vim/autoload/lightline/colorscheme/deus.vim	/^let s:term_yellow = 180$/;"	v
s:test	plugged/delimitMate/plugin/delimitMate.vim	/^function! s:test() "{{{$/;"	f
s:test_mappings	plugged/delimitMate/autoload/delimitMate.vim	/^function! s:test_mappings(list, is_matchpair) "{{{$/;"	f
s:textobject	plugged/vim-commentary/plugin/commentary.vim	/^function! s:textobject(inner) abort$/;"	f
s:throw	plugged/vim-abolish/plugin/abolish.vim	/^function! s:throw(msg)$/;"	f
s:throw	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:throw(string) abort$/;"	f
s:time_handlers	plugged/vim-speeddating/autoload/speeddating.vim	/^  let s:time_handlers = []$/;"	v
s:timer_args	plugged/ale/autoload/ale/list.vim	/^    let s:timer_args = {}$/;"	v
s:timer_id	plugged/ale/autoload/ale/completion.vim	/^let s:timer_id = -1$/;"	v
s:timeregexp	plugged/vim-speeddating/autoload/speeddating.vim	/^function! s:timeregexp() dict$/;"	f
s:titlecase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:titlecase(word)$/;"	f
s:tmux_enabled	plugged/fzf/plugin/fzf.vim	/^function! s:tmux_enabled()$/;"	f
s:trailer	plugged/vim-slash/plugin/slash.vim	/^function! s:trailer()$/;"	f
s:trailer_on_leave	plugged/vim-slash/plugin/slash.vim	/^function! s:trailer_on_leave()$/;"	f
s:trees	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:trees = {}$/;"	v
s:trigger_character_map	plugged/ale/autoload/ale/completion.vim	/^let s:trigger_character_map = {$/;"	v
s:try_visit	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:try_visit(bnr, noau) abort$/;"	f
s:types	plugged/supertab/plugin/supertab.vim	/^  let s:types = s:types . "np"$/;"	v
s:types	plugged/supertab/plugin/supertab.vim	/^  let s:types =$/;"	v
s:uniq	plugged/lightline.vim/autoload/lightline.vim	/^  function! s:uniq(xs) abort$/;"	f
s:uniq	plugged/lightline.vim/autoload/lightline.vim	/^  let s:uniq = function('uniq')$/;"	v
s:uniq	plugged/lightline.vim/test/uniq.vim	/^function! s:uniq(...)$/;"	f
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/cscope.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unix_redir	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:unix_redir = (&shellredir =~# '%s') ? &shellredir : &shellredir . ' %s'$/;"	v
s:unknown_coercion	plugged/vim-abolish/plugin/abolish.vim	/^function! s:unknown_coercion(letter,word)$/;"	f
s:upconvert	plugged/lightline.vim/autoload/lightline/colorscheme.vim	/^function! s:upconvert(nr) abort$/;"	f
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_in_progress[module] = []$/;"	v
s:update_in_progress	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_in_progress = {}$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^    let s:update_queue[module] = []$/;"	v
s:update_queue	plugged/vim-gutentags/autoload/gutentags.vim	/^let s:update_queue = {}$/;"	v
s:update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:update_tags(bufno, module, write_mode, queue_mode) abort$/;"	f
s:uppercase	plugged/vim-abolish/plugin/abolish.vim	/^function! s:uppercase(word)$/;"	f
s:use_sh	plugged/fzf/plugin/fzf.vim	/^function! s:use_sh()$/;"	f
s:validate_layout	plugged/fzf/plugin/fzf.vim	/^function! s:validate_layout(layout)$/;"	f
s:var	plugged/vim-fugitive/autoload/fugitive.vim	/^let s:var = '\\%(<\\%(cword\\|cWORD\\|cexpr\\|cfile\\|sfile\\|slnum\\|afile\\|abuf\\|amatch' . (/;"	v
s:version_cache	plugged/ale/ale_linters/java/eclipselsp.vim	/^let s:version_cache = {}$/;"	v
s:version_cache	plugged/ale/autoload/ale/semver.vim	/^let s:version_cache = {}$/;"	v
s:version_requirement	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:version_requirement(val, min)$/;"	f
s:versions	plugged/fzf/plugin/fzf.vim	/^let s:versions = {}$/;"	v
s:veryDarkGray	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:veryDarkGray = [ '#1c1d21' , 234 ]$/;"	v
s:violet	plugged/lightline.vim/autoload/lightline/colorscheme/simpleblack.vim	/^let s:violet = [ '#cf73e6', '170' ]$/;"	v
s:violet	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:violet = [ '#6c71c4', s:cuicolors.violet[s:cuiindex] ]$/;"	v
s:visual_bg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_bg = '#8787af'$/;"	v
s:visual_fg	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:visual_fg = '#000000'$/;"	v
s:visual_handlers	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:visual_handlers += [{'regexp': '-\\=\\<\\%(0x\\x\\+\\|\\d\\+\\)\\>', 'increment': s:functi/;"	v
s:visual_handlers	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:visual_handlers += [{'regexp': '\\<[A-Za-z]\\>', 'increment': s:function("s:letterincremen/;"	v
s:visual_handlers	plugged/vim-speeddating/autoload/speeddating.vim	/^let s:visual_handlers = []$/;"	v
s:warn	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:warn(message)$/;"	f
s:warn	plugged/fzf/plugin/fzf.vim	/^function! s:warn(msg)$/;"	f
s:warned	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:warned = 0$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:white = [ '#ffffff', 15 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:white = [ '#ffffff' , 15 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:white = [ '#a9b7c6', 250 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:white = [ '#f8f8f2', 234 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:white = [ '#d0d0d0', 252 ]$/;"	v
s:white	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:white = [ '#fce8c3', 15 ]$/;"	v
s:wide	plugged/fzf.vim/autoload/fzf/vim.vim	/^let s:wide = 120$/;"	v
s:wildignores_options_path	plugged/vim-gutentags/autoload/gutentags/ctags.vim	/^let s:wildignores_options_path = ''$/;"	v
s:win_init	plugged/vim-dirvish/autoload/dirvish.vim	/^function! s:win_init() abort$/;"	f
s:window	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_dark.vim	/^let s:window = '#efefef'$/;"	v
s:window	plugged/lightline.vim/autoload/lightline/colorscheme/PaperColor_light.vim	/^let s:window = '#efefef'$/;"	v
s:windows_sink	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:windows_sink(line)$/;"	f
s:winshell	plugged/vim-fugitive/autoload/fugitive.vim	/^function! s:winshell() abort$/;"	f
s:word_regex_list	plugged/ale/ale_linters/vim/vint.vim	/^let s:word_regex_list = [$/;"	v
s:words	plugged/vim-abolish/plugin/abolish.vim	/^function! s:words()$/;"	f
s:worktree_for_dir	plugged/vim-fugitive/plugin/fugitive.vim	/^let s:worktree_for_dir = {}$/;"	v
s:wrap	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:wrap(name, opts, bang)$/;"	f
s:wrap	plugged/vim-slash/plugin/slash.vim	/^function! s:wrap(seq)$/;"	f
s:wrap	plugged/vim-surround/plugin/surround.vim	/^function! s:wrap(string,char,type,removed,special)$/;"	f
s:wrap_cmds	plugged/fzf/plugin/fzf.vim	/^  function! s:wrap_cmds(cmds)$/;"	f
s:wrapreg	plugged/vim-surround/plugin/surround.vim	/^function! s:wrapreg(reg,char,removed,special)$/;"	f
s:write_triggered_update_tags	plugged/vim-gutentags/autoload/gutentags.vim	/^function! s:write_triggered_update_tags(bufno) abort$/;"	f
s:xterm_launcher	plugged/fzf/plugin/fzf.vim	/^function! s:xterm_launcher()$/;"	f
s:yank_to_register	plugged/fzf.vim/autoload/fzf/vim.vim	/^function! s:yank_to_register(data)$/;"	f
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/16color.vim	/^let s:yellow = [ '#ffff00', 11 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/OldHope.vim	/^let s:yellow = [ '#e5cd52' , 221 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow.vim	/^let s:yellow = '#eab700'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night.vim	/^let s:yellow = '#f0c674'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Blue.vim	/^let s:yellow = '#ffeead'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Bright.vim	/^let s:yellow = '#e7c547'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/Tomorrow_Night_Eighties.vim	/^let s:yellow = '#ffcc66'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/apprentice.vim	/^let s:yellow       = [ '#ffffaf', 229 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_dark.vim	/^let s:yellow = '#e6b673'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_light.vim	/^let s:yellow = '#E6B673'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/ayu_mirage.vim	/^let s:yellow = '#ffc44c'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/darcula.vim	/^let s:yellow = [ '#ffc66d', 222 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/jellybeans.vim	/^let s:yellow = [ '#ffb964', 215 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/materia.vim	/^let s:yellow = '#ffcc00'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/material.vim	/^let s:yellow = '#ffcb6b'$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/molokai.vim	/^let s:yellow = [ '#e6db74', 229 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/one.vim	/^let s:yellow = [ '#e5c07b', 180 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_black.vim	/^let s:yellow    = ['#dbb32d', 3]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_dark.vim	/^let s:yellow    = ['#dbb32d', 3]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_light.vim	/^let s:yellow    = ['#ad8900', 3]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/selenized_white.vim	/^let s:yellow    = ['#c49700', 3]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/seoul256.vim	/^let s:yellow = [ '#d8af5f', 3 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/solarized.vim	/^let s:yellow = [ '#b58900', s:cuicolors.yellow[s:cuiindex] ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/srcery_drk.vim	/^let s:yellow = [ '#fbb829', 3 ]$/;"	v
s:yellow	plugged/lightline.vim/autoload/lightline/colorscheme/wombat.vim	/^let s:yellow = [ '#cae682', 180 ]$/;"	v
save_cpo	plugged/delimitMate/plugin/delimitMate.vim	/^let save_cpo = &cpo$/;"	v
scan	plugged/fzf/src/matcher.go	/^func (m *Matcher) scan(request MatchRequest) (*Merger, bool) {$/;"	f	struct:fzf.Matcher	typeref:typename:(*Merger, bool)
scoreGapExtention	plugged/fzf/src/algo/algo.go	/^	scoreGapExtention = -1$/;"	c	package:algo
scoreGapStart	plugged/fzf/src/algo/algo.go	/^	scoreGapStart     = -3$/;"	c	package:algo
scoreMatch	plugged/fzf/src/algo/algo.go	/^	scoreMatch        = 16$/;"	c	package:algo
scroll	plugged/fzf/src/options.go	/^	scroll      string$/;"	m	struct:fzf.previewOpts	typeref:typename:string
scrollable	plugged/fzf/src/terminal.go	/^	scrollable bool$/;"	m	struct:fzf.previewer	typeref:typename:bool
scry	plugged/nvim-lspconfig/CONFIG.md	/^## scry$/;"	s	chapter:Configurations
searchRequest	plugged/fzf/src/terminal.go	/^type searchRequest struct {$/;"	s	package:fzf
selectItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
selectItemChanged	plugged/fzf/src/terminal.go	/^func (t *Terminal) selectItemChanged(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
select_count	plugged/fzf/test/test_go.rb	/^          def select_count$/;"	f	method:Tmux.until
selected	plugged/fzf/src/terminal.go	/^	selected     map[int32]selectedItem$/;"	m	struct:fzf.Terminal	typeref:typename:map[int32]selectedItem
selected	plugged/fzf/src/terminal.go	/^	selected bool$/;"	m	struct:fzf.itemLine	typeref:typename:bool
selectedItem	plugged/fzf/src/terminal.go	/^type selectedItem struct {$/;"	s	package:fzf
selenized_black	plugged/lightline.vim/colorscheme.md	/^### selenized_black$/;"	S	chapter:Available Colorschemes
selenized_dark	plugged/lightline.vim/colorscheme.md	/^### selenized_dark$/;"	S	chapter:Available Colorschemes
selenized_light	plugged/lightline.vim/colorscheme.md	/^### selenized_light$/;"	S	chapter:Available Colorschemes
selenized_white	plugged/lightline.vim/colorscheme.md	/^### selenized_white$/;"	S	chapter:Available Colorschemes
send_keys	plugged/fzf/test/test_go.rb	/^  def send_keys(*args)$/;"	f	class:Tmux
seoul256	plugged/lightline.vim/colorscheme.md	/^### seoul256$/;"	S	chapter:Available Colorschemes
setBg	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) setBg() {$/;"	f	struct:tui.LightWindow
setUp	plugged/ale/test/python/test_deoplete_source.py	/^    def setUp(self):$/;"	m	class:DeopleteSourceTest
set_keymap	init.lua	/^    local function set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end$/;"	f
set_option	init.lua	/^    local function set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end$/;"	f
set_precedence	plugged/supertab/ftplugin/html.vim	/^        let set_precedence = !eclim#util#ListContains(natures, 'php')$/;"	v
set_precedence	plugged/supertab/ftplugin/html.vim	/^  let set_precedence = 1$/;"	v
set_var	plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	class:TestFish
set_var	plugged/fzf/test/test_go.rb	/^  def set_var(name, val)$/;"	f	module:TestShell
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	class:TestGoFZF
setup	plugged/fzf/test/test_go.rb	/^  def setup$/;"	f	module:TestShell
setup() function	plugged/nvim-lspconfig/ADVANCED_README.md	/^## setup() function$/;"	s
setupTerminal	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) setupTerminal() {$/;"	f	unknown:tui.LightRenderer
setupTerminal	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) setupTerminal() error {$/;"	f	unknown:tui.LightRenderer	typeref:typename:error
setup_case	plugged/completion-nvim/lua/completion/matching.lua	/^local function setup_case(prefix, word)$/;"	f
shape	plugged/fzf/src/tui/tui.go	/^	shape       BorderShape$/;"	m	struct:tui.BorderStyle	typeref:typename:BorderShape
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestBash
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestFish
shell	plugged/fzf/test/test_go.rb	/^  def shell$/;"	f	class:TestZsh
sigstop	plugged/fzf/src/terminal.go	/^	sigstop      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
simpleblack	plugged/lightline.vim/colorscheme.md	/^### simpleblack$/;"	S	chapter:Available Colorschemes
size	plugged/fzf/src/options.go	/^	size        sizeSpec$/;"	m	struct:fzf.previewOpts	typeref:typename:sizeSpec
size	plugged/fzf/src/options.go	/^	size    float64$/;"	m	struct:fzf.sizeSpec	typeref:typename:float64
sizeSpec	plugged/fzf/src/options.go	/^type sizeSpec struct {$/;"	s	package:fzf
slab	plugged/fzf/src/matcher.go	/^	slab           []*util.Slab$/;"	m	struct:fzf.Matcher	typeref:typename:[]*util.Slab
slab	plugged/fzf/src/pattern_test.go	/^var slab *util.Slab$/;"	v	package:fzf	typeref:typename:*util.Slab
slab	plugged/fzf/src/terminal.go	/^	slab         *util.Slab$/;"	m	struct:fzf.Terminal	typeref:typename:*util.Slab
slab16Size	plugged/fzf/src/constants.go	/^	slab16Size int = 100 * 1024 \/\/ 200KB * 32 = 12.8MB$/;"	c	package:fzf	typeref:typename:int
slab32Size	plugged/fzf/src/constants.go	/^	slab32Size int = 2048       \/\/ 8KB * 32 = 256KB$/;"	c	package:fzf	typeref:typename:int
slash	plugged/vim-slash/plugin/slash.vim	/^  augroup slash$/;"	a
slash#blink	plugged/vim-slash/plugin/slash.vim	/^function! slash#blink(times, delay)$/;"	f
slice	plugged/fzf/src/util/chars.go	/^	slice           []byte \/\/ or []rune$/;"	m	struct:util.Chars	typeref:typename:[]byte
sliceChunks	plugged/fzf/src/matcher.go	/^func (m *Matcher) sliceChunks(chunks []*Chunk) [][]*Chunk {$/;"	f	struct:fzf.Matcher	typeref:typename:[][]*Chunk
smcup	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) smcup() {$/;"	f	struct:tui.LightRenderer
sneak	plugged/vim-sneak/plugin/sneak.vim	/^  augroup sneak$/;"	a
sneak#cancel	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#cancel() abort$/;"	f
sneak#init	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#init() abort$/;"	f
sneak#is_sneaking	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#is_sneaking() abort$/;"	f
sneak#label#sanitize_target_labels	plugged/vim-sneak/autoload/sneak/label.vim	/^func! sneak#label#sanitize_target_labels() abort$/;"	f
sneak#label#to	plugged/vim-sneak/autoload/sneak/label.vim	/^func! sneak#label#to(s, v, label) abort$/;"	f
sneak#reset	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#reset(key) abort$/;"	f
sneak#search#get_cs	plugged/vim-sneak/autoload/sneak/search.vim	/^func! sneak#search#get_cs(input, use_ic_scs) abort$/;"	f
sneak#search#new	plugged/vim-sneak/autoload/sneak/search.vim	/^func! sneak#search#new() abort$/;"	f
sneak#state	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#state() abort$/;"	f
sneak#to	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#to(op, input, inputlen, count, register, repeatmotion, reverse, inclusive, label) ab/;"	f
sneak#util#echo	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#echo(msg) abort$/;"	f
sneak#util#getc	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#getc() abort$/;"	f
sneak#util#getchar	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#getchar() abort$/;"	f
sneak#util#has_upper	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#has_upper(s) abort$/;"	f
sneak#util#isvisualop	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#isvisualop(op) abort$/;"	f
sneak#util#links_to	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#links_to(hlgroup) abort$/;"	f
sneak#util#nudge	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#nudge(right) abort$/;"	f
sneak#util#removehl	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#removehl() abort$/;"	f
sneak#util#skipfold	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#skipfold(current_line, reverse) abort$/;"	f
sneak#util#strlen	plugged/vim-sneak/autoload/sneak/util.vim	/^  func! sneak#util#strlen(s) abort$/;"	f
sneak#util#wincol1	plugged/vim-sneak/autoload/sneak/util.vim	/^func! sneak#util#wincol1() abort$/;"	f
sneak#wrap	plugged/vim-sneak/plugin/sneak.vim	/^func! sneak#wrap(op, inputlen, reverse, inclusive, label) abort$/;"	f
sneak.vim :shoe:	plugged/vim-sneak/README.md	/^sneak.vim :shoe:$/;"	c
sneak_colorscheme	plugged/vim-sneak/autoload/sneak/util.vim	/^augroup sneak_colorscheme  " Re-init on :colorscheme change at runtime. #108$/;"	a
sneak_echo	plugged/vim-sneak/autoload/sneak/util.vim	/^  augroup sneak_echo$/;"	a
sneak_label_cleanup	plugged/vim-sneak/autoload/sneak/label.vim	/^  augroup sneak_label_cleanup$/;"	a
sneak_netrw	plugged/vim-sneak/plugin/sneak.vim	/^  augroup sneak_netrw$/;"	a
sneak_optionset	plugged/vim-sneak/plugin/sneak.vim	/^  augroup sneak_optionset$/;"	a
snippetsList	plugged/completion-nvim/lua/completion/source/snippet.lua	/^  local snippetsList = api.nvim_call_function('vsnip#source#find', {api.nvim_get_current_buf()})$/;"	f
solargraph	plugged/nvim-lspconfig/CONFIG.md	/^## solargraph$/;"	s	chapter:Configurations
solarized (`background=dark`)	plugged/lightline.vim/README.md	/^### solarized (`background=dark`)$/;"	S	chapter:lightline.vim
solarized (`background=dark`)	plugged/lightline.vim/colorscheme.md	/^### solarized (`background=dark`)$/;"	S	chapter:Available Colorschemes
solarized (`background=light`)	plugged/lightline.vim/README.md	/^### solarized (`background=light`)$/;"	S	chapter:lightline.vim
solarized (`background=light`)	plugged/lightline.vim/colorscheme.md	/^### solarized (`background=light`)$/;"	S	chapter:Available Colorschemes
sorbet	plugged/nvim-lspconfig/CONFIG.md	/^## sorbet$/;"	s	chapter:Configurations
sort	plugged/fzf/src/matcher.go	/^	sort           bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
sort	plugged/fzf/src/matcher.go	/^	sort       bool$/;"	m	struct:fzf.MatchRequest	typeref:typename:bool
sort	plugged/fzf/src/terminal.go	/^	sort         bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
sort	plugged/fzf/src/terminal.go	/^	sort    bool$/;"	m	struct:fzf.searchRequest	typeref:typename:bool
sortCriteria	plugged/fzf/src/result.go	/^var sortCriteria []criterion$/;"	v	package:fzf	typeref:typename:[]criterion
sortSelected	plugged/fzf/src/terminal.go	/^func (t *Terminal) sortSelected() []selectedItem {$/;"	f	struct:fzf.Terminal	typeref:typename:[]selectedItem
sort_completion_items	plugged/completion-nvim/lua/completion/source/lsp.lua	/^local function sort_completion_items(items)$/;"	f
sortable	plugged/fzf/src/pattern.go	/^	sortable      bool$/;"	m	struct:fzf.Pattern	typeref:typename:bool
sorted	plugged/fzf/src/merger.go	/^	sorted  bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
sorted_map_table	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function sorted_map_table(t, func)$/;"	f
sourcekit	plugged/nvim-lspconfig/CONFIG.md	/^## sourcekit$/;"	s	chapter:Configurations
space	plugged/delimitMate/Makefile	/^space    := $(empty) $(empty)$/;"	m
speeddating#adddate	plugged/vim-speeddating/autoload/speeddating.vim	/^function! speeddating#adddate(master,count,bang)$/;"	f
speeddating#increment	plugged/vim-speeddating/autoload/speeddating.vim	/^function! speeddating#increment(increment)$/;"	f
speeddating#incrementvisual	plugged/vim-speeddating/autoload/speeddating.vim	/^function! speeddating#incrementvisual(count)$/;"	f
speeddating#loadformats	plugged/vim-speeddating/autoload/speeddating.vim	/^function! speeddating#loadformats()$/;"	f
speeddating#timestamp	plugged/vim-speeddating/autoload/speeddating.vim	/^function! speeddating#timestamp(utc,count)$/;"	f
speeddating.vim	plugged/vim-speeddating/README.markdown	/^# speeddating.vim$/;"	c
spinner	plugged/fzf/src/terminal.go	/^	spinner      []string$/;"	m	struct:fzf.Terminal	typeref:typename:[]string
spinner	plugged/fzf/src/terminal.go	/^	spinner    string$/;"	m	struct:fzf.previewer	typeref:typename:string
spinner	plugged/fzf/src/terminal.go	/^	spinner string$/;"	m	struct:fzf.previewResult	typeref:typename:string
spinnerDuration	plugged/fzf/src/constants.go	/^	spinnerDuration   = 100 * time.Millisecond$/;"	c	package:fzf
splitNth	plugged/fzf/src/options.go	/^func splitNth(str string) []Range {$/;"	f	package:fzf	typeref:typename:[]Range
sqlls	plugged/nvim-lspconfig/CONFIG.md	/^## sqlls$/;"	s	chapter:Configurations
sqls	plugged/nvim-lspconfig/CONFIG.md	/^## sqls$/;"	s	chapter:Configurations
srcery_drk	plugged/lightline.vim/colorscheme.md	/^### srcery_drk$/;"	S	chapter:Available Colorschemes
stab	plugged/supertab/plugin/supertab.vim	/^        let stab = ''$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^        let stab = substitute(stab, '()$', '', '')$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^        let stab = substitute(stab, '<SID>\\c', '<SNR>' . existing_stab.sid . '_', '')$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^      let stab = substitute(stab, '\\(<[-a-zA-Z0-9]\\+>\\)', '\\\\\\1', 'g')$/;"	v
stab	plugged/supertab/plugin/supertab.vim	/^    let stab = maparg('<s-tab>', 'i')$/;"	v
startChan	plugged/fzf/src/terminal.go	/^	startChan    chan bool$/;"	m	struct:fzf.Terminal	typeref:typename:chan bool
startEventPoller	plugged/fzf/src/reader.go	/^func (r *Reader) startEventPoller() {$/;"	f	struct:fzf.Reader
state	plugged/fzf/src/util/atomicbool.go	/^	state int32 \/\/ "1" is true, "0" is false$/;"	m	struct:util.AtomicBool	typeref:typename:int32
stderr	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderr(str string) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	plugged/fzf/src/tui/light.go	/^func (r *LightRenderer) stderrInternal(str string, allowNLCR bool) {$/;"	f	unknown:tui.LightRenderer
stderrInternal	plugged/fzf/src/tui/light.go	/^func (w *LightWindow) stderrInternal(str string, allowNLCR bool) {$/;"	f	struct:tui.LightWindow
str	plugged/fzf/src/tokenizer.go	/^	str   *string$/;"	m	struct:fzf.Delimiter	typeref:typename:*string
strLines	plugged/fzf/src/options.go	/^func strLines(str string) []string {$/;"	f	package:fzf	typeref:typename:[]string
strong	plugged/fzf/src/terminal.go	/^	strong       tui.Attr$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Attr
structure names	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?struct[ \\t]+([a-zA-Z0-9_]+)\/\\2\/s,structure names\/$/;"	k	langdef:Rust
style	plugged/fzf/src/tui/tcell.go	/^func (p ColorPair) style() tcell.Style {$/;"	f	unknown:tui.ColorPair	typeref:typename:tcell.Style
stylelint_lsp	plugged/nvim-lspconfig/CONFIG.md	/^## stylelint_lsp$/;"	s	chapter:Configurations
substring_match	plugged/completion-nvim/lua/completion/matching.lua	/^local function substring_match(prefix, word)$/;"	f
sumneko_lua	plugged/nvim-lspconfig/CONFIG.md	/^## sumneko_lua$/;"	s	chapter:Configurations
supertab_close_preview	plugged/supertab/plugin/supertab.vim	/^    augroup supertab_close_preview$/;"	a
supertab_completion_mode	plugged/supertab/plugin/supertab.vim	/^    augroup supertab_completion_mode$/;"	a
supertab_ignorecase	plugged/supertab/plugin/supertab.vim	/^          augroup supertab_ignorecase$/;"	a
supertab_reset	plugged/supertab/plugin/supertab.vim	/^  augroup supertab_reset$/;"	a
supertab_retain	plugged/supertab/plugin/supertab.vim	/^    augroup supertab_retain$/;"	a
suppress	plugged/fzf/src/terminal.go	/^	suppress     bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
surround.vim	plugged/vim-surround/README.markdown	/^# surround.vim$/;"	c
svelte	plugged/nvim-lspconfig/CONFIG.md	/^## svelte$/;"	s	chapter:Configurations
svls	plugged/nvim-lspconfig/CONFIG.md	/^## svls$/;"	s	chapter:Configurations
switch_source_header	plugged/nvim-lspconfig/lua/lspconfig/clangd.lua	/^local function switch_source_header(bufnr)$/;"	f
syntax_getter	plugged/completion-nvim/lua/completion/chain_completion.lua	/^  local syntax_getter = function()$/;"	f
system	plugged/rust.vim/test/run-tests	/^def system(cmd, capture=False, ok_fail=False):$/;"	f
t	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> t :call ale#preview#OpenSelectionInTab()<CR>$/;"	m
t	plugged/fzf/src/terminal.go	/^	t actionType$/;"	m	struct:fzf.action	typeref:typename:actionType
tabstop	plugged/fzf/src/terminal.go	/^	tabstop      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
tabstop	plugged/fzf/src/tui/light.go	/^	tabstop       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
tabstop	plugged/fzf/src/tui/light.go	/^	tabstop  int$/;"	m	struct:tui.LightWindow	typeref:typename:int
tac	plugged/fzf/src/matcher.go	/^	tac            bool$/;"	m	struct:fzf.Matcher	typeref:typename:bool
tac	plugged/fzf/src/merger.go	/^	tac     bool$/;"	m	struct:fzf.Merger	typeref:typename:bool
tailwindcss	plugged/nvim-lspconfig/CONFIG.md	/^## tailwindcss$/;"	s	chapter:Configurations
target/$(BINARY32)	plugged/fzf/Makefile	/^target\/$(BINARY32): $(SOURCES)$/;"	t
target/$(BINARY64)	plugged/fzf/Makefile	/^target\/$(BINARY64): $(SOURCES)$/;"	t
target/$(BINARYARM5)	plugged/fzf/Makefile	/^target\/$(BINARYARM5): $(SOURCES)$/;"	t
target/$(BINARYARM6)	plugged/fzf/Makefile	/^target\/$(BINARYARM6): $(SOURCES)$/;"	t
target/$(BINARYARM7)	plugged/fzf/Makefile	/^target\/$(BINARYARM7): $(SOURCES)$/;"	t
target/$(BINARYARM8)	plugged/fzf/Makefile	/^target\/$(BINARYARM8): $(SOURCES)$/;"	t
target/$(BINARYPPC64LE)	plugged/fzf/Makefile	/^target\/$(BINARYPPC64LE): $(SOURCES)$/;"	t
tcount	plugged/delimitMate/test/autoclose_matchpairs.vim	/^    let tcount += 1$/;"	v
tcount	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let tcount = 1$/;"	v
tcount	plugged/delimitMate/test/autoclose_quotes.vim	/^      let tcount += 1$/;"	v
tcount	plugged/delimitMate/test/autoclose_quotes.vim	/^    let tcount += 1$/;"	v
tcount	plugged/delimitMate/test/autoclose_quotes.vim	/^let tcount = 1$/;"	v
tcount	plugged/delimitMate/test/expand_cr.vim	/^  let tcount += 1$/;"	v
tcount	plugged/delimitMate/test/expand_cr.vim	/^let tcount = 1$/;"	v
tcount	plugged/delimitMate/test/expand_space.vim	/^  let tcount += 1$/;"	v
tcount	plugged/delimitMate/test/expand_space.vim	/^let tcount = 1$/;"	v
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	class:TestGoFZF
teardown	plugged/fzf/test/test_go.rb	/^  def teardown$/;"	f	module:TestShell
template	plugged/fzf/src/terminal.go	/^	template string$/;"	m	struct:fzf.previewRequest	typeref:typename:string
template	plugged/nvim-lspconfig/scripts/docgen.lua	/^local function template(s, params)$/;"	f
tempname	plugged/fzf/test/test_go.rb	/^  def tempname$/;"	f	class:TestBase
term	plugged/fzf/src/pattern.go	/^type term struct {$/;"	s	package:fzf
termEqual	plugged/fzf/src/pattern.go	/^	termEqual$/;"	c	package:fzf
termExact	plugged/fzf/src/pattern.go	/^	termExact$/;"	c	package:fzf
termFuzzy	plugged/fzf/src/pattern.go	/^	termFuzzy termType = iota$/;"	c	package:fzf	typeref:type:termType
termPrefix	plugged/fzf/src/pattern.go	/^	termPrefix$/;"	c	package:fzf
termSet	plugged/fzf/src/pattern.go	/^type termSet []term$/;"	t	package:fzf	typeref:typename:[]term
termSets	plugged/fzf/src/pattern.go	/^	termSets      []termSet$/;"	m	struct:fzf.Pattern	typeref:typename:[]termSet
termSuffix	plugged/fzf/src/pattern.go	/^	termSuffix$/;"	c	package:fzf
termType	plugged/fzf/src/pattern.go	/^type termType int$/;"	t	package:fzf	typeref:typename:int
terminate	plugged/fzf/src/reader.go	/^func (r *Reader) terminate() {$/;"	f	struct:fzf.Reader
terraformls	plugged/nvim-lspconfig/CONFIG.md	/^## terraformls$/;"	s	chapter:Configurations
test	plugged/delimitMate/Makefile	/^test:$/;"	t
test	plugged/fzf/Makefile	/^test: $(SOURCES)$/;"	t
test	plugged/nvim-lspconfig/Makefile	/^test:$/;"	t
test	plugged/vim-sneak/Makefile	/^test: tests\/vim-vader tests\/vim-repeat tests\/vim-surround$/;"	t
testParserReference	plugged/fzf/src/ansi_test.go	/^func testParserReference(t testing.TB, str string) {$/;"	f	package:fzf
test_accept_non_empty	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty$/;"	f	class:TestGoFZF
test_accept_non_empty_with_empty_list	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_empty_list$/;"	f	class:TestGoFZF
test_accept_non_empty_with_multi_selection	plugged/fzf/test/test_go.rb	/^  def test_accept_non_empty_with_multi_selection$/;"	f	class:TestGoFZF
test_alt_c	plugged/fzf/test/test_go.rb	/^  def test_alt_c$/;"	f	module:TestShell
test_alt_c_command	plugged/fzf/test/test_go.rb	/^  def test_alt_c_command$/;"	f	module:TestShell
test_async_event	plugged/ale/test/python/test_deoplete_source.py	/^    def test_async_event(self):$/;"	m	class:DeopleteSourceTest
test_attributes	plugged/ale/test/python/test_deoplete_source.py	/^    def test_attributes(self):$/;"	m	class:DeopleteSourceTest
test_backward_delete_char_eof	plugged/fzf/test/test_go.rb	/^  def test_backward_delete_char_eof$/;"	f	class:TestGoFZF
test_backward_eof	plugged/fzf/test/test_go.rb	/^  def test_backward_eof$/;"	f	class:TestGoFZF
test_bind	plugged/fzf/test/test_go.rb	/^  def test_bind$/;"	f	class:TestGoFZF
test_bind_print_query	plugged/fzf/test/test_go.rb	/^  def test_bind_print_query$/;"	f	class:TestGoFZF
test_bind_replace_query	plugged/fzf/test/test_go.rb	/^  def test_bind_replace_query$/;"	f	class:TestGoFZF
test_cancel	plugged/fzf/test/test_go.rb	/^  def test_cancel$/;"	f	class:TestGoFZF
test_change_first_last	plugged/fzf/test/test_go.rb	/^  def test_change_first_last$/;"	f	class:TestGoFZF
test_change_prompt	plugged/fzf/test/test_go.rb	/^  def test_change_prompt$/;"	f	class:TestGoFZF
test_clear_list_when_header_lines_changed_due_to_reload	plugged/fzf/test/test_go.rb	/^  def test_clear_list_when_header_lines_changed_due_to_reload$/;"	f	class:TestGoFZF
test_clear_query	plugged/fzf/test/test_go.rb	/^  def test_clear_query$/;"	f	class:TestGoFZF
test_clear_selection	plugged/fzf/test/test_go.rb	/^  def test_clear_selection$/;"	f	class:TestGoFZF
test_close	plugged/fzf/test/test_go.rb	/^  def test_close$/;"	f	class:TestGoFZF
test_complete_position	plugged/ale/test/python/test_deoplete_source.py	/^    def test_complete_position(self):$/;"	m	class:DeopleteSourceTest
test_complete_quoted_command	plugged/fzf/test/test_go.rb	/^  def test_complete_quoted_command$/;"	f	class:TestZsh
test_ctrl_r	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r$/;"	f	module:TestShell
test_ctrl_r_abort	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_abort$/;"	f	module:TestShell
test_ctrl_r_multiline	plugged/fzf/test/test_go.rb	/^  def test_ctrl_r_multiline$/;"	f	module:TestShell
test_ctrl_t	plugged/fzf/test/test_go.rb	/^  def test_ctrl_t$/;"	f	module:TestShell
test_ctrl_t_unicode	plugged/fzf/test/test_go.rb	/^  def test_ctrl_t_unicode$/;"	f	module:TestShell
test_custom_completion	plugged/fzf/test/test_go.rb	/^  def test_custom_completion$/;"	f	module:CompletionTest
test_custom_completion_api	plugged/fzf/test/test_go.rb	/^  def test_custom_completion_api$/;"	f	module:CompletionTest
test_cycle	plugged/fzf/test/test_go.rb	/^  def test_cycle$/;"	f	class:TestGoFZF
test_default_extended	plugged/fzf/test/test_go.rb	/^  def test_default_extended$/;"	f	class:TestGoFZF
test_dir_completion	plugged/fzf/test/test_go.rb	/^  def test_dir_completion$/;"	f	module:CompletionTest
test_disabled	plugged/fzf/test/test_go.rb	/^  def test_disabled$/;"	f	class:TestGoFZF
test_dynamic_completion_loader	plugged/fzf/test/test_go.rb	/^  def test_dynamic_completion_loader$/;"	f	class:TestBash
test_escaped_meta_characters	plugged/fzf/test/test_go.rb	/^  def test_escaped_meta_characters$/;"	f	class:TestGoFZF
test_exact	plugged/fzf/test/test_go.rb	/^  def test_exact$/;"	f	class:TestGoFZF
test_execute	plugged/fzf/test/test_go.rb	/^  def test_execute$/;"	f	class:TestGoFZF
test_execute_multi	plugged/fzf/test/test_go.rb	/^  def test_execute_multi$/;"	f	class:TestGoFZF
test_execute_plus_flag	plugged/fzf/test/test_go.rb	/^  def test_execute_plus_flag$/;"	f	class:TestGoFZF
test_execute_shell	plugged/fzf/test/test_go.rb	/^  def test_execute_shell$/;"	f	class:TestGoFZF
test_exit_0	plugged/fzf/test/test_go.rb	/^  def test_exit_0$/;"	f	class:TestGoFZF
test_exit_0_exit_code	plugged/fzf/test/test_go.rb	/^  def test_exit_0_exit_code$/;"	f	class:TestGoFZF
test_exitstatus_empty	plugged/fzf/test/test_go.rb	/^  def test_exitstatus_empty$/;"	f	class:TestGoFZF
test_expect	plugged/fzf/test/test_go.rb	/^  def test_expect$/;"	f	class:TestGoFZF
test_expect_print_query	plugged/fzf/test/test_go.rb	/^  def test_expect_print_query$/;"	f	class:TestGoFZF
test_expect_print_query_select_1	plugged/fzf/test/test_go.rb	/^  def test_expect_print_query_select_1$/;"	f	class:TestGoFZF
test_expect_printable_character_print_query	plugged/fzf/test/test_go.rb	/^  def test_expect_printable_character_print_query$/;"	f	class:TestGoFZF
test_file_completion	plugged/fzf/test/test_go.rb	/^  def test_file_completion$/;"	f	module:CompletionTest
test_file_completion_root	plugged/fzf/test/test_go.rb	/^  def test_file_completion_root$/;"	f	module:CompletionTest
test_file_completion_unicode	plugged/fzf/test/test_go.rb	/^  def test_file_completion_unicode$/;"	f	module:CompletionTest
test_file_word	plugged/fzf/test/test_go.rb	/^  def test_file_word$/;"	f	class:TestGoFZF
test_filter_exitstatus	plugged/fzf/test/test_go.rb	/^  def test_filter_exitstatus$/;"	f	class:TestGoFZF
test_fzf_default_command	plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command$/;"	f	class:TestGoFZF
test_fzf_default_command_failure	plugged/fzf/test/test_go.rb	/^  def test_fzf_default_command_failure$/;"	f	class:TestGoFZF
test_header	plugged/fzf/test/test_go.rb	/^  def test_header$/;"	f	class:TestGoFZF
test_header_and_header_lines	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_and_header_lines_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_and_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines	plugged/fzf/test/test_go.rb	/^  def test_header_lines$/;"	f	class:TestGoFZF
test_header_lines_overflow	plugged/fzf/test/test_go.rb	/^  def test_header_lines_overflow$/;"	f	class:TestGoFZF
test_header_lines_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse$/;"	f	class:TestGoFZF
test_header_lines_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_lines_reverse_list$/;"	f	class:TestGoFZF
test_header_lines_with_nth	plugged/fzf/test/test_go.rb	/^  def test_header_lines_with_nth$/;"	f	class:TestGoFZF
test_header_reverse	plugged/fzf/test/test_go.rb	/^  def test_header_reverse$/;"	f	class:TestGoFZF
test_header_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_header_reverse_list$/;"	f	class:TestGoFZF
test_history	plugged/fzf/test/test_go.rb	/^  def test_history$/;"	f	class:TestGoFZF
test_hscroll_off	plugged/fzf/test/test_go.rb	/^  def test_hscroll_off$/;"	f	class:TestGoFZF
test_info_hidden	plugged/fzf/test/test_go.rb	/^  def test_info_hidden$/;"	f	class:TestGoFZF
test_interrupt_execute	plugged/fzf/test/test_go.rb	/^  def test_interrupt_execute$/;"	f	class:TestGoFZF
test_invalid_cache	plugged/fzf/test/test_go.rb	/^  def test_invalid_cache$/;"	f	class:TestGoFZF
test_invalid_cache_query_type	plugged/fzf/test/test_go.rb	/^  def test_invalid_cache_query_type$/;"	f	class:TestGoFZF
test_invalid_option	plugged/fzf/test/test_go.rb	/^  def test_invalid_option$/;"	f	class:TestGoFZF
test_inverse_only_search_should_not_sort_the_result	plugged/fzf/test/test_go.rb	/^  def test_inverse_only_search_should_not_sort_the_result$/;"	f	class:TestGoFZF
test_jump	plugged/fzf/test/test_go.rb	/^  def test_jump$/;"	f	class:TestGoFZF
test_jump_accept	plugged/fzf/test/test_go.rb	/^  def test_jump_accept$/;"	f	class:TestGoFZF
test_keep_right	plugged/fzf/test/test_go.rb	/^  def test_keep_right$/;"	f	class:TestGoFZF
test_key_bindings	plugged/fzf/test/test_go.rb	/^  def test_key_bindings$/;"	f	class:TestGoFZF
test_kill_default_command_on_abort	plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_abort$/;"	f	class:TestGoFZF
test_kill_default_command_on_accept	plugged/fzf/test/test_go.rb	/^  def test_kill_default_command_on_accept$/;"	f	class:TestGoFZF
test_kill_reload_command_on_abort	plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_abort$/;"	f	class:TestGoFZF
test_kill_reload_command_on_accept	plugged/fzf/test/test_go.rb	/^  def test_kill_reload_command_on_accept$/;"	f	class:TestGoFZF
test_long_line	plugged/fzf/test/test_go.rb	/^  def test_long_line$/;"	f	class:TestGoFZF
test_margin	plugged/fzf/test/test_go.rb	/^  def test_margin$/;"	f	class:TestGoFZF
test_margin_reverse	plugged/fzf/test/test_go.rb	/^  def test_margin_reverse$/;"	f	class:TestGoFZF
test_margin_reverse_list	plugged/fzf/test/test_go.rb	/^  def test_margin_reverse_list$/;"	f	class:TestGoFZF
test_marker	plugged/fzf/test/test_go.rb	/^  def test_marker$/;"	f	class:TestGoFZF
test_multi_max	plugged/fzf/test/test_go.rb	/^  def test_multi_max$/;"	f	class:TestGoFZF
test_multi_order	plugged/fzf/test/test_go.rb	/^  def test_multi_order$/;"	f	class:TestGoFZF
test_no_clear	plugged/fzf/test/test_go.rb	/^  def test_no_clear$/;"	f	class:TestGoFZF
test_normalized_match	plugged/fzf/test/test_go.rb	/^  def test_normalized_match$/;"	f	class:TestGoFZF
test_or_operator	plugged/fzf/test/test_go.rb	/^  def test_or_operator$/;"	f	class:TestGoFZF
test_partial_caching	plugged/fzf/test/test_go.rb	/^  def test_partial_caching$/;"	f	class:TestGoFZF
test_pointer	plugged/fzf/test/test_go.rb	/^  def test_pointer$/;"	f	class:TestGoFZF
test_pointer_with_jump	plugged/fzf/test/test_go.rb	/^  def test_pointer_with_jump$/;"	f	class:TestGoFZF
test_preview	plugged/fzf/test/test_go.rb	/^  def test_preview$/;"	f	class:TestGoFZF
test_preview_bindings_with_default_preview	plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_with_default_preview$/;"	f	class:TestGoFZF
test_preview_bindings_without_default_preview	plugged/fzf/test/test_go.rb	/^  def test_preview_bindings_without_default_preview$/;"	f	class:TestGoFZF
test_preview_clear_screen	plugged/fzf/test/test_go.rb	/^  def test_preview_clear_screen$/;"	f	class:TestGoFZF
test_preview_correct_tab_width_after_ansi_reset_code	plugged/fzf/test/test_go.rb	/^  def test_preview_correct_tab_width_after_ansi_reset_code$/;"	f	class:TestGoFZF
test_preview_file	plugged/fzf/test/test_go.rb	/^  def test_preview_file$/;"	f	class:TestGoFZF
test_preview_flags	plugged/fzf/test/test_go.rb	/^  def test_preview_flags$/;"	f	class:TestGoFZF
test_preview_header	plugged/fzf/test/test_go.rb	/^  def test_preview_header$/;"	f	class:TestGoFZF
test_preview_hidden	plugged/fzf/test/test_go.rb	/^  def test_preview_hidden$/;"	f	class:TestGoFZF
test_preview_q_no_match	plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match$/;"	f	class:TestGoFZF
test_preview_q_no_match_with_initial_query	plugged/fzf/test/test_go.rb	/^  def test_preview_q_no_match_with_initial_query$/;"	f	class:TestGoFZF
test_preview_scroll_begin_and_offset	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_and_offset$/;"	f	class:TestGoFZF
test_preview_scroll_begin_constant	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_constant$/;"	f	class:TestGoFZF
test_preview_scroll_begin_expr	plugged/fzf/test/test_go.rb	/^  def test_preview_scroll_begin_expr$/;"	f	class:TestGoFZF
test_preview_size_0	plugged/fzf/test/test_go.rb	/^  def test_preview_size_0$/;"	f	class:TestGoFZF
test_preview_update_on_select	plugged/fzf/test/test_go.rb	/^  def test_preview_update_on_select$/;"	f	class:TestGoFZF
test_preview_window_follow	plugged/fzf/test/test_go.rb	/^  def test_preview_window_follow$/;"	f	class:TestGoFZF
test_process_completion	plugged/fzf/test/test_go.rb	/^  def test_process_completion$/;"	f	module:CompletionTest
test_query_unicode	plugged/fzf/test/test_go.rb	/^  def test_query_unicode$/;"	f	class:TestGoFZF
test_read0	plugged/fzf/test/test_go.rb	/^  def test_read0$/;"	f	class:TestGoFZF
test_reload	plugged/fzf/test/test_go.rb	/^  def test_reload$/;"	f	class:TestGoFZF
test_reload_even_when_theres_no_match	plugged/fzf/test/test_go.rb	/^  def test_reload_even_when_theres_no_match$/;"	f	class:TestGoFZF
test_request_completion_results	plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results(self):$/;"	m	class:DeopleteSourceTest
test_request_completion_results_from_buffer_without_providers	plugged/ale/test/python/test_deoplete_source.py	/^    def test_request_completion_results_from_buffer_without_providers(self):$/;"	m	class:DeopleteSourceTest
test_scroll	plugged/fzf/test/test_go.rb	/^  def test_scroll$/;"	f	class:TestGoFZF
test_select_1	plugged/fzf/test/test_go.rb	/^  def test_select_1$/;"	f	class:TestGoFZF
test_select_1_exit_0_fail	plugged/fzf/test/test_go.rb	/^  def test_select_1_exit_0_fail$/;"	f	class:TestGoFZF
test_select_all_deselect_all_toggle_all	plugged/fzf/test/test_go.rb	/^  def test_select_all_deselect_all_toggle_all$/;"	f	class:TestGoFZF
test_select_deselect	plugged/fzf/test/test_go.rb	/^  def test_select_deselect$/;"	f	class:TestGoFZF
test_smart_case_for_each_term	plugged/fzf/test/test_go.rb	/^  def test_smart_case_for_each_term$/;"	f	class:TestGoFZF
test_strip_xterm_osc_sequence	plugged/fzf/test/test_go.rb	/^  def test_strip_xterm_osc_sequence$/;"	f	class:TestGoFZF
test_sync	plugged/fzf/test/test_go.rb	/^  def test_sync$/;"	f	class:TestGoFZF
test_tabstop	plugged/fzf/test/test_go.rb	/^  def test_tabstop$/;"	f	class:TestGoFZF
test_tac	plugged/fzf/test/test_go.rb	/^  def test_tac$/;"	f	class:TestGoFZF
test_tac_nosort	plugged/fzf/test/test_go.rb	/^  def test_tac_nosort$/;"	f	class:TestGoFZF
test_tac_sort	plugged/fzf/test/test_go.rb	/^  def test_tac_sort$/;"	f	class:TestGoFZF
test_tiebreak	plugged/fzf/test/test_go.rb	/^  def test_tiebreak$/;"	f	class:TestGoFZF
test_tiebreak_begin_algo_v2	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_begin_algo_v2$/;"	f	class:TestGoFZF
test_tiebreak_end	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_end$/;"	f	class:TestGoFZF
test_tiebreak_index_begin	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_index_begin$/;"	f	class:TestGoFZF
test_tiebreak_length_with_nth	plugged/fzf/test/test_go.rb	/^  def test_tiebreak_length_with_nth$/;"	f	class:TestGoFZF
test_toggle_preview_wrap	plugged/fzf/test/test_go.rb	/^  def test_toggle_preview_wrap$/;"	f	class:TestGoFZF
test_toggle_sort	plugged/fzf/test/test_go.rb	/^  def test_toggle_sort$/;"	f	class:TestGoFZF
test_unbind	plugged/fzf/test/test_go.rb	/^  def test_unbind$/;"	f	class:TestGoFZF
test_unicode_case	plugged/fzf/test/test_go.rb	/^  def test_unicode_case$/;"	f	class:TestGoFZF
test_unset_completion	plugged/fzf/test/test_go.rb	/^  def test_unset_completion$/;"	f	module:CompletionTest
test_vanilla	plugged/fzf/test/test_go.rb	/^  def test_vanilla$/;"	f	class:TestGoFZF
test_with_nth	plugged/fzf/test/test_go.rb	/^  def test_with_nth$/;"	f	class:TestGoFZF
test_with_nth_ansi	plugged/fzf/test/test_go.rb	/^  def test_with_nth_ansi$/;"	f	class:TestGoFZF
test_with_nth_basic	plugged/fzf/test/test_go.rb	/^  def test_with_nth_basic$/;"	f	class:TestGoFZF
test_with_nth_no_ansi	plugged/fzf/test/test_go.rb	/^  def test_with_nth_no_ansi$/;"	f	class:TestGoFZF
testinteractive	plugged/vim-sneak/Makefile	/^testinteractive: tests\/vim-vader tests\/vim-repeat tests\/vim-surround$/;"	t
testnvim	plugged/vim-sneak/Makefile	/^testnvim: tests\/vim-vader tests\/vim-repeat tests\/vim-surround$/;"	t
tests	plugged/ale/run-tests.bat	/^if not "%1"=="" set tests=%1$/;"	v
tests	plugged/ale/run-tests.bat	/^set tests=test\/*.vader test\/*\/*.vader test\/*\/*\/*.vader test\/*\/*\/*\/*.vader$/;"	v
tests/vim-repeat	plugged/vim-sneak/Makefile	/^tests\/vim-repeat:$/;"	t
tests/vim-surround	plugged/vim-sneak/Makefile	/^tests\/vim-surround:$/;"	t
tests/vim-vader	plugged/vim-sneak/Makefile	/^tests\/vim-vader:$/;"	t
tests_on_docker	plugged/rust.vim/test/run-tests	/^def tests_on_docker():$/;"	f
testsnumber	plugged/delimitMate/test/autoclose_matchpairs.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
testsnumber	plugged/delimitMate/test/autoclose_quotes.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^"'''))$/;"	v
testsnumber	plugged/delimitMate/test/expand_cr.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
testsnumber	plugged/delimitMate/test/expand_space.vim	/^let testsnumber = len(filter(copy(lines), 'v:val =~ ''^=\\{80}$'''))$/;"	v
texlab	plugged/nvim-lspconfig/CONFIG.md	/^## texlab$/;"	s	chapter:Configurations
text	plugged/fzf/src/item.go	/^	text        util.Chars    \/\/ 32 = 24 + 1 + 1 + 2 + 4$/;"	m	struct:fzf.Item	typeref:typename:util.Chars
text	plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.Pattern	typeref:typename:[]rune
text	plugged/fzf/src/pattern.go	/^	text          []rune$/;"	m	struct:fzf.term	typeref:typename:[]rune
text	plugged/fzf/src/tokenizer.go	/^	text         *util.Chars$/;"	m	struct:fzf.Token	typeref:typename:*util.Chars
text	plugged/fzf/src/tui/light.go	/^	text         string$/;"	m	struct:tui.wrappedLine	typeref:typename:string
text_document_completion_list_to_complete_items	plugged/completion-nvim/lua/completion/source/lsp.lua	/^local function text_document_completion_list_to_complete_items(result, params)$/;"	f
tflint	plugged/nvim-lspconfig/CONFIG.md	/^## tflint$/;"	s	chapter:Configurations
theme	plugged/fzf/src/terminal.go	/^	theme        *tui.ColorTheme$/;"	m	struct:fzf.Terminal	typeref:typename:*tui.ColorTheme
theme	plugged/fzf/src/tui/light.go	/^	theme         *ColorTheme$/;"	m	struct:tui.LightRenderer	typeref:typename:*ColorTheme
theme	plugged/fzf/src/tui/tui.go	/^	theme        *ColorTheme$/;"	m	struct:tui.FullscreenRenderer	typeref:typename:*ColorTheme
tick	plugged/nvim-lspconfig/scripts/docgen.lua	/^                        local function tick(s)$/;"	f
timeoutInterval	plugged/fzf/src/tui/light_windows.go	/^	timeoutInterval = 10$/;"	c	package:tui
title: ''	plugged/nvim-lspconfig/.github/PULL_REQUEST_TEMPLATE/pull_request_template.md	/^title: ''$/;"	s
tmux	plugged/fzf/test/test_go.rb	/^  attr_reader :tmux$/;"	A	class:TestBase
tmux_args=	plugged/fzf/bin/fzf-tmux	/^tmux_args=()$/;"	f
toActions	plugged/fzf/src/terminal.go	/^func toActions(types ...actionType) []action {$/;"	f	package:fzf	typeref:typename:[]action
toAnsiString	plugged/fzf/src/ansi.go	/^func toAnsiString(color tui.Color, offset int) string {$/;"	f	package:fzf	typeref:typename:string
toggleItem	plugged/fzf/src/terminal.go	/^func (t *Terminal) toggleItem(item *Item) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
toggleSort	plugged/fzf/src/terminal.go	/^	toggleSort   bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
top	plugged/fzf/src/tui/light.go	/^	top      int$/;"	m	struct:tui.LightWindow	typeref:typename:int
top	plugged/fzf/src/tui/tcell.go	/^	top         int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
topLeft	plugged/fzf/src/tui/tui.go	/^	topLeft     rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
topRight	plugged/fzf/src/tui/tui.go	/^	topRight    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
tox	plugged/ale/test/test-files/python/namespace_package_tox/tox.ini	/^[tox]$/;"	s
traits,traits	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?trait[ \\t]+([a-zA-Z0-9_]+)\/\\2\/t,traits,traits\/$/;"	k	langdef:Rust
trans	plugged/fzf/src/chunklist.go	/^	trans  ItemBuilder$/;"	m	struct:fzf.ChunkList	typeref:typename:ItemBuilder
transformInput	plugged/fzf/src/pattern.go	/^func (p *Pattern) transformInput(item *Item) []Token {$/;"	f	struct:fzf.Pattern	typeref:typename:[]Token
transformed	plugged/fzf/src/item.go	/^	transformed *[]Token      \/\/ 8$/;"	m	struct:fzf.Item	typeref:typename:*[]Token
traverse_parents	plugged/nvim-lspconfig/lua/lspconfig/util.lua	/^  local function traverse_parents(path, cb)$/;"	f
tries	plugged/ale/run-tests.bat	/^set tries=0$/;"	v
triggerCurrentCompletion	plugged/completion-nvim/lua/completion/source.lua	/^local triggerCurrentCompletion = function(bufnr, line_to_cursor, prefix, textMatch, suffix, forc/;"	f
trimLeft	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimLeft(runes []rune, width int) ([]rune, int32) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, int32)
trimLength	plugged/fzf/src/util/chars.go	/^	trimLength      uint16$/;"	m	struct:util.Chars	typeref:typename:uint16
trimLengthKnown	plugged/fzf/src/util/chars.go	/^	trimLengthKnown bool$/;"	m	struct:util.Chars	typeref:typename:bool
trimMessage	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimMessage(message string, maxWidth int) string {$/;"	f	struct:fzf.Terminal	typeref:typename:string
trimQuery	plugged/fzf/src/terminal.go	/^func trimQuery(query string) []rune {$/;"	f	package:fzf	typeref:typename:[]rune
trimRight	plugged/fzf/src/terminal.go	/^func (t *Terminal) trimRight(runes []rune, width int) ([]rune, bool) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, bool)
trim_whitespace	plugged/nvim-lspconfig/lua/lspconfig/lspinfo.lua	/^  local function trim_whitespace(cmd)$/;"	f
truncateQuery	plugged/fzf/src/terminal.go	/^func (t *Terminal) truncateQuery() {$/;"	f	struct:fzf.Terminal
trySkip	plugged/fzf/src/algo/algo.go	/^func trySkip(input *util.Chars, caseSensitive bool, b byte, from int) int {$/;"	f	package:algo	typeref:typename:int
try_curl	plugged/fzf/install	/^try_curl() {$/;"	f
try_wget	plugged/fzf/install	/^try_wget() {$/;"	f
tsserver	plugged/nvim-lspconfig/CONFIG.md	/^## tsserver$/;"	s	chapter:Configurations
ttyin	plugged/fzf/src/tui/light.go	/^	ttyin         *os.File$/;"	m	struct:tui.LightRenderer	typeref:typename:*os.File
ttyinChannel	plugged/fzf/src/tui/light.go	/^	ttyinChannel    chan byte$/;"	m	struct:tui.LightRenderer	typeref:typename:chan byte
ttyname	plugged/fzf/src/tui/ttyname_unix.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
ttyname	plugged/fzf/src/tui/ttyname_windows.go	/^func ttyname() string {$/;"	f	package:tui	typeref:typename:string
tui	plugged/fzf/src/terminal.go	/^	tui          tui.Renderer$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Renderer
tui	plugged/fzf/src/tui/dummy.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light_unix.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/light_windows.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tcell.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/ttyname_unix.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/ttyname_windows.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tui.go	/^package tui$/;"	p
tui	plugged/fzf/src/tui/tui_test.go	/^package tui$/;"	p
typ	plugged/fzf/src/pattern.go	/^	typ           termType$/;"	m	struct:fzf.term	typeref:typename:termType
types,type definitions	plugged/rust.vim/ctags/rust.ctags	/^--regex-Rust=\/^[ \\t]*(pub[ \\t]+)?type[ \\t]+([a-zA-Z0-9_]+)\/\\2\/T,types,type definitions\/$/;"	k	langdef:Rust
u	plugged/vim-repeat/autoload/repeat.vim	/^    nmap u <Plug>(RepeatUndo)$/;"	m
undo	plugged/delimitMate/Makefile	/^undo:$/;"	t
unicode	plugged/fzf/src/terminal.go	/^	unicode      bool$/;"	m	struct:fzf.Terminal	typeref:typename:bool
uninstall	plugged/delimitMate/Makefile	/^uninstall:$/;"	t
uninstall	plugged/supertab/Makefile	/^uninstall:$/;"	t
unset_var	plugged/fzf/test/test_go.rb	/^  def unset_var(name)$/;"	f	module:TestShell
until	plugged/fzf/test/test_go.rb	/^  def until(refresh = false)$/;"	f	class:Tmux
upOneLine	plugged/fzf/src/tui/light.go	/^	upOneLine     bool$/;"	m	struct:tui.LightRenderer	typeref:typename:bool
update	plugged/fzf/Makefile	/^update:$/;"	t
updatePromptOffset	plugged/fzf/src/terminal.go	/^func (t *Terminal) updatePromptOffset() ([]rune, []rune) {$/;"	f	struct:fzf.Terminal	typeref:typename:([]rune, []rune)
updateTerminalSize	plugged/fzf/src/tui/light_unix.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
updateTerminalSize	plugged/fzf/src/tui/light_windows.go	/^func (r *LightRenderer) updateTerminalSize() {$/;"	f	unknown:tui.LightRenderer
uri_to_deno_uri	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function uri_to_deno_uri(uri)$/;"	f
usage	plugged/fzf/src/options.go	/^const usage = `usage: fzf [options]$/;"	c	package:fzf
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%FILE_LIST_CMD_IS_ABSOLUTE%"]==["1"] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        if ["%PROJECT_ROOT%"]==["."] set use_raw_list=1$/;"	v
use_raw_list	plugged/vim-gutentags/plat/win32/update_tags.cmd	/^        set use_raw_list=0$/;"	v
util	plugged/fzf/src/util/atomicbool.go	/^package util$/;"	p
util	plugged/fzf/src/util/atomicbool_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/chars.go	/^package util$/;"	p
util	plugged/fzf/src/util/chars_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/eventbox.go	/^package util$/;"	p
util	plugged/fzf/src/util/eventbox_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/slab.go	/^package util$/;"	p
util	plugged/fzf/src/util/util.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_test.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_unix.go	/^package util$/;"	p
util	plugged/fzf/src/util/util_windows.go	/^package util$/;"	p
v	plugged/ale/ftplugin/ale-preview-selection.vim	/^noremap <buffer> v <NOP>$/;"	m
vala_ls	plugged/nvim-lspconfig/CONFIG.md	/^## vala_ls$/;"	s	chapter:Configurations
validateSign	plugged/fzf/src/options.go	/^func validateSign(sign string, signOptName string) error {$/;"	f	package:fzf	typeref:typename:error
version	plugged/delimitMate/Makefile	/^version:$/;"	t
version	plugged/fzf/install.ps1	/^$version="0.27.2"$/;"	v
version	plugged/fzf/main.go	/^var version string = "0.27"$/;"	v	package:main	typeref:typename:string
version	plugged/fzf/src/terminal.go	/^	version      int64$/;"	m	struct:fzf.Terminal	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version    int64$/;"	m	struct:fzf.previewer	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version  int64$/;"	m	struct:fzf.previewed	typeref:typename:int64
version	plugged/fzf/src/terminal.go	/^	version int64$/;"	m	struct:fzf.previewResult	typeref:typename:int64
vertical	plugged/fzf/src/tui/tui.go	/^	vertical    rune$/;"	m	struct:tui.BorderStyle	typeref:typename:rune
vim-slash	plugged/vim-slash/README.md	/^vim-slash$/;"	c
vimTAP	plugged/delimitMate/test/_setup.vim	/^let vimTAP = expand('<sfile>:p:h').'\/build\/VimTAP'$/;"	v
vimball	plugged/delimitMate/Makefile	/^vimball: $(FILENAME).vmb$/;"	t
vimls	plugged/nvim-lspconfig/CONFIG.md	/^## vimls$/;"	s	chapter:Configurations
virtual_text_document	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function virtual_text_document(uri)$/;"	f
virtual_text_document_handler	plugged/nvim-lspconfig/lua/lspconfig/denols.lua	/^local function virtual_text_document_handler(uri, result)$/;"	f
vls	plugged/nvim-lspconfig/CONFIG.md	/^## vls$/;"	s	chapter:Configurations
vmove	plugged/fzf/src/terminal.go	/^func (t *Terminal) vmove(o int, allowCycle bool) {$/;"	f	struct:fzf.Terminal
vset	plugged/fzf/src/terminal.go	/^func (t *Terminal) vset(o int) bool {$/;"	f	struct:fzf.Terminal	typeref:typename:bool
vuels	plugged/nvim-lspconfig/CONFIG.md	/^## vuels$/;"	s	chapter:Configurations
wait	plugged/fzf/src/reader.go	/^	wait     bool$/;"	m	struct:fzf.Reader	typeref:typename:bool
wait	plugged/fzf/test/test_go.rb	/^def wait$/;"	f
whiteSuffix	plugged/fzf/src/terminal.go	/^var whiteSuffix *regexp.Regexp$/;"	v	package:fzf	typeref:typename:*regexp.Regexp
width	plugged/fzf/src/terminal.go	/^	width    int$/;"	m	struct:fzf.itemLine	typeref:typename:int
width	plugged/fzf/src/tui/light.go	/^	width         int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
width	plugged/fzf/src/tui/light.go	/^	width    int$/;"	m	struct:tui.LightWindow	typeref:typename:int
width	plugged/fzf/src/tui/tcell.go	/^	width       int$/;"	m	struct:tui.TcellWindow	typeref:typename:int
win	plugged/fzf/test/test_go.rb	/^  attr_reader :win$/;"	A	class:Tmux
win_float.default_opts	plugged/nvim-lspconfig/lua/lspconfig/_lspui.lua	/^function win_float.default_opts(options)$/;"	f
win_float.percentage_range_window	plugged/nvim-lspconfig/lua/lspconfig/_lspui.lua	/^function win_float.percentage_range_window(col_range, row_range, options)$/;"	f
window	plugged/fzf/src/terminal.go	/^	window       tui.Window$/;"	m	struct:fzf.Terminal	typeref:typename:tui.Window
windowPosition	plugged/fzf/src/options.go	/^type windowPosition int$/;"	t	package:fzf	typeref:typename:int
withIndex	plugged/fzf/src/result_test.go	/^func withIndex(i *Item, index int) *Item {$/;"	f	package:fzf	typeref:typename:*Item
withPrefixLengths	plugged/fzf/src/tokenizer.go	/^func withPrefixLengths(tokens []string, begin int) []Token {$/;"	f	package:fzf	typeref:typename:[]Token
wombat	plugged/lightline.vim/README.md	/^### wombat$/;"	S	chapter:lightline.vim
wombat	plugged/lightline.vim/colorscheme.md	/^### wombat$/;"	S	chapter:Available Colorschemes
wordNext	plugged/fzf/src/terminal.go	/^	wordNext     string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wordRubout	plugged/fzf/src/terminal.go	/^	wordRubout   string$/;"	m	struct:fzf.Terminal	typeref:typename:string
wrap	plugged/fzf/src/options.go	/^	wrap        bool$/;"	m	struct:fzf.previewOpts	typeref:typename:bool
wrapLine	plugged/fzf/src/tui/light.go	/^func wrapLine(input string, prefixLength int, max int, tabstop int) []wrappedLine {$/;"	f	package:tui	typeref:typename:[]wrappedLine
wrapped.newsink	plugged/fzf.vim/autoload/fzf/vim.vim	/^  function! wrapped.newsink(lines)$/;"	f
wrappedLine	plugged/fzf/src/tui/light.go	/^type wrappedLine struct {$/;"	s	package:tui
writeTemporaryFile	plugged/fzf/src/terminal.go	/^func writeTemporaryFile(data []string, printSep string) string {$/;"	f	package:fzf	typeref:typename:string
writelines	plugged/fzf/test/test_go.rb	/^  def writelines(path, lines)$/;"	f	class:TestBase
x	plugged/fzf/src/tui/light.go	/^	x             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
xoffset	plugged/fzf/src/terminal.go	/^	xoffset      int$/;"	m	struct:fzf.Terminal	typeref:typename:int
y	plugged/fzf/src/tui/light.go	/^	y             int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
yS	plugged/vim-surround/plugin/surround.vim	/^  nmap yS  <Plug>YSurround$/;"	m
ySS	plugged/vim-surround/plugin/surround.vim	/^  nmap ySS <Plug>YSsurround$/;"	m
ySs	plugged/vim-surround/plugin/surround.vim	/^  nmap ySs <Plug>YSsurround$/;"	m
yamlls	plugged/nvim-lspconfig/CONFIG.md	/^## yamlls$/;"	s	chapter:Configurations
yanked	plugged/fzf/src/terminal.go	/^	yanked       []rune$/;"	m	struct:fzf.Terminal	typeref:typename:[]rune
yoffset	plugged/fzf/src/tui/light.go	/^	yoffset       int$/;"	m	struct:tui.LightRenderer	typeref:typename:int
ys	plugged/vim-surround/plugin/surround.vim	/^  nmap ys  <Plug>Ysurround$/;"	m
yss	plugged/vim-surround/plugin/surround.vim	/^  nmap yss <Plug>Yssurround$/;"	m
z	plugged/vim-sneak/plugin/sneak.vim	/^  omap z <Plug>Sneak_s$/;"	m
zeta_note	plugged/nvim-lspconfig/CONFIG.md	/^## zeta_note$/;"	s	chapter:Configurations
zip	plugged/delimitMate/Makefile	/^zip: $(FILENAME).zip $(FILENAME).vmb.zip$/;"	t
zls	plugged/nvim-lspconfig/CONFIG.md	/^## zls$/;"	s	chapter:Configurations
zsh	plugged/fzf/test/test_go.rb	/^    def zsh$/;"	S	class:Shell
{__index	plugged/completion-nvim/lua/completion/source/path.lua	/^}, {__index = function()$/;"	f
